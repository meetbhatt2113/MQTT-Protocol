
MUL_CLIENT_SUGG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000156b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002788  08015848  08015848  00025848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017fd0  08017fd0  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08017fd0  08017fd0  00027fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017fd8  08017fd8  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017fd8  08017fd8  00027fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017fdc  08017fdc  00027fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08017fe0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bc40  20000080  08018060  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000bcc0  08018060  0003bcc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003184a  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000792a  00000000  00000000  00061936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023b8  00000000  00000000  00069260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c14  00000000  00000000  0006b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000112e6  00000000  00000000  0006d22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039ebd  00000000  00000000  0007e512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9563  00000000  00000000  000b83cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009af0  00000000  00000000  001a1934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001ab424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015830 	.word	0x08015830

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08015830 	.word	0x08015830

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	468e      	mov	lr, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14c      	bne.n	80002aa <__udivmoddi4+0xaa>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d967      	bls.n	80002e6 <__udivmoddi4+0xe6>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b153      	cbz	r3, 8000232 <__udivmoddi4+0x32>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	fa01 fe03 	lsl.w	lr, r1, r3
 8000228:	fa20 f202 	lsr.w	r2, r0, r2
 800022c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fbbe f1f7 	udiv	r1, lr, r7
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fb07 ee11 	mls	lr, r7, r1, lr
 8000242:	fb01 f005 	mul.w	r0, r1, r5
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x66>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 3eff 	add.w	lr, r1, #4294967295
 8000258:	f080 8119 	bcs.w	800048e <__udivmoddi4+0x28e>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8116 	bls.w	800048e <__udivmoddi4+0x28e>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	fbb2 f0f7 	udiv	r0, r2, r7
 800026c:	fb07 2210 	mls	r2, r7, r0, r2
 8000270:	fb00 f505 	mul.w	r5, r0, r5
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8104 	bcs.w	8000492 <__udivmoddi4+0x292>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8101 	bls.w	8000492 <__udivmoddi4+0x292>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	1b64      	subs	r4, r4, r5
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xc0>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ea 	beq.w	8000488 <__udivmoddi4+0x288>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d148      	bne.n	800035a <__udivmoddi4+0x15a>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xd2>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4696      	mov	lr, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002e0:	e9c6 4e00 	strd	r4, lr, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xea>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 808e 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f4:	1a88      	subs	r0, r1, r2
 80002f6:	2101      	movs	r1, #1
 80002f8:	0c17      	lsrs	r7, r2, #16
 80002fa:	fa1f fe82 	uxth.w	lr, r2
 80002fe:	fbb0 f5f7 	udiv	r5, r0, r7
 8000302:	fb07 0015 	mls	r0, r7, r5, r0
 8000306:	0c22      	lsrs	r2, r4, #16
 8000308:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030c:	fb0e f005 	mul.w	r0, lr, r5
 8000310:	4290      	cmp	r0, r2
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x126>
 8000314:	eb1c 0202 	adds.w	r2, ip, r2
 8000318:	f105 38ff 	add.w	r8, r5, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x124>
 800031e:	4290      	cmp	r0, r2
 8000320:	f200 80cc 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000324:	4645      	mov	r5, r8
 8000326:	1a12      	subs	r2, r2, r0
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033a:	45a6      	cmp	lr, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x150>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f100 32ff 	add.w	r2, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14e>
 8000348:	45a6      	cmp	lr, r4
 800034a:	f200 80b4 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034e:	4610      	mov	r0, r2
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000358:	e7a0      	b.n	800029c <__udivmoddi4+0x9c>
 800035a:	f1c1 0720 	rsb	r7, r1, #32
 800035e:	408b      	lsls	r3, r1
 8000360:	fa22 fc07 	lsr.w	ip, r2, r7
 8000364:	ea4c 0c03 	orr.w	ip, ip, r3
 8000368:	fa25 fa07 	lsr.w	sl, r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	fbba f8f9 	udiv	r8, sl, r9
 8000374:	408d      	lsls	r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	fb09 aa18 	mls	sl, r9, r8, sl
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	432b      	orrs	r3, r5
 8000384:	fa00 f501 	lsl.w	r5, r0, r1
 8000388:	fb08 f00e 	mul.w	r0, r8, lr
 800038c:	0c1c      	lsrs	r4, r3, #16
 800038e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000392:	42a0      	cmp	r0, r4
 8000394:	fa02 f201 	lsl.w	r2, r2, r1
 8000398:	d90b      	bls.n	80003b2 <__udivmoddi4+0x1b2>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a2:	f080 8086 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a6:	42a0      	cmp	r0, r4
 80003a8:	f240 8083 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003ac:	f1a8 0802 	sub.w	r8, r8, #2
 80003b0:	4464      	add	r4, ip
 80003b2:	1a24      	subs	r4, r4, r0
 80003b4:	b298      	uxth	r0, r3
 80003b6:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ba:	fb09 4413 	mls	r4, r9, r3, r4
 80003be:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c2:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x1dc>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d2:	d26a      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d968      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d8:	3b02      	subs	r3, #2
 80003da:	4464      	add	r4, ip
 80003dc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003e0:	fba0 9302 	umull	r9, r3, r0, r2
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	429c      	cmp	r4, r3
 80003ea:	46c8      	mov	r8, r9
 80003ec:	469e      	mov	lr, r3
 80003ee:	d354      	bcc.n	800049a <__udivmoddi4+0x29a>
 80003f0:	d051      	beq.n	8000496 <__udivmoddi4+0x296>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d067      	beq.n	80004c6 <__udivmoddi4+0x2c6>
 80003f6:	ebb5 0308 	subs.w	r3, r5, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	fa04 f707 	lsl.w	r7, r4, r7
 8000404:	431f      	orrs	r7, r3
 8000406:	40cc      	lsrs	r4, r1
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	2100      	movs	r1, #0
 800040e:	e74a      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	f1c3 0020 	rsb	r0, r3, #32
 8000418:	40c1      	lsrs	r1, r0
 800041a:	409d      	lsls	r5, r3
 800041c:	fa24 f000 	lsr.w	r0, r4, r0
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	4328      	orrs	r0, r5
 8000426:	fbb1 f5f7 	udiv	r5, r1, r7
 800042a:	fb07 1115 	mls	r1, r7, r5, r1
 800042e:	fa1f fe8c 	uxth.w	lr, ip
 8000432:	0c02      	lsrs	r2, r0, #16
 8000434:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000438:	fb05 f10e 	mul.w	r1, r5, lr
 800043c:	4291      	cmp	r1, r2
 800043e:	fa04 f403 	lsl.w	r4, r4, r3
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x256>
 8000444:	eb1c 0202 	adds.w	r2, ip, r2
 8000448:	f105 38ff 	add.w	r8, r5, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	4291      	cmp	r1, r2
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3d02      	subs	r5, #2
 8000454:	4462      	add	r2, ip
 8000456:	1a52      	subs	r2, r2, r1
 8000458:	fbb2 f1f7 	udiv	r1, r2, r7
 800045c:	fb07 2211 	mls	r2, r7, r1, r2
 8000460:	b280      	uxth	r0, r0
 8000462:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000466:	fb01 f20e 	mul.w	r2, r1, lr
 800046a:	4282      	cmp	r2, r0
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x280>
 800046e:	eb1c 0000 	adds.w	r0, ip, r0
 8000472:	f101 38ff 	add.w	r8, r1, #4294967295
 8000476:	d216      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000478:	4282      	cmp	r2, r0
 800047a:	d914      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047c:	3902      	subs	r1, #2
 800047e:	4460      	add	r0, ip
 8000480:	1a80      	subs	r0, r0, r2
 8000482:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000486:	e73a      	b.n	80002fe <__udivmoddi4+0xfe>
 8000488:	4631      	mov	r1, r6
 800048a:	4630      	mov	r0, r6
 800048c:	e70b      	b.n	80002a6 <__udivmoddi4+0xa6>
 800048e:	4671      	mov	r1, lr
 8000490:	e6e9      	b.n	8000266 <__udivmoddi4+0x66>
 8000492:	4610      	mov	r0, r2
 8000494:	e6fe      	b.n	8000294 <__udivmoddi4+0x94>
 8000496:	454d      	cmp	r5, r9
 8000498:	d2ab      	bcs.n	80003f2 <__udivmoddi4+0x1f2>
 800049a:	ebb9 0802 	subs.w	r8, r9, r2
 800049e:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a5      	b.n	80003f2 <__udivmoddi4+0x1f2>
 80004a6:	4641      	mov	r1, r8
 80004a8:	e7ea      	b.n	8000480 <__udivmoddi4+0x280>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1dc>
 80004ae:	4645      	mov	r5, r8
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	46d0      	mov	r8, sl
 80004b4:	e77d      	b.n	80003b2 <__udivmoddi4+0x1b2>
 80004b6:	4464      	add	r4, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e749      	b.n	8000350 <__udivmoddi4+0x150>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e731      	b.n	8000326 <__udivmoddi4+0x126>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xdc>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e6ed      	b.n	80002a6 <__udivmoddi4+0xa6>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <mqtt_client_task>:




void mqtt_client_task(void *arg)
{ struct netconn *new_conn = (struct netconn *)arg;
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08e      	sub	sp, #56	; 0x38
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28

 	while (1)
 		{ struct netbuf *buf;
    	err_t rx_err = netconn_recv(new_conn, &buf); // Wait for data
 80004dc:	f107 0320 	add.w	r3, r7, #32
 80004e0:	4619      	mov	r1, r3
 80004e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80004e4:	f008 fd0a 	bl	8008efc <netconn_recv>
 80004e8:	4603      	mov	r3, r0
 80004ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        											 //new_conn = network connection from which receive data
        											//&buf = pointer where netbuf is store
    		if (rx_err == ERR_OK)
 80004ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1f2      	bne.n	80004dc <mqtt_client_task+0xc>
    		{ memcpy(&rxBuffer, buf->p->payload, buf->p->len); // data copy from buf->p->payload and copy into rxBuffer
 80004f6:	6a3b      	ldr	r3, [r7, #32]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	6859      	ldr	r1, [r3, #4]
 80004fc:	6a3b      	ldr	r3, [r7, #32]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	895b      	ldrh	r3, [r3, #10]
 8000502:	461a      	mov	r2, r3
 8000504:	484f      	ldr	r0, [pc, #316]	; (8000644 <mqtt_client_task+0x174>)
 8000506:	f014 fbd8 	bl	8014cba <memcpy>
	        												  // rxBuffer = A pointer to the memory location where the copied data will be stored.
        													  // buf->p->payload = A pointer to the memory location from where the data is to be copied.
	        												  // buf->p->len = The number of bytes to be copied
        	    	 if (conn_req == rxBuffer.arr[0])
 800050a:	4b4e      	ldr	r3, [pc, #312]	; (8000644 <mqtt_client_task+0x174>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b10      	cmp	r3, #16
 8000510:	d107      	bne.n	8000522 <mqtt_client_task+0x52>
        	    	 	 { netconn_write(new_conn, connack_msg, sizeof(connack_msg), NETCONN_COPY); //send connack_ack packet
 8000512:	2300      	movs	r3, #0
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2301      	movs	r3, #1
 8000518:	2203      	movs	r2, #3
 800051a:	494b      	ldr	r1, [pc, #300]	; (8000648 <mqtt_client_task+0x178>)
 800051c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800051e:	f008 fd65 	bl	8008fec <netconn_write_partly>
        	    	 	 }

        	    	 if (ping_req == rxBuffer.arr[0])
 8000522:	4b48      	ldr	r3, [pc, #288]	; (8000644 <mqtt_client_task+0x174>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2bc0      	cmp	r3, #192	; 0xc0
 8000528:	d107      	bne.n	800053a <mqtt_client_task+0x6a>
        	    	 	 { netconn_write(new_conn, ping_res, sizeof(ping_res), NETCONN_COPY); //send publish packet
 800052a:	2300      	movs	r3, #0
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2301      	movs	r3, #1
 8000530:	2202      	movs	r2, #2
 8000532:	4946      	ldr	r1, [pc, #280]	; (800064c <mqtt_client_task+0x17c>)
 8000534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000536:	f008 fd59 	bl	8008fec <netconn_write_partly>
        	    	 	 }

        	    	 if (sub_req == rxBuffer.arr[0] && (memcpy(&packet,buf->p->payload,buf->p->len)))
 800053a:	4b42      	ldr	r3, [pc, #264]	; (8000644 <mqtt_client_task+0x174>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b82      	cmp	r3, #130	; 0x82
 8000540:	d125      	bne.n	800058e <mqtt_client_task+0xbe>
 8000542:	6a3b      	ldr	r3, [r7, #32]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6859      	ldr	r1, [r3, #4]
 8000548:	6a3b      	ldr	r3, [r7, #32]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	895b      	ldrh	r3, [r3, #10]
 800054e:	461a      	mov	r2, r3
 8000550:	483f      	ldr	r0, [pc, #252]	; (8000650 <mqtt_client_task+0x180>)
 8000552:	f014 fbb2 	bl	8014cba <memcpy>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d018      	beq.n	800058e <mqtt_client_task+0xbe>
        	    	 	 { uint8_t sub_ack[]={0x90,0x04,rxBuffer.arr[2],rxBuffer.arr[3],rxBuffer.arr[4],rxBuffer.arr[5]}; // send subscribe packet
 800055c:	2390      	movs	r3, #144	; 0x90
 800055e:	763b      	strb	r3, [r7, #24]
 8000560:	2304      	movs	r3, #4
 8000562:	767b      	strb	r3, [r7, #25]
 8000564:	4b37      	ldr	r3, [pc, #220]	; (8000644 <mqtt_client_task+0x174>)
 8000566:	789b      	ldrb	r3, [r3, #2]
 8000568:	76bb      	strb	r3, [r7, #26]
 800056a:	4b36      	ldr	r3, [pc, #216]	; (8000644 <mqtt_client_task+0x174>)
 800056c:	78db      	ldrb	r3, [r3, #3]
 800056e:	76fb      	strb	r3, [r7, #27]
 8000570:	4b34      	ldr	r3, [pc, #208]	; (8000644 <mqtt_client_task+0x174>)
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	773b      	strb	r3, [r7, #28]
 8000576:	4b33      	ldr	r3, [pc, #204]	; (8000644 <mqtt_client_task+0x174>)
 8000578:	795b      	ldrb	r3, [r3, #5]
 800057a:	777b      	strb	r3, [r7, #29]
        	    	 	 	 netconn_write(new_conn, sub_ack,sizeof(sub_ack), NETCONN_COPY);
 800057c:	f107 0118 	add.w	r1, r7, #24
 8000580:	2300      	movs	r3, #0
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2301      	movs	r3, #1
 8000586:	2206      	movs	r2, #6
 8000588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800058a:	f008 fd2f 	bl	8008fec <netconn_write_partly>
        	    	 	 }

        	    	 if(pub_msg == rxBuffer.arr[0] && packet.pack_s.pack[7] == rxBuffer.arr[4])
 800058e:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <mqtt_client_task+0x174>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b30      	cmp	r3, #48	; 0x30
 8000594:	d12a      	bne.n	80005ec <mqtt_client_task+0x11c>
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <mqtt_client_task+0x180>)
 8000598:	79da      	ldrb	r2, [r3, #7]
 800059a:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <mqtt_client_task+0x174>)
 800059c:	791b      	ldrb	r3, [r3, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d124      	bne.n	80005ec <mqtt_client_task+0x11c>
        	    	 	 { for(int i=0;i<buf->p->len;i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005a6:	e01a      	b.n	80005de <mqtt_client_task+0x10e>
        	    	 	 	 { memcpy(&pub_packet, buf->p->payload, buf->p->len);
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6859      	ldr	r1, [r3, #4]
 80005ae:	6a3b      	ldr	r3, [r7, #32]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	895b      	ldrh	r3, [r3, #10]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4827      	ldr	r0, [pc, #156]	; (8000654 <mqtt_client_task+0x184>)
 80005b8:	f014 fb7f 	bl	8014cba <memcpy>
        	    	 	 	 	 uint8_t publish[]={pub_packet.pub[i]};
 80005bc:	4a25      	ldr	r2, [pc, #148]	; (8000654 <mqtt_client_task+0x184>)
 80005be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	753b      	strb	r3, [r7, #20]
        	    	 	 	 	   netconn_write(new_conn,publish,sizeof(publish),NETCONN_COPY); //send publish packet
 80005c6:	f107 0114 	add.w	r1, r7, #20
 80005ca:	2300      	movs	r3, #0
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2301      	movs	r3, #1
 80005d0:	2201      	movs	r2, #1
 80005d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80005d4:	f008 fd0a 	bl	8008fec <netconn_write_partly>
        	    	 	 { for(int i=0;i<buf->p->len;i++)
 80005d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005da:	3301      	adds	r3, #1
 80005dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005de:	6a3b      	ldr	r3, [r7, #32]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	895b      	ldrh	r3, [r3, #10]
 80005e4:	461a      	mov	r2, r3
 80005e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e8:	4293      	cmp	r3, r2
 80005ea:	dbdd      	blt.n	80005a8 <mqtt_client_task+0xd8>
        	    	 	 	 }
        	    	 	 }

        	    	 if(unsub_req == rxBuffer.arr[0])
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <mqtt_client_task+0x174>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2ba2      	cmp	r3, #162	; 0xa2
 80005f2:	d118      	bne.n	8000626 <mqtt_client_task+0x156>
        	    	 	 { uint8_t unsub_ack[]={0xb0,0x04,rxBuffer.arr[2],rxBuffer.arr[3],rxBuffer.arr[4],rxBuffer.arr[5]};
 80005f4:	23b0      	movs	r3, #176	; 0xb0
 80005f6:	733b      	strb	r3, [r7, #12]
 80005f8:	2304      	movs	r3, #4
 80005fa:	737b      	strb	r3, [r7, #13]
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <mqtt_client_task+0x174>)
 80005fe:	789b      	ldrb	r3, [r3, #2]
 8000600:	73bb      	strb	r3, [r7, #14]
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <mqtt_client_task+0x174>)
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <mqtt_client_task+0x174>)
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	743b      	strb	r3, [r7, #16]
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <mqtt_client_task+0x174>)
 8000610:	795b      	ldrb	r3, [r3, #5]
 8000612:	747b      	strb	r3, [r7, #17]
        	    	 	 	 netconn_write(new_conn,unsub_ack,sizeof(unsub_ack),NETCONN_COPY); //send unsub_ack packet
 8000614:	f107 010c 	add.w	r1, r7, #12
 8000618:	2300      	movs	r3, #0
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	2206      	movs	r2, #6
 8000620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000622:	f008 fce3 	bl	8008fec <netconn_write_partly>
        	    	 	 }

        	    	 if (disconn == rxBuffer.arr[0])
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <mqtt_client_task+0x174>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2be0      	cmp	r3, #224	; 0xe0
 800062c:	d105      	bne.n	800063a <mqtt_client_task+0x16a>
        	    	 	 {	netconn_close(new_conn); //disconnect the connection
 800062e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000630:	f008 fd84 	bl	800913c <netconn_close>
        	    	 	 	netconn_delete(new_conn);
 8000634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000636:	f008 fa89 	bl	8008b4c <netconn_delete>
        	    	 	 }
        		netbuf_delete(buf);//Deallocate a buffer
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	4618      	mov	r0, r3
 800063e:	f00a f9bd 	bl	800a9bc <netbuf_delete>
 		{ struct netbuf *buf;
 8000642:	e74b      	b.n	80004dc <mqtt_client_task+0xc>
 8000644:	200005ec 	.word	0x200005ec
 8000648:	20000000 	.word	0x20000000
 800064c:	20000004 	.word	0x20000004
 8000650:	200006b4 	.word	0x200006b4
 8000654:	20000650 	.word	0x20000650

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fc24 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f81a 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f8b4 	bl	80007d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000668:	f000 f85e 	bl	8000728 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800066c:	f000 f886 	bl	800077c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000670:	f004 fab8 	bl	8004be4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000674:	4a05      	ldr	r2, [pc, #20]	; (800068c <main+0x34>)
 8000676:	2100      	movs	r1, #0
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <main+0x38>)
 800067a:	f004 fb41 	bl	8004d00 <osThreadNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <main+0x3c>)
 8000682:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000684:	f004 fae0 	bl	8004c48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000688:	e7fe      	b.n	8000688 <main+0x30>
 800068a:	bf00      	nop
 800068c:	08017e3c 	.word	0x08017e3c
 8000690:	0800092d 	.word	0x0800092d
 8000694:	200005e8 	.word	0x200005e8

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b092      	sub	sp, #72	; 0x48
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f014 fa3b 	bl	8014b22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006be:	2301      	movs	r3, #1
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	2310      	movs	r3, #16
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ca:	2300      	movs	r3, #0
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 80006ce:	230d      	movs	r3, #13
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 80006d2:	23c3      	movs	r3, #195	; 0xc3
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006da:	2305      	movs	r3, #5
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0318 	add.w	r3, r7, #24
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f968 	bl	80029b8 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006ee:	f000 f986 	bl	80009fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2103      	movs	r1, #3
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fba6 	bl	8002e60 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800071a:	f000 f970 	bl	80009fe <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3748      	adds	r7, #72	; 0x48
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART3_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000760:	f003 f896 	bl	8003890 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f948 	bl	80009fe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000009c 	.word	0x2000009c
 8000778:	40004800 	.word	0x40004800

0800077c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000782:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000786:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 800078a:	2204      	movs	r2, #4
 800078c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000790:	2202      	movs	r2, #2
 8000792:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 800079c:	2202      	movs	r2, #2
 800079e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007ba:	f001 ffdf 	bl	800277c <HAL_PCD_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 f91b 	bl	80009fe <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000e4 	.word	0x200000e4

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	4b4c      	ldr	r3, [pc, #304]	; (800091c <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a4b      	ldr	r2, [pc, #300]	; (800091c <MX_GPIO_Init+0x14c>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b49      	ldr	r3, [pc, #292]	; (800091c <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	4b45      	ldr	r3, [pc, #276]	; (800091c <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a44      	ldr	r2, [pc, #272]	; (800091c <MX_GPIO_Init+0x14c>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b42      	ldr	r3, [pc, #264]	; (800091c <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b3e      	ldr	r3, [pc, #248]	; (800091c <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a3d      	ldr	r2, [pc, #244]	; (800091c <MX_GPIO_Init+0x14c>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b3b      	ldr	r3, [pc, #236]	; (800091c <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a36      	ldr	r2, [pc, #216]	; (800091c <MX_GPIO_Init+0x14c>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b34      	ldr	r3, [pc, #208]	; (800091c <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b30      	ldr	r3, [pc, #192]	; (800091c <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a2f      	ldr	r2, [pc, #188]	; (800091c <MX_GPIO_Init+0x14c>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b2d      	ldr	r3, [pc, #180]	; (800091c <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <MX_GPIO_Init+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a28      	ldr	r2, [pc, #160]	; (800091c <MX_GPIO_Init+0x14c>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f244 0181 	movw	r1, #16513	; 0x4081
 8000894:	4822      	ldr	r0, [pc, #136]	; (8000920 <MX_GPIO_Init+0x150>)
 8000896:	f001 ff59 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	4821      	ldr	r0, [pc, #132]	; (8000924 <MX_GPIO_Init+0x154>)
 80008a0:	f001 ff54 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	481b      	ldr	r0, [pc, #108]	; (8000928 <MX_GPIO_Init+0x158>)
 80008bc:	f001 fda8 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4811      	ldr	r0, [pc, #68]	; (8000920 <MX_GPIO_Init+0x150>)
 80008da:	f001 fd99 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008de:	2340      	movs	r3, #64	; 0x40
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <MX_GPIO_Init+0x154>)
 80008f6:	f001 fd8b 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_GPIO_Init+0x154>)
 800090e:	f001 fd7f 	bl	8002410 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000912:	bf00      	nop
 8000914:	3730      	adds	r7, #48	; 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40020400 	.word	0x40020400
 8000924:	40021800 	.word	0x40021800
 8000928:	40020800 	.word	0x40020800

0800092c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af02      	add	r7, sp, #8
 8000932:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000934:	f003 fbd0 	bl	80040d8 <MX_LWIP_Init>
  	  struct netconn *mqtt_conn, *new_conn;
       err_t bind_err, listen_err, accept_err;

        mqtt_conn = netconn_new(NETCONN_TCP); // Create a new connection structure
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2010      	movs	r0, #16
 800093e:	f008 f88b 	bl	8008a58 <netconn_new_with_proto_and_callback>
 8000942:	6178      	str	r0, [r7, #20]
        bind_err = netconn_bind(mqtt_conn, IP_ADDR_ANY, MQTT_PORT); //Set local IP address/port of a netconn
 8000944:	f240 725b 	movw	r2, #1883	; 0x75b
 8000948:	4920      	ldr	r1, [pc, #128]	; (80009cc <StartDefaultTask+0xa0>)
 800094a:	6978      	ldr	r0, [r7, #20]
 800094c:	f008 f924 	bl	8008b98 <netconn_bind>
 8000950:	4603      	mov	r3, r0
 8000952:	74fb      	strb	r3, [r7, #19]

        if (bind_err != ERR_OK)
 8000954:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d009      	beq.n	8000970 <StartDefaultTask+0x44>
        		{
        		 	 printf("Error binding MQTT server: %d\n", bind_err);
 800095c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000960:	4619      	mov	r1, r3
 8000962:	481b      	ldr	r0, [pc, #108]	; (80009d0 <StartDefaultTask+0xa4>)
 8000964:	f014 f878 	bl	8014a58 <iprintf>
        		 	   netconn_delete(mqtt_conn);
 8000968:	6978      	ldr	r0, [r7, #20]
 800096a:	f008 f8ef 	bl	8008b4c <netconn_delete>
        		 	   return;
 800096e:	e029      	b.n	80009c4 <StartDefaultTask+0x98>
        		}

        	listen_err = netconn_listen(mqtt_conn); //Make a listening TCP netconn
 8000970:	21ff      	movs	r1, #255	; 0xff
 8000972:	6978      	ldr	r0, [r7, #20]
 8000974:	f008 f948 	bl	8008c08 <netconn_listen_with_backlog>
 8000978:	4603      	mov	r3, r0
 800097a:	74bb      	strb	r3, [r7, #18]
        		if (listen_err != ERR_OK)
 800097c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d009      	beq.n	8000998 <StartDefaultTask+0x6c>
        			{
        		 		printf("Error listening for MQTT connections: %d\n", listen_err);
 8000984:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000988:	4619      	mov	r1, r3
 800098a:	4812      	ldr	r0, [pc, #72]	; (80009d4 <StartDefaultTask+0xa8>)
 800098c:	f014 f864 	bl	8014a58 <iprintf>
        		 		  netconn_delete(mqtt_conn);
 8000990:	6978      	ldr	r0, [r7, #20]
 8000992:	f008 f8db 	bl	8008b4c <netconn_delete>
        		 		  return;
 8000996:	e015      	b.n	80009c4 <StartDefaultTask+0x98>
        			}

        		while (1)
        	 	 { accept_err = netconn_accept(mqtt_conn, &new_conn); //Wait for incoming connections
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4619      	mov	r1, r3
 800099e:	6978      	ldr	r0, [r7, #20]
 80009a0:	f008 f95e 	bl	8008c60 <netconn_accept>
 80009a4:	4603      	mov	r3, r0
 80009a6:	747b      	strb	r3, [r7, #17]
        	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 //mqtt_conn is listen the connection and new_conn is when accepted connection stored
        	 	 	 if (accept_err == ERR_OK) //ERR_OK means error is 0 so that execute if parts
 80009a8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1f3      	bne.n	8000998 <StartDefaultTask+0x6c>
        	 	 	 	 {
        	 	 		 	 sys_thread_new("mqtt_client_task", mqtt_client_task, new_conn,1024, 1); //make new thread and give 1024 stack size and give priority 1
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	2301      	movs	r3, #1
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ba:	4907      	ldr	r1, [pc, #28]	; (80009d8 <StartDefaultTask+0xac>)
 80009bc:	4807      	ldr	r0, [pc, #28]	; (80009dc <StartDefaultTask+0xb0>)
 80009be:	f013 ff4b 	bl	8014858 <sys_thread_new>
        	 	 { accept_err = netconn_accept(mqtt_conn, &new_conn); //Wait for incoming connections
 80009c2:	e7e9      	b.n	8000998 <StartDefaultTask+0x6c>
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */
}
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08017f88 	.word	0x08017f88
 80009d0:	08015854 	.word	0x08015854
 80009d4:	08015874 	.word	0x08015874
 80009d8:	080004d1 	.word	0x080004d1
 80009dc:	080158a0 	.word	0x080158a0

080009e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009f0:	d101      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f2:	f000 fa7b 	bl	8000eec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a02:	b672      	cpsid	i
}
 8000a04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_MspInit+0x54>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <HAL_MspInit+0x54>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x54>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_MspInit+0x54>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_MspInit+0x54>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_MspInit+0x54>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	f06f 0001 	mvn.w	r0, #1
 8000a4e:	f000 fb42 	bl	80010d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12c      	bne.n	8000adc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000acc:	2307      	movs	r3, #7
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <HAL_UART_MspInit+0x8c>)
 8000ad8:	f001 fc9a 	bl	8002410 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40004800 	.word	0x40004800
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020c00 	.word	0x40020c00

08000af0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b10:	d13f      	bne.n	8000b92 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <HAL_PCD_MspInit+0xac>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <HAL_PCD_MspInit+0xac>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <HAL_PCD_MspInit+0xac>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b2e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b40:	230a      	movs	r3, #10
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4815      	ldr	r0, [pc, #84]	; (8000ba0 <HAL_PCD_MspInit+0xb0>)
 8000b4c:	f001 fc60 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480e      	ldr	r0, [pc, #56]	; (8000ba0 <HAL_PCD_MspInit+0xb0>)
 8000b66:	f001 fc53 	bl	8002410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_PCD_MspInit+0xac>)
 8000b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_PCD_MspInit+0xac>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6353      	str	r3, [r2, #52]	; 0x34
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_PCD_MspInit+0xac>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_PCD_MspInit+0xac>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_PCD_MspInit+0xac>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08e      	sub	sp, #56	; 0x38
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <HAL_InitTick+0xe8>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	4a33      	ldr	r2, [pc, #204]	; (8000c8c <HAL_InitTick+0xe8>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc4:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <HAL_InitTick+0xe8>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd0:	f107 0210 	add.w	r2, r7, #16
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fb86 	bl	80032ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d103      	bne.n	8000bf2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bea:	f002 fb3b 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 8000bee:	6378      	str	r0, [r7, #52]	; 0x34
 8000bf0:	e004      	b.n	8000bfc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bf2:	f002 fb37 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfe:	4a24      	ldr	r2, [pc, #144]	; (8000c90 <HAL_InitTick+0xec>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	0c9b      	lsrs	r3, r3, #18
 8000c06:	3b01      	subs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c0a:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <HAL_InitTick+0xf0>)
 8000c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <HAL_InitTick+0xf0>)
 8000c14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c18:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000c1a:	4a1e      	ldr	r2, [pc, #120]	; (8000c94 <HAL_InitTick+0xf0>)
 8000c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <HAL_InitTick+0xf0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <HAL_InitTick+0xf0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_InitTick+0xf0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000c32:	4818      	ldr	r0, [pc, #96]	; (8000c94 <HAL_InitTick+0xf0>)
 8000c34:	f002 fb8a 	bl	800334c <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d11b      	bne.n	8000c7e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000c46:	4813      	ldr	r0, [pc, #76]	; (8000c94 <HAL_InitTick+0xf0>)
 8000c48:	f002 fbd8 	bl	80033fc <HAL_TIM_Base_Start_IT>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d111      	bne.n	8000c7e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c5a:	201c      	movs	r0, #28
 8000c5c:	f000 fa57 	bl	800110e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b0f      	cmp	r3, #15
 8000c64:	d808      	bhi.n	8000c78 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000c66:	2200      	movs	r2, #0
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	201c      	movs	r0, #28
 8000c6c:	f000 fa33 	bl	80010d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <HAL_InitTick+0xf4>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e002      	b.n	8000c7e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3738      	adds	r7, #56	; 0x38
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	431bde83 	.word	0x431bde83
 8000c94:	20000718 	.word	0x20000718
 8000c98:	2000000c 	.word	0x2000000c

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
	...

08000cc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM2_IRQHandler+0x10>)
 8000cce:	f002 fc03 	bl	80034d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000718 	.word	0x20000718

08000cdc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <ETH_IRQHandler+0x10>)
 8000ce2:	f000 fdf0 	bl	80018c6 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20003888 	.word	0x20003888

08000cf0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <ETH_WKUP_IRQHandler+0x10>)
 8000cf6:	f000 fde6 	bl	80018c6 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20003888 	.word	0x20003888

08000d04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e00a      	b.n	8000d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d16:	f3af 8000 	nop.w
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	b2ca      	uxtb	r2, r1
 8000d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf0      	blt.n	8000d16 <_read+0x12>
  }

  return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e009      	b.n	8000d64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	60ba      	str	r2, [r7, #8]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf1      	blt.n	8000d50 <_write+0x12>
  }
  return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_close>:

int _close(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <_isatty>:

int _isatty(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b085      	sub	sp, #20
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
	...

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d205      	bcs.n	8000e14 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <_sbrk+0x6c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	e009      	b.n	8000e28 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <_sbrk+0x64>)
 8000e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20020000 	.word	0x20020000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	20000760 	.word	0x20000760
 8000e40:	2000bcc0 	.word	0x2000bcc0
 8000e44:	2000bcb0 	.word	0x2000bcb0

08000e48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000e58:	f7ff fff6 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	; (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f013 fef3 	bl	8014c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fbe7 	bl	8000658 <main>
  bx  lr
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e98:	08017fe0 	.word	0x08017fe0
  ldr r2, =_sbss
 8000e9c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000ea0:	2000bcc0 	.word	0x2000bcc0

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f8f5 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f7ff fe64 	bl	8000ba4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fd94 	bl	8000a08 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_IncTick+0x1c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <HAL_IncTick+0x20>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	20000764 	.word	0x20000764

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b02      	ldr	r3, [pc, #8]	; (8000f20 <HAL_GetTick+0x10>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000764 	.word	0x20000764

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff0 	bl	8000f10 <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffe0 	bl	8000f10 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000010 	.word	0x20000010

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	db0b      	blt.n	8000ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 021f 	and.w	r2, r3, #31
 8000fe8:	4906      	ldr	r1, [pc, #24]	; (8001004 <__NVIC_EnableIRQ+0x34>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff4f 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff64 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ffb2 	bl	800105c <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff81 	bl	8001008 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff57 	bl	8000fd0 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800113c:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <HAL_ETH_Init+0x2a0>)
 800113e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e173      	b.n	800143a <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d106      	bne.n	800116c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f003 f90a 	bl	8004380 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b97      	ldr	r3, [pc, #604]	; (80013d0 <HAL_ETH_Init+0x2a4>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	4a96      	ldr	r2, [pc, #600]	; (80013d0 <HAL_ETH_Init+0x2a4>)
 8001176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117a:	6453      	str	r3, [r2, #68]	; 0x44
 800117c:	4b94      	ldr	r3, [pc, #592]	; (80013d0 <HAL_ETH_Init+0x2a4>)
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001188:	4b92      	ldr	r3, [pc, #584]	; (80013d4 <HAL_ETH_Init+0x2a8>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4a91      	ldr	r2, [pc, #580]	; (80013d4 <HAL_ETH_Init+0x2a8>)
 800118e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001192:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001194:	4b8f      	ldr	r3, [pc, #572]	; (80013d4 <HAL_ETH_Init+0x2a8>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	498d      	ldr	r1, [pc, #564]	; (80013d4 <HAL_ETH_Init+0x2a8>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ba:	f7ff fea9 	bl	8000f10 <HAL_GetTick>
 80011be:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011c0:	e011      	b.n	80011e6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 80011c2:	f7ff fea5 	bl	8000f10 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011d0:	d909      	bls.n	80011e6 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e129      	b.n	800143a <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e4      	bne.n	80011c2 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f023 031c 	bic.w	r3, r3, #28
 8001206:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001208:	f002 f822 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 800120c:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4a71      	ldr	r2, [pc, #452]	; (80013d8 <HAL_ETH_Init+0x2ac>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d908      	bls.n	8001228 <HAL_ETH_Init+0xfc>
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4a70      	ldr	r2, [pc, #448]	; (80013dc <HAL_ETH_Init+0x2b0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d804      	bhi.n	8001228 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e01a      	b.n	800125e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	4a6c      	ldr	r2, [pc, #432]	; (80013dc <HAL_ETH_Init+0x2b0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d908      	bls.n	8001242 <HAL_ETH_Init+0x116>
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	4a66      	ldr	r2, [pc, #408]	; (80013cc <HAL_ETH_Init+0x2a0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d204      	bcs.n	8001242 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f043 030c 	orr.w	r3, r3, #12
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	e00d      	b.n	800125e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4a61      	ldr	r2, [pc, #388]	; (80013cc <HAL_ETH_Init+0x2a0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d303      	bcc.n	8001252 <HAL_ETH_Init+0x126>
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4a64      	ldr	r2, [pc, #400]	; (80013e0 <HAL_ETH_Init+0x2b4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d904      	bls.n	800125c <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	e000      	b.n	800125e <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800125c:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001266:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800126a:	2100      	movs	r1, #0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fc08 	bl	8001a82 <HAL_ETH_WritePHYRegister>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00b      	beq.n	8001290 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800127c:	6939      	ldr	r1, [r7, #16]
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 fdbe 	bl	8001e00 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0d4      	b.n	800143a <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001290:	20ff      	movs	r0, #255	; 0xff
 8001292:	f7ff fe47 	bl	8000f24 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80a2 	beq.w	80013e4 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012a0:	f7ff fe36 	bl	8000f10 <HAL_GetTick>
 80012a4:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	461a      	mov	r2, r3
 80012ac:	2101      	movs	r1, #1
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fb7f 	bl	80019b2 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 80012b4:	f7ff fe2c 	bl	8000f10 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d90f      	bls.n	80012e6 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012ca:	6939      	ldr	r1, [r7, #16]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fd97 	bl	8001e00 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e0a9      	b.n	800143a <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0da      	beq.n	80012a6 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f4:	2100      	movs	r1, #0
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fbc3 	bl	8001a82 <HAL_ETH_WritePHYRegister>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001306:	6939      	ldr	r1, [r7, #16]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 fd79 	bl	8001e00 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e08f      	b.n	800143a <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800131a:	f7ff fdf9 	bl	8000f10 <HAL_GetTick>
 800131e:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	461a      	mov	r2, r3
 8001326:	2101      	movs	r1, #1
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fb42 	bl	80019b2 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800132e:	f7ff fdef 	bl	8000f10 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f241 3288 	movw	r2, #5000	; 0x1388
 800133c:	4293      	cmp	r3, r2
 800133e:	d90f      	bls.n	8001360 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001344:	6939      	ldr	r1, [r7, #16]
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fd5a 	bl	8001e00 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e06c      	b.n	800143a <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0da      	beq.n	8001320 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	461a      	mov	r2, r3
 8001370:	2110      	movs	r1, #16
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 fb1d 	bl	80019b2 <HAL_ETH_ReadPHYRegister>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00b      	beq.n	8001396 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001382:	6939      	ldr	r1, [r7, #16]
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fd3b 	bl	8001e00 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e051      	b.n	800143a <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d004      	beq.n	80013aa <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	e002      	b.n	80013b0 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	e032      	b.n	8001428 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	e02d      	b.n	8001428 <HAL_ETH_Init+0x2fc>
 80013cc:	03938700 	.word	0x03938700
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800
 80013d8:	01312cff 	.word	0x01312cff
 80013dc:	02160ebf 	.word	0x02160ebf
 80013e0:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	085b      	lsrs	r3, r3, #1
 80013f2:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	2100      	movs	r1, #0
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fb40 	bl	8001a82 <HAL_ETH_WritePHYRegister>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00b      	beq.n	8001420 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800140c:	6939      	ldr	r1, [r7, #16]
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fcf6 	bl	8001e00 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e00c      	b.n	800143a <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001420:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001424:	f7ff fd7e 	bl	8000f24 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fce8 	bl	8001e00 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop

08001444 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_ETH_DMATxDescListInit+0x20>
 8001460:	2302      	movs	r3, #2
 8001462:	e051      	b.n	8001508 <HAL_ETH_DMATxDescListInit+0xc4>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e030      	b.n	80014e2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	015b      	lsls	r3, r3, #5
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	4413      	add	r3, r2
 8001488:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001490:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	3b01      	subs	r3, #1
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d208      	bcs.n	80014d6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	015b      	lsls	r3, r3, #5
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	4413      	add	r3, r2
 80014ce:	461a      	mov	r2, r3
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	e002      	b.n	80014dc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3ca      	bcc.n	8001480 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f4:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001512:	b480      	push	{r7}
 8001514:	b087      	sub	sp, #28
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_ETH_DMARxDescListInit+0x20>
 800152e:	2302      	movs	r3, #2
 8001530:	e055      	b.n	80015de <HAL_ETH_DMARxDescListInit+0xcc>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2202      	movs	r2, #2
 800153e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e034      	b.n	80015b8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	4413      	add	r3, r2
 8001556:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800155e:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001566:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	461a      	mov	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3b01      	subs	r3, #1
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	429a      	cmp	r2, r3
 8001598:	d208      	bcs.n	80015ac <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	015b      	lsls	r3, r3, #5
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	4413      	add	r3, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	e002      	b.n	80015b2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d3c6      	bcc.n	800154e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ca:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_ETH_TransmitFrame+0x24>
 8001608:	2302      	movs	r3, #2
 800160a:	e0cc      	b.n	80017a6 <HAL_ETH_TransmitFrame+0x1be>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0b7      	b.n	80017a6 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	da09      	bge.n	8001654 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2212      	movs	r2, #18
 8001644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0a8      	b.n	80017a6 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800165a:	4293      	cmp	r3, r2
 800165c:	d915      	bls.n	800168a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	4a53      	ldr	r2, [pc, #332]	; (80017b0 <HAL_ETH_TransmitFrame+0x1c8>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0a9b      	lsrs	r3, r3, #10
 8001668:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <HAL_ETH_TransmitFrame+0x1c8>)
 800166e:	fba3 1302 	umull	r1, r3, r3, r2
 8001672:	0a9b      	lsrs	r3, r3, #10
 8001674:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e001      	b.n	800168e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 800168a:	2301      	movs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d11c      	bne.n	80016ce <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016a2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016ae:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016be:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	461a      	mov	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80016cc:	e04b      	b.n	8001766 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	e044      	b.n	800175e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e2:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d107      	bne.n	80016fa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016f8:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001702:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3b01      	subs	r3, #1
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	429a      	cmp	r2, r3
 800170c:	d116      	bne.n	800173c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800171c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001722:	fb03 f202 	mul.w	r2, r3, r2
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	4413      	add	r3, r2
 800172a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800172e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800173a:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800174a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	3301      	adds	r3, #1
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	429a      	cmp	r2, r3
 8001764:	d3b6      	bcc.n	80016d4 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00d      	beq.n	8001794 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001780:	461a      	mov	r2, r3
 8001782:	2304      	movs	r3, #4
 8001784:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178e:	461a      	mov	r2, r3
 8001790:	2300      	movs	r3, #0
 8001792:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	ac02b00b 	.word	0xac02b00b
 80017b4:	fffffa0c 	.word	0xfffffa0c

080017b8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e074      	b.n	80018bc <HAL_ETH_GetReceivedFrame_IT+0x104>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2202      	movs	r2, #2
 80017de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80017e2:	e05a      	b.n	800189a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3301      	adds	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f8:	d10d      	bne.n	8001816 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
 8001814:	e041      	b.n	800189a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10b      	bne.n	800183c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
 800183a:	e02e      	b.n	800189a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	635a      	str	r2, [r3, #52]	; 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001852:	2b01      	cmp	r3, #1
 8001854:	d103      	bne.n	800185e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0c1b      	lsrs	r3, r3, #16
 8001866:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800186a:	1f1a      	subs	r2, r3, #4
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	461a      	mov	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e010      	b.n	80018bc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db02      	blt.n	80018aa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d99c      	bls.n	80017e4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018dc:	2b40      	cmp	r3, #64	; 0x40
 80018de:	d112      	bne.n	8001906 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f002 fe23 	bl	800452c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ee:	461a      	mov	r2, r3
 80018f0:	2340      	movs	r3, #64	; 0x40
 80018f2:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001904:	e01a      	b.n	800193c <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d111      	bne.n	800193c <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f838 	bl	800198e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001926:	461a      	mov	r2, r3
 8001928:	2301      	movs	r3, #1
 800192a:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001944:	461a      	mov	r2, r3
 8001946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800194a:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800195a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800195e:	d112      	bne.n	8001986 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f81d 	bl	80019a0 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196e:	461a      	mov	r2, r3
 8001970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001974:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	460b      	mov	r3, r1
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b82      	cmp	r3, #130	; 0x82
 80019d2:	d101      	bne.n	80019d8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80019d4:	2302      	movs	r3, #2
 80019d6:	e050      	b.n	8001a7a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2282      	movs	r2, #130	; 0x82
 80019dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 031c 	and.w	r3, r3, #28
 80019ee:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8a1b      	ldrh	r3, [r3, #16]
 80019f4:	02db      	lsls	r3, r3, #11
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80019fe:	897b      	ldrh	r3, [r7, #10]
 8001a00:	019b      	lsls	r3, r3, #6
 8001a02:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f023 0302 	bic.w	r3, r3, #2
 8001a12:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a24:	f7ff fa74 	bl	8000f10 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a2a:	e015      	b.n	8001a58 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a2c:	f7ff fa70 	bl	8000f10 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d309      	bcc.n	8001a50 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e014      	b.n	8001a7a <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1e4      	bne.n	8001a2c <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b42      	cmp	r3, #66	; 0x42
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e04e      	b.n	8001b46 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2242      	movs	r2, #66	; 0x42
 8001aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 031c 	and.w	r3, r3, #28
 8001abe:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8a1b      	ldrh	r3, [r3, #16]
 8001ac4:	02db      	lsls	r3, r3, #11
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ace:	897b      	ldrh	r3, [r7, #10]
 8001ad0:	019b      	lsls	r3, r3, #6
 8001ad2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f043 0302 	orr.w	r3, r3, #2
 8001ae2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001afe:	f7ff fa07 	bl	8000f10 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b04:	e015      	b.n	8001b32 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b06:	f7ff fa03 	bl	8000f10 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b14:	d309      	bcc.n	8001b2a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e00d      	b.n	8001b46 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e4      	bne.n	8001b06 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_ETH_Start+0x16>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e01f      	b.n	8001ba4 <HAL_ETH_Start+0x56>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fb3f 	bl	80021f8 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fb76 	bl	800226c <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fc01 	bl	8002388 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fbaa 	bl	80022e0 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fbd1 	bl	8002334 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ETH_Stop+0x16>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e01f      	b.n	8001c02 <HAL_ETH_Stop+0x56>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fb99 	bl	800230a <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fbc0 	bl	800235e <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fb61 	bl	80022a6 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fbcf 	bl	8002388 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fb21 	bl	8002232 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_ETH_ConfigMAC+0x1c>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0e4      	b.n	8001df2 <HAL_ETH_ConfigMAC+0x1e6>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80b1 	beq.w	8001da2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4b6c      	ldr	r3, [pc, #432]	; (8001dfc <HAL_ETH_ConfigMAC+0x1f0>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001c58:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001c5e:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001c64:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001c6a:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001c70:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001c76:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001c7c:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8001c82:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001c88:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001c8e:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8001c94:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8001c9a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7ff f936 	bl	8000f24 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001cc8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001cce:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001cd4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8001cda:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ce0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001ce6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001cf2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001cf4:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff f910 	bl	8000f24 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d14:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d1e:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d2e:	4013      	ands	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d3c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001d42:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001d48:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8001d4e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001d54:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f7ff f8d9 	bl	8000f24 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff f8c6 	bl	8000f24 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	61da      	str	r2, [r3, #28]
 8001da0:	e01e      	b.n	8001de0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001db0:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f7ff f8a6 	bl	8000f24 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	ff20810f 	.word	0xff20810f

08001e00 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0b0      	sub	sp, #192	; 0xc0
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e1c:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e24:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e4c:	e001      	b.n	8001e52 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e56:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e6c:	2340      	movs	r3, #64	; 0x40
 8001e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ed4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ed8:	4baa      	ldr	r3, [pc, #680]	; (8002184 <ETH_MACDMAConfig+0x384>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8001ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001ee4:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8001ee8:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8001eec:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001ef2:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001ef4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8001ef6:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001efa:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001f00:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8001f04:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8001f08:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8001f0c:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001f10:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8001f14:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001f16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f28:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7fe fff5 	bl	8000f24 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f42:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f48:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f4c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8001f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f52:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8001f58:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f5e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f64:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f68:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f70:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f72:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7fe ffd0 	bl	8000f24 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f8c:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f96:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fa0:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fbe:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001fc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001fc4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001fca:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001fd0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8001fd6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001fd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001fdc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001fde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff0:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7fe ff91 	bl	8000f24 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200a:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 800200c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8002010:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002026:	2001      	movs	r0, #1
 8002028:	f7fe ff7c 	bl	8000f24 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002034:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800203a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203e:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002044:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002048:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800205a:	2304      	movs	r3, #4
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800205e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002068:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800206a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 800207a:	2300      	movs	r3, #0
 800207c:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800207e:	2300      	movs	r3, #0
 8002080:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002090:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002094:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <ETH_MACDMAConfig+0x388>)
 8002096:	4013      	ands	r3, r2
 8002098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800209c:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 800209e:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80020a0:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 80020a2:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 80020a4:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 80020a6:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 80020a8:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 80020aa:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 80020ac:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 80020ae:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 80020b0:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 80020b2:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 80020b4:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 80020b8:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 80020ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 80020bc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80020be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d0:	461a      	mov	r2, r3
 80020d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020d6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7fe ff1c 	bl	8000f24 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f4:	461a      	mov	r2, r3
 80020f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020fa:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80020fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80020fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002100:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8002104:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8002106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002108:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 800210a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 800210c:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 800210e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002110:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8002112:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8002114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002116:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002120:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002124:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002134:	2001      	movs	r0, #1
 8002136:	f7fe fef5 	bl	8000f24 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002142:	461a      	mov	r2, r3
 8002144:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002148:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10d      	bne.n	800216e <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002168:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800216c:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	461a      	mov	r2, r3
 8002174:	2100      	movs	r1, #0
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f808 	bl	800218c <ETH_MACAddressConfig>
}
 800217c:	bf00      	nop
 800217e:	37c0      	adds	r7, #192	; 0xc0
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	ff20810f 	.word	0xff20810f
 8002188:	f8de3f23 	.word	0xf8de3f23

0800218c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3305      	adds	r3, #5
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	3204      	adds	r2, #4
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <ETH_MACAddressConfig+0x64>)
 80021ae:	4413      	add	r3, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3303      	adds	r3, #3
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	061a      	lsls	r2, r3, #24
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3302      	adds	r3, #2
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3301      	adds	r3, #1
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	4313      	orrs	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <ETH_MACAddressConfig+0x68>)
 80021de:	4413      	add	r3, r2
 80021e0:	461a      	mov	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	6013      	str	r3, [r2, #0]
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	40028040 	.word	0x40028040
 80021f4:	40028044 	.word	0x40028044

080021f8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0208 	orr.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800221c:	2001      	movs	r0, #1
 800221e:	f000 f8d9 	bl	80023d4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]
}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0208 	bic.w	r2, r2, #8
 800224c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002256:	2001      	movs	r0, #1
 8002258:	f000 f8bc 	bl	80023d4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	601a      	str	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0204 	orr.w	r2, r2, #4
 8002286:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002290:	2001      	movs	r0, #1
 8002292:	f000 f89f 	bl	80023d4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0204 	bic.w	r2, r2, #4
 80022c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f000 f882 	bl	80023d4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022fe:	6193      	str	r3, [r2, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002324:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002328:	6193      	str	r3, [r2, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002352:	6193      	str	r3, [r2, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	f023 0302 	bic.w	r3, r3, #2
 8002378:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800237c:	6193      	str	r3, [r2, #24]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023aa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f000 f80b 	bl	80023d4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023c8:	6193      	str	r3, [r2, #24]
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <ETH_Delay+0x34>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <ETH_Delay+0x38>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0a5b      	lsrs	r3, r3, #9
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f0:	bf00      	nop
  }
  while (Delay --);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1e5a      	subs	r2, r3, #1
 80023f6:	60fa      	str	r2, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f9      	bne.n	80023f0 <ETH_Delay+0x1c>
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	20000008 	.word	0x20000008
 800240c:	10624dd3 	.word	0x10624dd3

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241e:	e16f      	b.n	8002700 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2101      	movs	r1, #1
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8161 	beq.w	80026fa <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d005      	beq.n	8002450 <HAL_GPIO_Init+0x40>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d130      	bne.n	80024b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002486:	2201      	movs	r2, #1
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 0201 	and.w	r2, r3, #1
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d017      	beq.n	80024ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d123      	bne.n	8002542 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	6939      	ldr	r1, [r7, #16]
 800253e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0203 	and.w	r2, r3, #3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80bb 	beq.w	80026fa <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	4b64      	ldr	r3, [pc, #400]	; (800271c <HAL_GPIO_Init+0x30c>)
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	4a63      	ldr	r2, [pc, #396]	; (800271c <HAL_GPIO_Init+0x30c>)
 800258e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002592:	6453      	str	r3, [r2, #68]	; 0x44
 8002594:	4b61      	ldr	r3, [pc, #388]	; (800271c <HAL_GPIO_Init+0x30c>)
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025a0:	4a5f      	ldr	r2, [pc, #380]	; (8002720 <HAL_GPIO_Init+0x310>)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	3302      	adds	r3, #2
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a57      	ldr	r2, [pc, #348]	; (8002724 <HAL_GPIO_Init+0x314>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d031      	beq.n	8002630 <HAL_GPIO_Init+0x220>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_GPIO_Init+0x318>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d02b      	beq.n	800262c <HAL_GPIO_Init+0x21c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a55      	ldr	r2, [pc, #340]	; (800272c <HAL_GPIO_Init+0x31c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d025      	beq.n	8002628 <HAL_GPIO_Init+0x218>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a54      	ldr	r2, [pc, #336]	; (8002730 <HAL_GPIO_Init+0x320>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d01f      	beq.n	8002624 <HAL_GPIO_Init+0x214>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a53      	ldr	r2, [pc, #332]	; (8002734 <HAL_GPIO_Init+0x324>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d019      	beq.n	8002620 <HAL_GPIO_Init+0x210>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_GPIO_Init+0x328>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_GPIO_Init+0x20c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a51      	ldr	r2, [pc, #324]	; (800273c <HAL_GPIO_Init+0x32c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00d      	beq.n	8002618 <HAL_GPIO_Init+0x208>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a50      	ldr	r2, [pc, #320]	; (8002740 <HAL_GPIO_Init+0x330>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d007      	beq.n	8002614 <HAL_GPIO_Init+0x204>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a4f      	ldr	r2, [pc, #316]	; (8002744 <HAL_GPIO_Init+0x334>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_GPIO_Init+0x200>
 800260c:	2308      	movs	r3, #8
 800260e:	e010      	b.n	8002632 <HAL_GPIO_Init+0x222>
 8002610:	2309      	movs	r3, #9
 8002612:	e00e      	b.n	8002632 <HAL_GPIO_Init+0x222>
 8002614:	2307      	movs	r3, #7
 8002616:	e00c      	b.n	8002632 <HAL_GPIO_Init+0x222>
 8002618:	2306      	movs	r3, #6
 800261a:	e00a      	b.n	8002632 <HAL_GPIO_Init+0x222>
 800261c:	2305      	movs	r3, #5
 800261e:	e008      	b.n	8002632 <HAL_GPIO_Init+0x222>
 8002620:	2304      	movs	r3, #4
 8002622:	e006      	b.n	8002632 <HAL_GPIO_Init+0x222>
 8002624:	2303      	movs	r3, #3
 8002626:	e004      	b.n	8002632 <HAL_GPIO_Init+0x222>
 8002628:	2302      	movs	r3, #2
 800262a:	e002      	b.n	8002632 <HAL_GPIO_Init+0x222>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_GPIO_Init+0x222>
 8002630:	2300      	movs	r3, #0
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	f002 0203 	and.w	r2, r2, #3
 8002638:	0092      	lsls	r2, r2, #2
 800263a:	4093      	lsls	r3, r2
 800263c:	461a      	mov	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002644:	4936      	ldr	r1, [pc, #216]	; (8002720 <HAL_GPIO_Init+0x310>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_GPIO_Init+0x338>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002676:	4a34      	ldr	r2, [pc, #208]	; (8002748 <HAL_GPIO_Init+0x338>)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <HAL_GPIO_Init+0x338>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026a0:	4a29      	ldr	r2, [pc, #164]	; (8002748 <HAL_GPIO_Init+0x338>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026a6:	4b28      	ldr	r3, [pc, #160]	; (8002748 <HAL_GPIO_Init+0x338>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026ca:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <HAL_GPIO_Init+0x338>)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_GPIO_Init+0x338>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <HAL_GPIO_Init+0x338>)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3301      	adds	r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	f47f ae88 	bne.w	8002420 <HAL_GPIO_Init+0x10>
  }
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	40023800 	.word	0x40023800
 8002720:	40013800 	.word	0x40013800
 8002724:	40020000 	.word	0x40020000
 8002728:	40020400 	.word	0x40020400
 800272c:	40020800 	.word	0x40020800
 8002730:	40020c00 	.word	0x40020c00
 8002734:	40021000 	.word	0x40021000
 8002738:	40021400 	.word	0x40021400
 800273c:	40021800 	.word	0x40021800
 8002740:	40021c00 	.word	0x40021c00
 8002744:	40022000 	.word	0x40022000
 8002748:	40013c00 	.word	0x40013c00

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002768:	e003      	b.n	8002772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	041a      	lsls	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	619a      	str	r2, [r3, #24]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	b08f      	sub	sp, #60	; 0x3c
 8002780:	af0a      	add	r7, sp, #40	; 0x28
 8002782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e10f      	b.n	80029ae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7fe f9a1 	bl	8000af0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2203      	movs	r2, #3
 80027b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 f9f0 	bl	8003bb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	687e      	ldr	r6, [r7, #4]
 80027da:	466d      	mov	r5, sp
 80027dc:	f106 0410 	add.w	r4, r6, #16
 80027e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80027f0:	1d33      	adds	r3, r6, #4
 80027f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f4:	6838      	ldr	r0, [r7, #0]
 80027f6:	f001 f985 	bl	8003b04 <USB_CoreInit>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0d0      	b.n	80029ae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f001 f9dd 	bl	8003bd2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
 800281c:	e04a      	b.n	80028b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	333d      	adds	r3, #61	; 0x3d
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	333c      	adds	r3, #60	; 0x3c
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	b298      	uxth	r0, r3
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3356      	adds	r3, #86	; 0x56
 800285a:	4602      	mov	r2, r0
 800285c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800285e:	7bfa      	ldrb	r2, [r7, #15]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	3340      	adds	r3, #64	; 0x40
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	3344      	adds	r3, #68	; 0x44
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	3348      	adds	r3, #72	; 0x48
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	334c      	adds	r3, #76	; 0x4c
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	3301      	adds	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d3af      	bcc.n	800281e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	e044      	b.n	800294e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	3301      	adds	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d3b5      	bcc.n	80028c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	687e      	ldr	r6, [r7, #4]
 8002960:	466d      	mov	r5, sp
 8002962:	f106 0410 	add.w	r4, r6, #16
 8002966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002972:	e885 0003 	stmia.w	r5, {r0, r1}
 8002976:	1d33      	adds	r3, r6, #4
 8002978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800297a:	6838      	ldr	r0, [r7, #0]
 800297c:	f001 f976 	bl	8003c6c <USB_DevInit>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e00d      	b.n	80029ae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 fb36 	bl	8004018 <USB_DevDisconnect>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080029b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e23b      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d050      	beq.n	8002a78 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d6:	4b9e      	ldr	r3, [pc, #632]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d00c      	beq.n	80029fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e2:	4b9b      	ldr	r3, [pc, #620]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d112      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	4b98      	ldr	r3, [pc, #608]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fa:	d10b      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	4b94      	ldr	r3, [pc, #592]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d036      	beq.n	8002a76 <HAL_RCC_OscConfig+0xbe>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d132      	bne.n	8002a76 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e216      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4b8e      	ldr	r3, [pc, #568]	; (8002c54 <HAL_RCC_OscConfig+0x29c>)
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d013      	beq.n	8002a4e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe fa73 	bl	8000f10 <HAL_GetTick>
 8002a2a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a2e:	f7fe fa6f 	bl	8000f10 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b64      	cmp	r3, #100	; 0x64
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e200      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a40:	4b83      	ldr	r3, [pc, #524]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x76>
 8002a4c:	e014      	b.n	8002a78 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fa5f 	bl	8000f10 <HAL_GetTick>
 8002a52:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a56:	f7fe fa5b 	bl	8000f10 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b64      	cmp	r3, #100	; 0x64
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e1ec      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a68:	4b79      	ldr	r3, [pc, #484]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x9e>
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a76:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d077      	beq.n	8002b74 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a84:	4b72      	ldr	r3, [pc, #456]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a90:	4b6f      	ldr	r3, [pc, #444]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d126      	bne.n	8002aea <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9c:	4b6c      	ldr	r3, [pc, #432]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d120      	bne.n	8002aea <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa8:	4b69      	ldr	r3, [pc, #420]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x108>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e1c0      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac0:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	21f8      	movs	r1, #248	; 0xf8
 8002ace:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	69b9      	ldr	r1, [r7, #24]
 8002ad2:	fa91 f1a1 	rbit	r1, r1
 8002ad6:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ad8:	6979      	ldr	r1, [r7, #20]
 8002ada:	fab1 f181 	clz	r1, r1
 8002ade:	b2c9      	uxtb	r1, r1
 8002ae0:	408b      	lsls	r3, r1
 8002ae2:	495b      	ldr	r1, [pc, #364]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae8:	e044      	b.n	8002b74 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02a      	beq.n	8002b48 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af2:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <HAL_RCC_OscConfig+0x2a0>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe fa0a 	bl	8000f10 <HAL_GetTick>
 8002afc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b00:	f7fe fa06 	bl	8000f10 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e197      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	4b4f      	ldr	r3, [pc, #316]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b4c      	ldr	r3, [pc, #304]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	21f8      	movs	r1, #248	; 0xf8
 8002b2c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	6939      	ldr	r1, [r7, #16]
 8002b30:	fa91 f1a1 	rbit	r1, r1
 8002b34:	60f9      	str	r1, [r7, #12]
  return result;
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	fab1 f181 	clz	r1, r1
 8002b3c:	b2c9      	uxtb	r1, r1
 8002b3e:	408b      	lsls	r3, r1
 8002b40:	4943      	ldr	r1, [pc, #268]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]
 8002b46:	e015      	b.n	8002b74 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_RCC_OscConfig+0x2a0>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe f9df 	bl	8000f10 <HAL_GetTick>
 8002b52:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b56:	f7fe f9db 	bl	8000f10 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e16c      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b68:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d030      	beq.n	8002be2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d016      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b88:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <HAL_RCC_OscConfig+0x2a4>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe f9bf 	bl	8000f10 <HAL_GetTick>
 8002b92:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b96:	f7fe f9bb 	bl	8000f10 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e14c      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1de>
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <HAL_RCC_OscConfig+0x2a4>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbc:	f7fe f9a8 	bl	8000f10 <HAL_GetTick>
 8002bc0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fe f9a4 	bl	8000f10 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e135      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8087 	beq.w	8002cfe <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d110      	bne.n	8002c24 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_RCC_OscConfig+0x298>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_RCC_OscConfig+0x2a8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <HAL_RCC_OscConfig+0x2a8>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x2a8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d122      	bne.n	8002c82 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_RCC_OscConfig+0x2a8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_RCC_OscConfig+0x2a8>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c48:	f7fe f962 	bl	8000f10 <HAL_GetTick>
 8002c4c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	e012      	b.n	8002c76 <HAL_RCC_OscConfig+0x2be>
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40023802 	.word	0x40023802
 8002c58:	42470000 	.word	0x42470000
 8002c5c:	42470e80 	.word	0x42470e80
 8002c60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c64:	f7fe f954 	bl	8000f10 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0e5      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b75      	ldr	r3, [pc, #468]	; (8002e4c <HAL_RCC_OscConfig+0x494>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <HAL_RCC_OscConfig+0x498>)
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d015      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7fe f93c 	bl	8000f10 <HAL_GetTick>
 8002c98:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f7fe f938 	bl	8000f10 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e0c7      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb2:	4b68      	ldr	r3, [pc, #416]	; (8002e54 <HAL_RCC_OscConfig+0x49c>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0ee      	beq.n	8002c9c <HAL_RCC_OscConfig+0x2e4>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7fe f926 	bl	8000f10 <HAL_GetTick>
 8002cc4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc8:	f7fe f922 	bl	8000f10 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0b1      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cde:	4b5d      	ldr	r3, [pc, #372]	; (8002e54 <HAL_RCC_OscConfig+0x49c>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1ee      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d105      	bne.n	8002cfe <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf2:	4b58      	ldr	r3, [pc, #352]	; (8002e54 <HAL_RCC_OscConfig+0x49c>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a57      	ldr	r2, [pc, #348]	; (8002e54 <HAL_RCC_OscConfig+0x49c>)
 8002cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 809c 	beq.w	8002e40 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d08:	4b52      	ldr	r3, [pc, #328]	; (8002e54 <HAL_RCC_OscConfig+0x49c>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d061      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d146      	bne.n	8002daa <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1c:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <HAL_RCC_OscConfig+0x4a0>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7fe f8f5 	bl	8000f10 <HAL_GetTick>
 8002d26:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7fe f8f1 	bl	8000f10 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	; 0x64
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e082      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3c:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <HAL_RCC_OscConfig+0x49c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d48:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <HAL_RCC_OscConfig+0x49c>)
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <HAL_RCC_OscConfig+0x4a4>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	69d1      	ldr	r1, [r2, #28]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6a12      	ldr	r2, [r2, #32]
 8002d58:	4311      	orrs	r1, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d5e:	0192      	lsls	r2, r2, #6
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d66:	0612      	lsls	r2, r2, #24
 8002d68:	4311      	orrs	r1, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d6e:	0852      	lsrs	r2, r2, #1
 8002d70:	3a01      	subs	r2, #1
 8002d72:	0412      	lsls	r2, r2, #16
 8002d74:	430a      	orrs	r2, r1
 8002d76:	4937      	ldr	r1, [pc, #220]	; (8002e54 <HAL_RCC_OscConfig+0x49c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_RCC_OscConfig+0x4a0>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fe f8c5 	bl	8000f10 <HAL_GetTick>
 8002d86:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe f8c1 	bl	8000f10 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	; 0x64
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e052      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <HAL_RCC_OscConfig+0x49c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x3d2>
 8002da8:	e04a      	b.n	8002e40 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCC_OscConfig+0x4a0>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe f8ae 	bl	8000f10 <HAL_GetTick>
 8002db4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe f8aa 	bl	8000f10 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e03b      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <HAL_RCC_OscConfig+0x49c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x400>
 8002dd6:	e033      	b.n	8002e40 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e02e      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_OscConfig+0x49c>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d121      	bne.n	8002e3c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d11a      	bne.n	8002e3c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e12:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	3b01      	subs	r3, #1
 8002e26:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3728      	adds	r7, #40	; 0x28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	40023870 	.word	0x40023870
 8002e54:	40023800 	.word	0x40023800
 8002e58:	42470060 	.word	0x42470060
 8002e5c:	f0bc8000 	.word	0xf0bc8000

08002e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d2      	b.n	800301a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b6b      	ldr	r3, [pc, #428]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d90c      	bls.n	8002e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b68      	ldr	r3, [pc, #416]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b66      	ldr	r3, [pc, #408]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0be      	b.n	800301a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb4:	4b5c      	ldr	r3, [pc, #368]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a5b      	ldr	r2, [pc, #364]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002ecc:	4b56      	ldr	r3, [pc, #344]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a55      	ldr	r2, [pc, #340]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ed6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4950      	ldr	r1, [pc, #320]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d040      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	4b4a      	ldr	r3, [pc, #296]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d115      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e085      	b.n	800301a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	4b44      	ldr	r3, [pc, #272]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e079      	b.n	800301a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4b40      	ldr	r3, [pc, #256]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e071      	b.n	800301a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b3c      	ldr	r3, [pc, #240]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4939      	ldr	r1, [pc, #228]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f48:	f7fd ffe2 	bl	8000f10 <HAL_GetTick>
 8002f4c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7fd ffde 	bl	8000f10 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e059      	b.n	800301a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b30      	ldr	r3, [pc, #192]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d20c      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b25      	ldr	r3, [pc, #148]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e03c      	b.n	800301a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	491b      	ldr	r1, [pc, #108]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fca:	4b17      	ldr	r3, [pc, #92]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4913      	ldr	r1, [pc, #76]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002fde:	f000 f82b 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002fe2:	4601      	mov	r1, r0
 8002fe4:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fec:	22f0      	movs	r2, #240	; 0xf0
 8002fee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	fa92 f2a2 	rbit	r2, r2
 8002ff6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	fab2 f282 	clz	r2, r2
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	40d3      	lsrs	r3, r2
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x1cc>)
 8003004:	5cd3      	ldrb	r3, [r2, r3]
 8003006:	fa21 f303 	lsr.w	r3, r1, r3
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1d0>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1d4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fdc6 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023c00 	.word	0x40023c00
 8003028:	40023800 	.word	0x40023800
 800302c:	08017e60 	.word	0x08017e60
 8003030:	20000008 	.word	0x20000008
 8003034:	2000000c 	.word	0x2000000c

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800303c:	b094      	sub	sp, #80	; 0x50
 800303e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	647b      	str	r3, [r7, #68]	; 0x44
 8003044:	2300      	movs	r3, #0
 8003046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003048:	2300      	movs	r3, #0
 800304a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003050:	4b7c      	ldr	r3, [pc, #496]	; (8003244 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b08      	cmp	r3, #8
 800305a:	d00d      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x40>
 800305c:	2b08      	cmp	r3, #8
 800305e:	f200 80e7 	bhi.w	8003230 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x34>
 8003066:	2b04      	cmp	r3, #4
 8003068:	d003      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x3a>
 800306a:	e0e1      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800306c:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_GetSysClockFreq+0x210>)
 800306e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003070:	e0e1      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_GetSysClockFreq+0x214>)
 8003074:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003076:	e0de      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003078:	4b72      	ldr	r3, [pc, #456]	; (8003244 <HAL_RCC_GetSysClockFreq+0x20c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003080:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003082:	4b70      	ldr	r3, [pc, #448]	; (8003244 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d065      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308e:	4b6d      	ldr	r3, [pc, #436]	; (8003244 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	099b      	lsrs	r3, r3, #6
 8003094:	2200      	movs	r2, #0
 8003096:	63bb      	str	r3, [r7, #56]	; 0x38
 8003098:	63fa      	str	r2, [r7, #60]	; 0x3c
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a0:	633b      	str	r3, [r7, #48]	; 0x30
 80030a2:	2300      	movs	r3, #0
 80030a4:	637b      	str	r3, [r7, #52]	; 0x34
 80030a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030aa:	4622      	mov	r2, r4
 80030ac:	462b      	mov	r3, r5
 80030ae:	f04f 0000 	mov.w	r0, #0
 80030b2:	f04f 0100 	mov.w	r1, #0
 80030b6:	0159      	lsls	r1, r3, #5
 80030b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030bc:	0150      	lsls	r0, r2, #5
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4621      	mov	r1, r4
 80030c4:	1a51      	subs	r1, r2, r1
 80030c6:	6139      	str	r1, [r7, #16]
 80030c8:	4629      	mov	r1, r5
 80030ca:	eb63 0301 	sbc.w	r3, r3, r1
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030dc:	4659      	mov	r1, fp
 80030de:	018b      	lsls	r3, r1, #6
 80030e0:	4651      	mov	r1, sl
 80030e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e6:	4651      	mov	r1, sl
 80030e8:	018a      	lsls	r2, r1, #6
 80030ea:	46d4      	mov	ip, sl
 80030ec:	ebb2 080c 	subs.w	r8, r2, ip
 80030f0:	4659      	mov	r1, fp
 80030f2:	eb63 0901 	sbc.w	r9, r3, r1
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800310a:	4690      	mov	r8, r2
 800310c:	4699      	mov	r9, r3
 800310e:	4623      	mov	r3, r4
 8003110:	eb18 0303 	adds.w	r3, r8, r3
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	462b      	mov	r3, r5
 8003118:	eb49 0303 	adc.w	r3, r9, r3
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800312a:	4629      	mov	r1, r5
 800312c:	024b      	lsls	r3, r1, #9
 800312e:	4620      	mov	r0, r4
 8003130:	4629      	mov	r1, r5
 8003132:	4604      	mov	r4, r0
 8003134:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003138:	4601      	mov	r1, r0
 800313a:	024a      	lsls	r2, r1, #9
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003142:	2200      	movs	r2, #0
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
 8003146:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003148:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800314c:	f7fd f840 	bl	80001d0 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003158:	e05c      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315a:	4b3a      	ldr	r3, [pc, #232]	; (8003244 <HAL_RCC_GetSysClockFreq+0x20c>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	099b      	lsrs	r3, r3, #6
 8003160:	2200      	movs	r2, #0
 8003162:	4618      	mov	r0, r3
 8003164:	4611      	mov	r1, r2
 8003166:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	2300      	movs	r3, #0
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
 8003170:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	f04f 0000 	mov.w	r0, #0
 800317c:	f04f 0100 	mov.w	r1, #0
 8003180:	0159      	lsls	r1, r3, #5
 8003182:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003186:	0150      	lsls	r0, r2, #5
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	46c4      	mov	ip, r8
 800318e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003192:	4640      	mov	r0, r8
 8003194:	4649      	mov	r1, r9
 8003196:	468c      	mov	ip, r1
 8003198:	eb63 0b0c 	sbc.w	fp, r3, ip
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031b0:	ebb2 040a 	subs.w	r4, r2, sl
 80031b4:	eb63 050b 	sbc.w	r5, r3, fp
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	00eb      	lsls	r3, r5, #3
 80031c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031c6:	00e2      	lsls	r2, r4, #3
 80031c8:	4614      	mov	r4, r2
 80031ca:	461d      	mov	r5, r3
 80031cc:	4603      	mov	r3, r0
 80031ce:	18e3      	adds	r3, r4, r3
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	460b      	mov	r3, r1
 80031d4:	eb45 0303 	adc.w	r3, r5, r3
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031e6:	4629      	mov	r1, r5
 80031e8:	028b      	lsls	r3, r1, #10
 80031ea:	4620      	mov	r0, r4
 80031ec:	4629      	mov	r1, r5
 80031ee:	4604      	mov	r4, r0
 80031f0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80031f4:	4601      	mov	r1, r0
 80031f6:	028a      	lsls	r2, r1, #10
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fe:	2200      	movs	r2, #0
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	61fa      	str	r2, [r7, #28]
 8003204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003208:	f7fc ffe2 	bl	80001d0 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4613      	mov	r3, r2
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	3301      	adds	r3, #1
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003224:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800322e:	e002      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_GetSysClockFreq+0x210>)
 8003232:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003238:	4618      	mov	r0, r3
 800323a:	3750      	adds	r7, #80	; 0x50
 800323c:	46bd      	mov	sp, r7
 800323e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
 8003248:	00f42400 	.word	0x00f42400
 800324c:	007a1200 	.word	0x007a1200

08003250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003254:	4b02      	ldr	r3, [pc, #8]	; (8003260 <HAL_RCC_GetHCLKFreq+0x10>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	20000008 	.word	0x20000008

08003264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800326a:	f7ff fff1 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 800326e:	4601      	mov	r1, r0
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003278:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800327c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	fa92 f2a2 	rbit	r2, r2
 8003284:	603a      	str	r2, [r7, #0]
  return result;
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	fab2 f282 	clz	r2, r2
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	40d3      	lsrs	r3, r2
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	08017e70 	.word	0x08017e70

080032a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80032ae:	f7ff ffcf 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 80032b2:	4601      	mov	r1, r0
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80032bc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80032c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	fa92 f2a2 	rbit	r2, r2
 80032c8:	603a      	str	r2, [r7, #0]
  return result;
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	fab2 f282 	clz	r2, r2
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	40d3      	lsrs	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	08017e70 	.word	0x08017e70

080032ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	220f      	movs	r2, #15
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40023800 	.word	0x40023800
 8003348:	40023c00 	.word	0x40023c00

0800334c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e041      	b.n	80033e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f839 	bl	80033ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 f9d0 	bl	8003730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e04e      	b.n	80034b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <HAL_TIM_Base_Start_IT+0xc0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d022      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343e:	d01d      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1e      	ldr	r2, [pc, #120]	; (80034c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <HAL_TIM_Base_Start_IT+0xd0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d111      	bne.n	80034a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d010      	beq.n	80034b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349e:	e007      	b.n	80034b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40010400 	.word	0x40010400
 80034d0:	40014000 	.word	0x40014000
 80034d4:	40001800 	.word	0x40001800

080034d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0202 	mvn.w	r2, #2
 8003504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8ed 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f8e0 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f8ef 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0204 	mvn.w	r2, #4
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f8c3 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8b6 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f8c5 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0208 	mvn.w	r2, #8
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f899 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f88c 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f89b 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2208      	movs	r2, #8
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f86f 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f862 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f871 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0201 	mvn.w	r2, #1
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fd f9c2 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8fb 	bl	800387e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f835 	bl	800371e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0220 	mvn.w	r2, #32
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8c6 	bl	800386c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a3f      	ldr	r2, [pc, #252]	; (8003840 <TIM_Base_SetConfig+0x110>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d013      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374e:	d00f      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <TIM_Base_SetConfig+0x114>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00b      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <TIM_Base_SetConfig+0x118>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d007      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a3a      	ldr	r2, [pc, #232]	; (800384c <TIM_Base_SetConfig+0x11c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a39      	ldr	r2, [pc, #228]	; (8003850 <TIM_Base_SetConfig+0x120>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d108      	bne.n	8003782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2e      	ldr	r2, [pc, #184]	; (8003840 <TIM_Base_SetConfig+0x110>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d027      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <TIM_Base_SetConfig+0x114>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d023      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2a      	ldr	r2, [pc, #168]	; (8003848 <TIM_Base_SetConfig+0x118>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01f      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a29      	ldr	r2, [pc, #164]	; (800384c <TIM_Base_SetConfig+0x11c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a28      	ldr	r2, [pc, #160]	; (8003850 <TIM_Base_SetConfig+0x120>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d017      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a27      	ldr	r2, [pc, #156]	; (8003854 <TIM_Base_SetConfig+0x124>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a26      	ldr	r2, [pc, #152]	; (8003858 <TIM_Base_SetConfig+0x128>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00f      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <TIM_Base_SetConfig+0x12c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a24      	ldr	r2, [pc, #144]	; (8003860 <TIM_Base_SetConfig+0x130>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <TIM_Base_SetConfig+0x134>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a22      	ldr	r2, [pc, #136]	; (8003868 <TIM_Base_SetConfig+0x138>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d108      	bne.n	80037f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a09      	ldr	r2, [pc, #36]	; (8003840 <TIM_Base_SetConfig+0x110>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <TIM_Base_SetConfig+0xf8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <TIM_Base_SetConfig+0x120>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d103      	bne.n	8003830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	615a      	str	r2, [r3, #20]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40010000 	.word	0x40010000
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40010400 	.word	0x40010400
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800
 8003860:	40001800 	.word	0x40001800
 8003864:	40001c00 	.word	0x40001c00
 8003868:	40002000 	.word	0x40002000

0800386c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e042      	b.n	8003928 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd f8d2 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	; 0x24
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f82b 	bl	8003930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4313      	orrs	r3, r2
 8003964:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003970:	f023 030c 	bic.w	r3, r3, #12
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	430b      	orrs	r3, r1
 800397c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a57      	ldr	r2, [pc, #348]	; (8003af8 <UART_SetConfig+0x1c8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d004      	beq.n	80039a8 <UART_SetConfig+0x78>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a56      	ldr	r2, [pc, #344]	; (8003afc <UART_SetConfig+0x1cc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d103      	bne.n	80039b0 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039a8:	f7ff fc7e 	bl	80032a8 <HAL_RCC_GetPCLK2Freq>
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	e002      	b.n	80039b6 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039b0:	f7ff fc58 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 80039b4:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039be:	d14c      	bne.n	8003a5a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009a      	lsls	r2, r3, #2
 80039ca:	441a      	add	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	4a4a      	ldr	r2, [pc, #296]	; (8003b00 <UART_SetConfig+0x1d0>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	0119      	lsls	r1, r3, #4
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009a      	lsls	r2, r3, #2
 80039ea:	441a      	add	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f6:	4b42      	ldr	r3, [pc, #264]	; (8003b00 <UART_SetConfig+0x1d0>)
 80039f8:	fba3 0302 	umull	r0, r3, r3, r2
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	2064      	movs	r0, #100	; 0x64
 8003a00:	fb00 f303 	mul.w	r3, r0, r3
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	3332      	adds	r3, #50	; 0x32
 8003a0a:	4a3d      	ldr	r2, [pc, #244]	; (8003b00 <UART_SetConfig+0x1d0>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a18:	4419      	add	r1, r3
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	009a      	lsls	r2, r3, #2
 8003a24:	441a      	add	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a30:	4b33      	ldr	r3, [pc, #204]	; (8003b00 <UART_SetConfig+0x1d0>)
 8003a32:	fba3 0302 	umull	r0, r3, r3, r2
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	2064      	movs	r0, #100	; 0x64
 8003a3a:	fb00 f303 	mul.w	r3, r0, r3
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	3332      	adds	r3, #50	; 0x32
 8003a44:	4a2e      	ldr	r2, [pc, #184]	; (8003b00 <UART_SetConfig+0x1d0>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	f003 0207 	and.w	r2, r3, #7
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	440a      	add	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a58:	e04a      	b.n	8003af0 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009a      	lsls	r2, r3, #2
 8003a64:	441a      	add	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <UART_SetConfig+0x1d0>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	0119      	lsls	r1, r3, #4
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009a      	lsls	r2, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a90:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <UART_SetConfig+0x1d0>)
 8003a92:	fba3 0302 	umull	r0, r3, r3, r2
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2064      	movs	r0, #100	; 0x64
 8003a9a:	fb00 f303 	mul.w	r3, r0, r3
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	3332      	adds	r3, #50	; 0x32
 8003aa4:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <UART_SetConfig+0x1d0>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab0:	4419      	add	r1, r3
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009a      	lsls	r2, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <UART_SetConfig+0x1d0>)
 8003aca:	fba3 0302 	umull	r0, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2064      	movs	r0, #100	; 0x64
 8003ad2:	fb00 f303 	mul.w	r3, r0, r3
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	3332      	adds	r3, #50	; 0x32
 8003adc:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <UART_SetConfig+0x1d0>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	f003 020f 	and.w	r2, r3, #15
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	440a      	add	r2, r1
 8003aee:	609a      	str	r2, [r3, #8]
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40011000 	.word	0x40011000
 8003afc:	40011400 	.word	0x40011400
 8003b00:	51eb851f 	.word	0x51eb851f

08003b04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b04:	b084      	sub	sp, #16
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	f107 001c 	add.w	r0, r7, #28
 8003b12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d122      	bne.n	8003b62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d105      	bne.n	8003b56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa8c 	bl	8004074 <USB_CoreReset>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	e010      	b.n	8003b84 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa80 	bl	8004074 <USB_CoreReset>
 8003b74:	4603      	mov	r3, r0
 8003b76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d10b      	bne.n	8003ba2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f043 0206 	orr.w	r2, r3, #6
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f043 0220 	orr.w	r2, r3, #32
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bae:	b004      	add	sp, #16
 8003bb0:	4770      	bx	lr

08003bb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f023 0201 	bic.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d115      	bne.n	8003c20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c00:	2001      	movs	r0, #1
 8003c02:	f7fd f98f 	bl	8000f24 <HAL_Delay>
      ms++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fa23 	bl	8004058 <USB_GetMode>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d01e      	beq.n	8003c56 <USB_SetCurrentMode+0x84>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b31      	cmp	r3, #49	; 0x31
 8003c1c:	d9f0      	bls.n	8003c00 <USB_SetCurrentMode+0x2e>
 8003c1e:	e01a      	b.n	8003c56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d115      	bne.n	8003c52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c32:	2001      	movs	r0, #1
 8003c34:	f7fd f976 	bl	8000f24 <HAL_Delay>
      ms++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa0a 	bl	8004058 <USB_GetMode>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <USB_SetCurrentMode+0x84>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b31      	cmp	r3, #49	; 0x31
 8003c4e:	d9f0      	bls.n	8003c32 <USB_SetCurrentMode+0x60>
 8003c50:	e001      	b.n	8003c56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e005      	b.n	8003c62 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b32      	cmp	r3, #50	; 0x32
 8003c5a:	d101      	bne.n	8003c60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	e009      	b.n	8003ca0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	3340      	adds	r3, #64	; 0x40
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b0e      	cmp	r3, #14
 8003ca4:	d9f2      	bls.n	8003c8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11c      	bne.n	8003ce6 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cba:	f043 0302 	orr.w	r3, r3, #2
 8003cbe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ce4:	e00b      	b.n	8003cfe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d04:	461a      	mov	r2, r3
 8003d06:	2300      	movs	r3, #0
 8003d08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d10c      	bne.n	8003d2a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d16:	2100      	movs	r1, #0
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f965 	bl	8003fe8 <USB_SetDevSpeed>
 8003d1e:	e008      	b.n	8003d32 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d20:	2101      	movs	r1, #1
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f960 	bl	8003fe8 <USB_SetDevSpeed>
 8003d28:	e003      	b.n	8003d32 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d2a:	2103      	movs	r1, #3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f95b 	bl	8003fe8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d32:	2110      	movs	r1, #16
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f8f3 	bl	8003f20 <USB_FlushTxFifo>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f91f 	bl	8003f88 <USB_FlushRxFifo>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d66:	461a      	mov	r2, r3
 8003d68:	2300      	movs	r3, #0
 8003d6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d72:	461a      	mov	r2, r3
 8003d74:	2300      	movs	r3, #0
 8003d76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	e043      	b.n	8003e06 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d94:	d118      	bne.n	8003dc8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	461a      	mov	r2, r3
 8003daa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	e013      	b.n	8003dda <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e008      	b.n	8003dda <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de6:	461a      	mov	r2, r3
 8003de8:	2300      	movs	r3, #0
 8003dea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dfe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	3301      	adds	r3, #1
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d3b7      	bcc.n	8003d7e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	e043      	b.n	8003e9c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e2a:	d118      	bne.n	8003e5e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e013      	b.n	8003e70 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e54:	461a      	mov	r2, r3
 8003e56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	e008      	b.n	8003e70 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d3b7      	bcc.n	8003e14 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f043 0210 	orr.w	r2, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699a      	ldr	r2, [r3, #24]
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <USB_DevInit+0x2b0>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f043 0208 	orr.w	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d107      	bne.n	8003f0c <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f18:	b004      	add	sp, #16
 8003f1a:	4770      	bx	lr
 8003f1c:	803c3800 	.word	0x803c3800

08003f20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <USB_FlushTxFifo+0x64>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e01b      	b.n	8003f78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	daf2      	bge.n	8003f2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	019b      	lsls	r3, r3, #6
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <USB_FlushTxFifo+0x64>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e006      	b.n	8003f78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d0f0      	beq.n	8003f58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	00030d40 	.word	0x00030d40

08003f88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3301      	adds	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a11      	ldr	r2, [pc, #68]	; (8003fe4 <USB_FlushRxFifo+0x5c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e018      	b.n	8003fd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	daf2      	bge.n	8003f94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <USB_FlushRxFifo+0x5c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e006      	b.n	8003fd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b10      	cmp	r3, #16
 8003fd4:	d0f0      	beq.n	8003fb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	00030d40 	.word	0x00030d40

08003fe8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	68f9      	ldr	r1, [r7, #12]
 8004004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004046:	f043 0302 	orr.w	r3, r3, #2
 800404a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f003 0301 	and.w	r3, r3, #1
}
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
	...

08004074 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3301      	adds	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4a12      	ldr	r2, [pc, #72]	; (80040d4 <USB_CoreReset+0x60>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e01b      	b.n	80040ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	daf2      	bge.n	8004080 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f043 0201 	orr.w	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3301      	adds	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <USB_CoreReset+0x60>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e006      	b.n	80040ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d0f0      	beq.n	80040aa <USB_CoreReset+0x36>

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	00030d40 	.word	0x00030d40

080040d8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80040de:	4b99      	ldr	r3, [pc, #612]	; (8004344 <MX_LWIP_Init+0x26c>)
 80040e0:	22c0      	movs	r2, #192	; 0xc0
 80040e2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80040e4:	4b97      	ldr	r3, [pc, #604]	; (8004344 <MX_LWIP_Init+0x26c>)
 80040e6:	22a8      	movs	r2, #168	; 0xa8
 80040e8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80040ea:	4b96      	ldr	r3, [pc, #600]	; (8004344 <MX_LWIP_Init+0x26c>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 80040f0:	4b94      	ldr	r3, [pc, #592]	; (8004344 <MX_LWIP_Init+0x26c>)
 80040f2:	2264      	movs	r2, #100	; 0x64
 80040f4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80040f6:	4b94      	ldr	r3, [pc, #592]	; (8004348 <MX_LWIP_Init+0x270>)
 80040f8:	22ff      	movs	r2, #255	; 0xff
 80040fa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80040fc:	4b92      	ldr	r3, [pc, #584]	; (8004348 <MX_LWIP_Init+0x270>)
 80040fe:	22ff      	movs	r2, #255	; 0xff
 8004100:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004102:	4b91      	ldr	r3, [pc, #580]	; (8004348 <MX_LWIP_Init+0x270>)
 8004104:	22ff      	movs	r2, #255	; 0xff
 8004106:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004108:	4b8f      	ldr	r3, [pc, #572]	; (8004348 <MX_LWIP_Init+0x270>)
 800410a:	2200      	movs	r2, #0
 800410c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800410e:	4b8f      	ldr	r3, [pc, #572]	; (800434c <MX_LWIP_Init+0x274>)
 8004110:	22c0      	movs	r2, #192	; 0xc0
 8004112:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004114:	4b8d      	ldr	r3, [pc, #564]	; (800434c <MX_LWIP_Init+0x274>)
 8004116:	22a8      	movs	r2, #168	; 0xa8
 8004118:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800411a:	4b8c      	ldr	r3, [pc, #560]	; (800434c <MX_LWIP_Init+0x274>)
 800411c:	2200      	movs	r2, #0
 800411e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004120:	4b8a      	ldr	r3, [pc, #552]	; (800434c <MX_LWIP_Init+0x274>)
 8004122:	2201      	movs	r2, #1
 8004124:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004126:	2100      	movs	r1, #0
 8004128:	2000      	movs	r0, #0
 800412a:	f006 fd97 	bl	800ac5c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800412e:	4b85      	ldr	r3, [pc, #532]	; (8004344 <MX_LWIP_Init+0x26c>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	061a      	lsls	r2, r3, #24
 8004134:	4b83      	ldr	r3, [pc, #524]	; (8004344 <MX_LWIP_Init+0x26c>)
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	431a      	orrs	r2, r3
 800413c:	4b81      	ldr	r3, [pc, #516]	; (8004344 <MX_LWIP_Init+0x26c>)
 800413e:	789b      	ldrb	r3, [r3, #2]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	4313      	orrs	r3, r2
 8004144:	4a7f      	ldr	r2, [pc, #508]	; (8004344 <MX_LWIP_Init+0x26c>)
 8004146:	78d2      	ldrb	r2, [r2, #3]
 8004148:	4313      	orrs	r3, r2
 800414a:	061a      	lsls	r2, r3, #24
 800414c:	4b7d      	ldr	r3, [pc, #500]	; (8004344 <MX_LWIP_Init+0x26c>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	0619      	lsls	r1, r3, #24
 8004152:	4b7c      	ldr	r3, [pc, #496]	; (8004344 <MX_LWIP_Init+0x26c>)
 8004154:	785b      	ldrb	r3, [r3, #1]
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	4319      	orrs	r1, r3
 800415a:	4b7a      	ldr	r3, [pc, #488]	; (8004344 <MX_LWIP_Init+0x26c>)
 800415c:	789b      	ldrb	r3, [r3, #2]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	430b      	orrs	r3, r1
 8004162:	4978      	ldr	r1, [pc, #480]	; (8004344 <MX_LWIP_Init+0x26c>)
 8004164:	78c9      	ldrb	r1, [r1, #3]
 8004166:	430b      	orrs	r3, r1
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800416e:	431a      	orrs	r2, r3
 8004170:	4b74      	ldr	r3, [pc, #464]	; (8004344 <MX_LWIP_Init+0x26c>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	0619      	lsls	r1, r3, #24
 8004176:	4b73      	ldr	r3, [pc, #460]	; (8004344 <MX_LWIP_Init+0x26c>)
 8004178:	785b      	ldrb	r3, [r3, #1]
 800417a:	041b      	lsls	r3, r3, #16
 800417c:	4319      	orrs	r1, r3
 800417e:	4b71      	ldr	r3, [pc, #452]	; (8004344 <MX_LWIP_Init+0x26c>)
 8004180:	789b      	ldrb	r3, [r3, #2]
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	430b      	orrs	r3, r1
 8004186:	496f      	ldr	r1, [pc, #444]	; (8004344 <MX_LWIP_Init+0x26c>)
 8004188:	78c9      	ldrb	r1, [r1, #3]
 800418a:	430b      	orrs	r3, r1
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004192:	431a      	orrs	r2, r3
 8004194:	4b6b      	ldr	r3, [pc, #428]	; (8004344 <MX_LWIP_Init+0x26c>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	0619      	lsls	r1, r3, #24
 800419a:	4b6a      	ldr	r3, [pc, #424]	; (8004344 <MX_LWIP_Init+0x26c>)
 800419c:	785b      	ldrb	r3, [r3, #1]
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	4319      	orrs	r1, r3
 80041a2:	4b68      	ldr	r3, [pc, #416]	; (8004344 <MX_LWIP_Init+0x26c>)
 80041a4:	789b      	ldrb	r3, [r3, #2]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	430b      	orrs	r3, r1
 80041aa:	4966      	ldr	r1, [pc, #408]	; (8004344 <MX_LWIP_Init+0x26c>)
 80041ac:	78c9      	ldrb	r1, [r1, #3]
 80041ae:	430b      	orrs	r3, r1
 80041b0:	0e1b      	lsrs	r3, r3, #24
 80041b2:	4313      	orrs	r3, r2
 80041b4:	4a66      	ldr	r2, [pc, #408]	; (8004350 <MX_LWIP_Init+0x278>)
 80041b6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80041b8:	4b63      	ldr	r3, [pc, #396]	; (8004348 <MX_LWIP_Init+0x270>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	061a      	lsls	r2, r3, #24
 80041be:	4b62      	ldr	r3, [pc, #392]	; (8004348 <MX_LWIP_Init+0x270>)
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	041b      	lsls	r3, r3, #16
 80041c4:	431a      	orrs	r2, r3
 80041c6:	4b60      	ldr	r3, [pc, #384]	; (8004348 <MX_LWIP_Init+0x270>)
 80041c8:	789b      	ldrb	r3, [r3, #2]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	4313      	orrs	r3, r2
 80041ce:	4a5e      	ldr	r2, [pc, #376]	; (8004348 <MX_LWIP_Init+0x270>)
 80041d0:	78d2      	ldrb	r2, [r2, #3]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	061a      	lsls	r2, r3, #24
 80041d6:	4b5c      	ldr	r3, [pc, #368]	; (8004348 <MX_LWIP_Init+0x270>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	0619      	lsls	r1, r3, #24
 80041dc:	4b5a      	ldr	r3, [pc, #360]	; (8004348 <MX_LWIP_Init+0x270>)
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	4319      	orrs	r1, r3
 80041e4:	4b58      	ldr	r3, [pc, #352]	; (8004348 <MX_LWIP_Init+0x270>)
 80041e6:	789b      	ldrb	r3, [r3, #2]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	430b      	orrs	r3, r1
 80041ec:	4956      	ldr	r1, [pc, #344]	; (8004348 <MX_LWIP_Init+0x270>)
 80041ee:	78c9      	ldrb	r1, [r1, #3]
 80041f0:	430b      	orrs	r3, r1
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041f8:	431a      	orrs	r2, r3
 80041fa:	4b53      	ldr	r3, [pc, #332]	; (8004348 <MX_LWIP_Init+0x270>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	0619      	lsls	r1, r3, #24
 8004200:	4b51      	ldr	r3, [pc, #324]	; (8004348 <MX_LWIP_Init+0x270>)
 8004202:	785b      	ldrb	r3, [r3, #1]
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	4319      	orrs	r1, r3
 8004208:	4b4f      	ldr	r3, [pc, #316]	; (8004348 <MX_LWIP_Init+0x270>)
 800420a:	789b      	ldrb	r3, [r3, #2]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	430b      	orrs	r3, r1
 8004210:	494d      	ldr	r1, [pc, #308]	; (8004348 <MX_LWIP_Init+0x270>)
 8004212:	78c9      	ldrb	r1, [r1, #3]
 8004214:	430b      	orrs	r3, r1
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800421c:	431a      	orrs	r2, r3
 800421e:	4b4a      	ldr	r3, [pc, #296]	; (8004348 <MX_LWIP_Init+0x270>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	0619      	lsls	r1, r3, #24
 8004224:	4b48      	ldr	r3, [pc, #288]	; (8004348 <MX_LWIP_Init+0x270>)
 8004226:	785b      	ldrb	r3, [r3, #1]
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	4319      	orrs	r1, r3
 800422c:	4b46      	ldr	r3, [pc, #280]	; (8004348 <MX_LWIP_Init+0x270>)
 800422e:	789b      	ldrb	r3, [r3, #2]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	430b      	orrs	r3, r1
 8004234:	4944      	ldr	r1, [pc, #272]	; (8004348 <MX_LWIP_Init+0x270>)
 8004236:	78c9      	ldrb	r1, [r1, #3]
 8004238:	430b      	orrs	r3, r1
 800423a:	0e1b      	lsrs	r3, r3, #24
 800423c:	4313      	orrs	r3, r2
 800423e:	4a45      	ldr	r2, [pc, #276]	; (8004354 <MX_LWIP_Init+0x27c>)
 8004240:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004242:	4b42      	ldr	r3, [pc, #264]	; (800434c <MX_LWIP_Init+0x274>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	061a      	lsls	r2, r3, #24
 8004248:	4b40      	ldr	r3, [pc, #256]	; (800434c <MX_LWIP_Init+0x274>)
 800424a:	785b      	ldrb	r3, [r3, #1]
 800424c:	041b      	lsls	r3, r3, #16
 800424e:	431a      	orrs	r2, r3
 8004250:	4b3e      	ldr	r3, [pc, #248]	; (800434c <MX_LWIP_Init+0x274>)
 8004252:	789b      	ldrb	r3, [r3, #2]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	4313      	orrs	r3, r2
 8004258:	4a3c      	ldr	r2, [pc, #240]	; (800434c <MX_LWIP_Init+0x274>)
 800425a:	78d2      	ldrb	r2, [r2, #3]
 800425c:	4313      	orrs	r3, r2
 800425e:	061a      	lsls	r2, r3, #24
 8004260:	4b3a      	ldr	r3, [pc, #232]	; (800434c <MX_LWIP_Init+0x274>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	0619      	lsls	r1, r3, #24
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <MX_LWIP_Init+0x274>)
 8004268:	785b      	ldrb	r3, [r3, #1]
 800426a:	041b      	lsls	r3, r3, #16
 800426c:	4319      	orrs	r1, r3
 800426e:	4b37      	ldr	r3, [pc, #220]	; (800434c <MX_LWIP_Init+0x274>)
 8004270:	789b      	ldrb	r3, [r3, #2]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	430b      	orrs	r3, r1
 8004276:	4935      	ldr	r1, [pc, #212]	; (800434c <MX_LWIP_Init+0x274>)
 8004278:	78c9      	ldrb	r1, [r1, #3]
 800427a:	430b      	orrs	r3, r1
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004282:	431a      	orrs	r2, r3
 8004284:	4b31      	ldr	r3, [pc, #196]	; (800434c <MX_LWIP_Init+0x274>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	0619      	lsls	r1, r3, #24
 800428a:	4b30      	ldr	r3, [pc, #192]	; (800434c <MX_LWIP_Init+0x274>)
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	041b      	lsls	r3, r3, #16
 8004290:	4319      	orrs	r1, r3
 8004292:	4b2e      	ldr	r3, [pc, #184]	; (800434c <MX_LWIP_Init+0x274>)
 8004294:	789b      	ldrb	r3, [r3, #2]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	430b      	orrs	r3, r1
 800429a:	492c      	ldr	r1, [pc, #176]	; (800434c <MX_LWIP_Init+0x274>)
 800429c:	78c9      	ldrb	r1, [r1, #3]
 800429e:	430b      	orrs	r3, r1
 80042a0:	0a1b      	lsrs	r3, r3, #8
 80042a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80042a6:	431a      	orrs	r2, r3
 80042a8:	4b28      	ldr	r3, [pc, #160]	; (800434c <MX_LWIP_Init+0x274>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	0619      	lsls	r1, r3, #24
 80042ae:	4b27      	ldr	r3, [pc, #156]	; (800434c <MX_LWIP_Init+0x274>)
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	041b      	lsls	r3, r3, #16
 80042b4:	4319      	orrs	r1, r3
 80042b6:	4b25      	ldr	r3, [pc, #148]	; (800434c <MX_LWIP_Init+0x274>)
 80042b8:	789b      	ldrb	r3, [r3, #2]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	430b      	orrs	r3, r1
 80042be:	4923      	ldr	r1, [pc, #140]	; (800434c <MX_LWIP_Init+0x274>)
 80042c0:	78c9      	ldrb	r1, [r1, #3]
 80042c2:	430b      	orrs	r3, r1
 80042c4:	0e1b      	lsrs	r3, r3, #24
 80042c6:	4313      	orrs	r3, r2
 80042c8:	4a23      	ldr	r2, [pc, #140]	; (8004358 <MX_LWIP_Init+0x280>)
 80042ca:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80042cc:	4b23      	ldr	r3, [pc, #140]	; (800435c <MX_LWIP_Init+0x284>)
 80042ce:	9302      	str	r3, [sp, #8]
 80042d0:	4b23      	ldr	r3, [pc, #140]	; (8004360 <MX_LWIP_Init+0x288>)
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	2300      	movs	r3, #0
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <MX_LWIP_Init+0x280>)
 80042da:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <MX_LWIP_Init+0x27c>)
 80042dc:	491c      	ldr	r1, [pc, #112]	; (8004350 <MX_LWIP_Init+0x278>)
 80042de:	4821      	ldr	r0, [pc, #132]	; (8004364 <MX_LWIP_Init+0x28c>)
 80042e0:	f007 f974 	bl	800b5cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80042e4:	481f      	ldr	r0, [pc, #124]	; (8004364 <MX_LWIP_Init+0x28c>)
 80042e6:	f007 fa53 	bl	800b790 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80042ea:	481e      	ldr	r0, [pc, #120]	; (8004364 <MX_LWIP_Init+0x28c>)
 80042ec:	f007 fa5e 	bl	800b7ac <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80042f0:	491d      	ldr	r1, [pc, #116]	; (8004368 <MX_LWIP_Init+0x290>)
 80042f2:	481c      	ldr	r0, [pc, #112]	; (8004364 <MX_LWIP_Init+0x28c>)
 80042f4:	f007 fae9 	bl	800b8ca <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80042f8:	2200      	movs	r2, #0
 80042fa:	2101      	movs	r1, #1
 80042fc:	2001      	movs	r0, #1
 80042fe:	f000 ff1f 	bl	8005140 <osSemaphoreNew>
 8004302:	4603      	mov	r3, r0
 8004304:	4a19      	ldr	r2, [pc, #100]	; (800436c <MX_LWIP_Init+0x294>)
 8004306:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <MX_LWIP_Init+0x298>)
 800430a:	4a16      	ldr	r2, [pc, #88]	; (8004364 <MX_LWIP_Init+0x28c>)
 800430c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800430e:	4b17      	ldr	r3, [pc, #92]	; (800436c <MX_LWIP_Init+0x294>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a17      	ldr	r2, [pc, #92]	; (8004370 <MX_LWIP_Init+0x298>)
 8004314:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004316:	2224      	movs	r2, #36	; 0x24
 8004318:	2100      	movs	r1, #0
 800431a:	4816      	ldr	r0, [pc, #88]	; (8004374 <MX_LWIP_Init+0x29c>)
 800431c:	f010 fc01 	bl	8014b22 <memset>
  attributes.name = "LinkThr";
 8004320:	4b14      	ldr	r3, [pc, #80]	; (8004374 <MX_LWIP_Init+0x29c>)
 8004322:	4a15      	ldr	r2, [pc, #84]	; (8004378 <MX_LWIP_Init+0x2a0>)
 8004324:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004326:	4b13      	ldr	r3, [pc, #76]	; (8004374 <MX_LWIP_Init+0x29c>)
 8004328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800432c:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <MX_LWIP_Init+0x29c>)
 8004330:	2210      	movs	r2, #16
 8004332:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8004334:	4a0f      	ldr	r2, [pc, #60]	; (8004374 <MX_LWIP_Init+0x29c>)
 8004336:	490e      	ldr	r1, [pc, #56]	; (8004370 <MX_LWIP_Init+0x298>)
 8004338:	4810      	ldr	r0, [pc, #64]	; (800437c <MX_LWIP_Init+0x2a4>)
 800433a:	f000 fce1 	bl	8004d00 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800433e:	bf00      	nop
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200007b4 	.word	0x200007b4
 8004348:	200007b8 	.word	0x200007b8
 800434c:	200007bc 	.word	0x200007bc
 8004350:	200007a8 	.word	0x200007a8
 8004354:	200007ac 	.word	0x200007ac
 8004358:	200007b0 	.word	0x200007b0
 800435c:	0800ab59 	.word	0x0800ab59
 8004360:	080049f5 	.word	0x080049f5
 8004364:	20000774 	.word	0x20000774
 8004368:	08004ad9 	.word	0x08004ad9
 800436c:	20000768 	.word	0x20000768
 8004370:	2000076c 	.word	0x2000076c
 8004374:	200007c0 	.word	0x200007c0
 8004378:	080158b4 	.word	0x080158b4
 800437c:	08004a61 	.word	0x08004a61

08004380 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08e      	sub	sp, #56	; 0x38
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a5d      	ldr	r2, [pc, #372]	; (8004514 <HAL_ETH_MspInit+0x194>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f040 80b4 	bne.w	800450c <HAL_ETH_MspInit+0x18c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80043a4:	2300      	movs	r3, #0
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	4b5b      	ldr	r3, [pc, #364]	; (8004518 <HAL_ETH_MspInit+0x198>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	4a5a      	ldr	r2, [pc, #360]	; (8004518 <HAL_ETH_MspInit+0x198>)
 80043ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043b2:	6313      	str	r3, [r2, #48]	; 0x30
 80043b4:	4b58      	ldr	r3, [pc, #352]	; (8004518 <HAL_ETH_MspInit+0x198>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043bc:	623b      	str	r3, [r7, #32]
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	4b54      	ldr	r3, [pc, #336]	; (8004518 <HAL_ETH_MspInit+0x198>)
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	4a53      	ldr	r2, [pc, #332]	; (8004518 <HAL_ETH_MspInit+0x198>)
 80043ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043ce:	6313      	str	r3, [r2, #48]	; 0x30
 80043d0:	4b51      	ldr	r3, [pc, #324]	; (8004518 <HAL_ETH_MspInit+0x198>)
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	2300      	movs	r3, #0
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	4b4d      	ldr	r3, [pc, #308]	; (8004518 <HAL_ETH_MspInit+0x198>)
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	4a4c      	ldr	r2, [pc, #304]	; (8004518 <HAL_ETH_MspInit+0x198>)
 80043e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043ea:	6313      	str	r3, [r2, #48]	; 0x30
 80043ec:	4b4a      	ldr	r3, [pc, #296]	; (8004518 <HAL_ETH_MspInit+0x198>)
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	4b46      	ldr	r3, [pc, #280]	; (8004518 <HAL_ETH_MspInit+0x198>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	4a45      	ldr	r2, [pc, #276]	; (8004518 <HAL_ETH_MspInit+0x198>)
 8004402:	f043 0304 	orr.w	r3, r3, #4
 8004406:	6313      	str	r3, [r2, #48]	; 0x30
 8004408:	4b43      	ldr	r3, [pc, #268]	; (8004518 <HAL_ETH_MspInit+0x198>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	4b3f      	ldr	r3, [pc, #252]	; (8004518 <HAL_ETH_MspInit+0x198>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	4a3e      	ldr	r2, [pc, #248]	; (8004518 <HAL_ETH_MspInit+0x198>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6313      	str	r3, [r2, #48]	; 0x30
 8004424:	4b3c      	ldr	r3, [pc, #240]	; (8004518 <HAL_ETH_MspInit+0x198>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	4b38      	ldr	r3, [pc, #224]	; (8004518 <HAL_ETH_MspInit+0x198>)
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	4a37      	ldr	r2, [pc, #220]	; (8004518 <HAL_ETH_MspInit+0x198>)
 800443a:	f043 0302 	orr.w	r3, r3, #2
 800443e:	6313      	str	r3, [r2, #48]	; 0x30
 8004440:	4b35      	ldr	r3, [pc, #212]	; (8004518 <HAL_ETH_MspInit+0x198>)
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800444c:	2300      	movs	r3, #0
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	4b31      	ldr	r3, [pc, #196]	; (8004518 <HAL_ETH_MspInit+0x198>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	4a30      	ldr	r2, [pc, #192]	; (8004518 <HAL_ETH_MspInit+0x198>)
 8004456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800445a:	6313      	str	r3, [r2, #48]	; 0x30
 800445c:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <HAL_ETH_MspInit+0x198>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004468:	2332      	movs	r3, #50	; 0x32
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446c:	2302      	movs	r3, #2
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	2300      	movs	r3, #0
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004474:	2303      	movs	r3, #3
 8004476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004478:	230b      	movs	r3, #11
 800447a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800447c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004480:	4619      	mov	r1, r3
 8004482:	4826      	ldr	r0, [pc, #152]	; (800451c <HAL_ETH_MspInit+0x19c>)
 8004484:	f7fd ffc4 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004488:	2386      	movs	r3, #134	; 0x86
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448c:	2302      	movs	r3, #2
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004490:	2300      	movs	r3, #0
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004494:	2303      	movs	r3, #3
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004498:	230b      	movs	r3, #11
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800449c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044a0:	4619      	mov	r1, r3
 80044a2:	481f      	ldr	r0, [pc, #124]	; (8004520 <HAL_ETH_MspInit+0x1a0>)
 80044a4:	f7fd ffb4 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80044a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	2302      	movs	r3, #2
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b6:	2303      	movs	r3, #3
 80044b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044ba:	230b      	movs	r3, #11
 80044bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80044be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c2:	4619      	mov	r1, r3
 80044c4:	4817      	ldr	r0, [pc, #92]	; (8004524 <HAL_ETH_MspInit+0x1a4>)
 80044c6:	f7fd ffa3 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80044ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d0:	2302      	movs	r3, #2
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d8:	2303      	movs	r3, #3
 80044da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044dc:	230b      	movs	r3, #11
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044e4:	4619      	mov	r1, r3
 80044e6:	4810      	ldr	r0, [pc, #64]	; (8004528 <HAL_ETH_MspInit+0x1a8>)
 80044e8:	f7fd ff92 	bl	8002410 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80044ec:	2200      	movs	r2, #0
 80044ee:	2105      	movs	r1, #5
 80044f0:	203d      	movs	r0, #61	; 0x3d
 80044f2:	f7fc fdf0 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80044f6:	203d      	movs	r0, #61	; 0x3d
 80044f8:	f7fc fe09 	bl	800110e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80044fc:	2200      	movs	r2, #0
 80044fe:	2105      	movs	r1, #5
 8004500:	203e      	movs	r0, #62	; 0x3e
 8004502:	f7fc fde8 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8004506:	203e      	movs	r0, #62	; 0x3e
 8004508:	f7fc fe01 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800450c:	bf00      	nop
 800450e:	3738      	adds	r7, #56	; 0x38
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40028000 	.word	0x40028000
 8004518:	40023800 	.word	0x40023800
 800451c:	40020800 	.word	0x40020800
 8004520:	40020000 	.word	0x40020000
 8004524:	40020400 	.word	0x40020400
 8004528:	40021800 	.word	0x40021800

0800452c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004534:	4b04      	ldr	r3, [pc, #16]	; (8004548 <HAL_ETH_RxCpltCallback+0x1c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 ff03 	bl	8005344 <osSemaphoreRelease>
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20003884 	.word	0x20003884

0800454c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b090      	sub	sp, #64	; 0x40
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004558:	4b5d      	ldr	r3, [pc, #372]	; (80046d0 <low_level_init+0x184>)
 800455a:	4a5e      	ldr	r2, [pc, #376]	; (80046d4 <low_level_init+0x188>)
 800455c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800455e:	4b5c      	ldr	r3, [pc, #368]	; (80046d0 <low_level_init+0x184>)
 8004560:	2201      	movs	r2, #1
 8004562:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004564:	4b5a      	ldr	r3, [pc, #360]	; (80046d0 <low_level_init+0x184>)
 8004566:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800456a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800456c:	4b58      	ldr	r3, [pc, #352]	; (80046d0 <low_level_init+0x184>)
 800456e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004572:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004574:	4b56      	ldr	r3, [pc, #344]	; (80046d0 <low_level_init+0x184>)
 8004576:	2200      	movs	r2, #0
 8004578:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800457a:	2300      	movs	r3, #0
 800457c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800457e:	2380      	movs	r3, #128	; 0x80
 8004580:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8004582:	23e1      	movs	r3, #225	; 0xe1
 8004584:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8004586:	2300      	movs	r3, #0
 8004588:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800458a:	2300      	movs	r3, #0
 800458c:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800458e:	2300      	movs	r3, #0
 8004590:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004592:	4a4f      	ldr	r2, [pc, #316]	; (80046d0 <low_level_init+0x184>)
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800459a:	4b4d      	ldr	r3, [pc, #308]	; (80046d0 <low_level_init+0x184>)
 800459c:	2201      	movs	r2, #1
 800459e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80045a0:	4b4b      	ldr	r3, [pc, #300]	; (80046d0 <low_level_init+0x184>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80045a6:	4b4a      	ldr	r3, [pc, #296]	; (80046d0 <low_level_init+0x184>)
 80045a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045ac:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80045ae:	4848      	ldr	r0, [pc, #288]	; (80046d0 <low_level_init+0x184>)
 80045b0:	f7fc fdbc 	bl	800112c <HAL_ETH_Init>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80045ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d108      	bne.n	80045d4 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80045c8:	f043 0304 	orr.w	r3, r3, #4
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80045d4:	2304      	movs	r3, #4
 80045d6:	4a40      	ldr	r2, [pc, #256]	; (80046d8 <low_level_init+0x18c>)
 80045d8:	4940      	ldr	r1, [pc, #256]	; (80046dc <low_level_init+0x190>)
 80045da:	483d      	ldr	r0, [pc, #244]	; (80046d0 <low_level_init+0x184>)
 80045dc:	f7fc ff32 	bl	8001444 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80045e0:	2304      	movs	r3, #4
 80045e2:	4a3f      	ldr	r2, [pc, #252]	; (80046e0 <low_level_init+0x194>)
 80045e4:	493f      	ldr	r1, [pc, #252]	; (80046e4 <low_level_init+0x198>)
 80045e6:	483a      	ldr	r0, [pc, #232]	; (80046d0 <low_level_init+0x184>)
 80045e8:	f7fc ff93 	bl	8001512 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2206      	movs	r2, #6
 80045f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80045f4:	4b36      	ldr	r3, [pc, #216]	; (80046d0 <low_level_init+0x184>)
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	781a      	ldrb	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004600:	4b33      	ldr	r3, [pc, #204]	; (80046d0 <low_level_init+0x184>)
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	785a      	ldrb	r2, [r3, #1]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800460c:	4b30      	ldr	r3, [pc, #192]	; (80046d0 <low_level_init+0x184>)
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	789a      	ldrb	r2, [r3, #2]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004618:	4b2d      	ldr	r3, [pc, #180]	; (80046d0 <low_level_init+0x184>)
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	78da      	ldrb	r2, [r3, #3]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004624:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <low_level_init+0x184>)
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	791a      	ldrb	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <low_level_init+0x184>)
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	795a      	ldrb	r2, [r3, #5]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004642:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800464a:	f043 030a 	orr.w	r3, r3, #10
 800464e:	b2da      	uxtb	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8004656:	2200      	movs	r2, #0
 8004658:	2101      	movs	r1, #1
 800465a:	2001      	movs	r0, #1
 800465c:	f000 fd70 	bl	8005140 <osSemaphoreNew>
 8004660:	4603      	mov	r3, r0
 8004662:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <low_level_init+0x19c>)
 8004664:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004666:	f107 0314 	add.w	r3, r7, #20
 800466a:	2224      	movs	r2, #36	; 0x24
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f010 fa57 	bl	8014b22 <memset>
  attributes.name = "EthIf";
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <low_level_init+0x1a0>)
 8004676:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004678:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800467e:	2330      	movs	r3, #48	; 0x30
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004682:	f107 0314 	add.w	r3, r7, #20
 8004686:	461a      	mov	r2, r3
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4819      	ldr	r0, [pc, #100]	; (80046f0 <low_level_init+0x1a4>)
 800468c:	f000 fb38 	bl	8004d00 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004690:	480f      	ldr	r0, [pc, #60]	; (80046d0 <low_level_init+0x184>)
 8004692:	f7fd fa5c 	bl	8001b4e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800469a:	461a      	mov	r2, r3
 800469c:	211d      	movs	r1, #29
 800469e:	480c      	ldr	r0, [pc, #48]	; (80046d0 <low_level_init+0x184>)
 80046a0:	f7fd f987 	bl	80019b2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	f043 030b 	orr.w	r3, r3, #11
 80046aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	461a      	mov	r2, r3
 80046b0:	211d      	movs	r1, #29
 80046b2:	4807      	ldr	r0, [pc, #28]	; (80046d0 <low_level_init+0x184>)
 80046b4:	f7fd f9e5 	bl	8001a82 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80046b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046bc:	461a      	mov	r2, r3
 80046be:	211d      	movs	r1, #29
 80046c0:	4803      	ldr	r0, [pc, #12]	; (80046d0 <low_level_init+0x184>)
 80046c2:	f7fd f976 	bl	80019b2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80046c6:	bf00      	nop
 80046c8:	3740      	adds	r7, #64	; 0x40
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20003888 	.word	0x20003888
 80046d4:	40028000 	.word	0x40028000
 80046d8:	200020b4 	.word	0x200020b4
 80046dc:	20000864 	.word	0x20000864
 80046e0:	200008e4 	.word	0x200008e4
 80046e4:	200007e4 	.word	0x200007e4
 80046e8:	20003884 	.word	0x20003884
 80046ec:	080158bc 	.word	0x080158bc
 80046f0:	08004995 	.word	0x08004995

080046f4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	; 0x28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80046fe:	4b4b      	ldr	r3, [pc, #300]	; (800482c <low_level_output+0x138>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004716:	4b45      	ldr	r3, [pc, #276]	; (800482c <low_level_output+0x138>)
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	623b      	str	r3, [r7, #32]
 8004724:	e05a      	b.n	80047dc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	da03      	bge.n	8004736 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800472e:	23f8      	movs	r3, #248	; 0xf8
 8004730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004734:	e05c      	b.n	80047f0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	895b      	ldrh	r3, [r3, #10]
 800473a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004740:	e02f      	b.n	80047a2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	18d0      	adds	r0, r2, r3
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	18d1      	adds	r1, r2, r3
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004756:	3304      	adds	r3, #4
 8004758:	461a      	mov	r2, r3
 800475a:	f010 faae 	bl	8014cba <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	da03      	bge.n	8004774 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800476c:	23f8      	movs	r3, #248	; 0xf8
 800476e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004772:	e03d      	b.n	80047f0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004784:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004790:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800479c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d8c8      	bhi.n	8004742 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	18d0      	adds	r0, r2, r3
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4413      	add	r3, r2
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4619      	mov	r1, r3
 80047c2:	f010 fa7a 	bl	8014cba <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	623b      	str	r3, [r7, #32]
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1a1      	bne.n	8004726 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80047e2:	6979      	ldr	r1, [r7, #20]
 80047e4:	4811      	ldr	r0, [pc, #68]	; (800482c <low_level_output+0x138>)
 80047e6:	f7fc feff 	bl	80015e8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80047f0:	4b0e      	ldr	r3, [pc, #56]	; (800482c <low_level_output+0x138>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004802:	4b0a      	ldr	r3, [pc, #40]	; (800482c <low_level_output+0x138>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800480a:	461a      	mov	r2, r3
 800480c:	2320      	movs	r3, #32
 800480e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <low_level_output+0x138>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004818:	461a      	mov	r2, r3
 800481a:	2300      	movs	r3, #0
 800481c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800481e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004822:	4618      	mov	r0, r3
 8004824:	3728      	adds	r7, #40	; 0x28
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20003888 	.word	0x20003888

08004830 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08c      	sub	sp, #48	; 0x30
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004854:	484e      	ldr	r0, [pc, #312]	; (8004990 <low_level_input+0x160>)
 8004856:	f7fc ffaf 	bl	80017b8 <HAL_ETH_GetReceivedFrame_IT>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <low_level_input+0x34>

    return NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	e090      	b.n	8004986 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004864:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <low_level_input+0x160>)
 8004866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004868:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800486a:	4b49      	ldr	r3, [pc, #292]	; (8004990 <low_level_input+0x160>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004870:	89fb      	ldrh	r3, [r7, #14]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d006      	beq.n	8004884 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004876:	89fb      	ldrh	r3, [r7, #14]
 8004878:	2203      	movs	r2, #3
 800487a:	4619      	mov	r1, r3
 800487c:	2004      	movs	r0, #4
 800487e:	f007 f895 	bl	800b9ac <pbuf_alloc>
 8004882:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04b      	beq.n	8004922 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800488a:	4b41      	ldr	r3, [pc, #260]	; (8004990 <low_level_input+0x160>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
 8004898:	e040      	b.n	800491c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	895b      	ldrh	r3, [r3, #10]
 800489e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80048a4:	e021      	b.n	80048ea <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	18d0      	adds	r0, r2, r3
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	18d1      	adds	r1, r2, r3
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80048ba:	3304      	adds	r3, #4
 80048bc:	461a      	mov	r2, r3
 80048be:	f010 f9fc 	bl	8014cba <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	4413      	add	r3, r2
 80048d4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80048d8:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80048e4:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	4413      	add	r3, r2
 80048f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d8d6      	bhi.n	80048a6 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	18d0      	adds	r0, r2, r3
 8004900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4413      	add	r3, r2
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4619      	mov	r1, r3
 800490a:	f010 f9d6 	bl	8014cba <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4413      	add	r3, r2
 8004914:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1bb      	bne.n	800489a <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004922:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <low_level_input+0x160>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	e00b      	b.n	8004946 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	3301      	adds	r3, #1
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	4b12      	ldr	r3, [pc, #72]	; (8004990 <low_level_input+0x160>)
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	429a      	cmp	r2, r3
 800494e:	d3ee      	bcc.n	800492e <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <low_level_input+0x160>)
 8004952:	2200      	movs	r2, #0
 8004954:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004956:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <low_level_input+0x160>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00d      	beq.n	8004984 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <low_level_input+0x160>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004970:	461a      	mov	r2, r3
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <low_level_input+0x160>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497e:	461a      	mov	r2, r3
 8004980:	2300      	movs	r3, #0
 8004982:	6093      	str	r3, [r2, #8]
  }
  return p;
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004986:	4618      	mov	r0, r3
 8004988:	3730      	adds	r7, #48	; 0x30
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20003888 	.word	0x20003888

08004994 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80049a0:	4b12      	ldr	r3, [pc, #72]	; (80049ec <ethernetif_input+0x58>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f04f 31ff 	mov.w	r1, #4294967295
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fc65 	bl	8005278 <osSemaphoreAcquire>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f5      	bne.n	80049a0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80049b4:	480e      	ldr	r0, [pc, #56]	; (80049f0 <ethernetif_input+0x5c>)
 80049b6:	f00f ff33 	bl	8014820 <sys_mutex_lock>
        p = low_level_input( netif );
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff ff38 	bl	8004830 <low_level_input>
 80049c0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	68b8      	ldr	r0, [r7, #8]
 80049d0:	4798      	blx	r3
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80049d8:	68b8      	ldr	r0, [r7, #8]
 80049da:	f007 fb5f 	bl	800c09c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80049de:	4804      	ldr	r0, [pc, #16]	; (80049f0 <ethernetif_input+0x5c>)
 80049e0:	f00f ff2d 	bl	801483e <sys_mutex_unlock>
      } while(p!=NULL);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e4      	bne.n	80049b4 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80049ea:	e7d9      	b.n	80049a0 <ethernetif_input+0xc>
 80049ec:	20003884 	.word	0x20003884
 80049f0:	200082c0 	.word	0x200082c0

080049f4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <ethernetif_init+0x1c>
 8004a02:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <ethernetif_init+0x48>)
 8004a04:	f240 2241 	movw	r2, #577	; 0x241
 8004a08:	490d      	ldr	r1, [pc, #52]	; (8004a40 <ethernetif_init+0x4c>)
 8004a0a:	480e      	ldr	r0, [pc, #56]	; (8004a44 <ethernetif_init+0x50>)
 8004a0c:	f010 f824 	bl	8014a58 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2273      	movs	r2, #115	; 0x73
 8004a14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2274      	movs	r2, #116	; 0x74
 8004a1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <ethernetif_init+0x54>)
 8004a24:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <ethernetif_init+0x58>)
 8004a2a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fd8d 	bl	800454c <low_level_init>

  return ERR_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	080158c4 	.word	0x080158c4
 8004a40:	080158e0 	.word	0x080158e0
 8004a44:	080158f0 	.word	0x080158f0
 8004a48:	08012971 	.word	0x08012971
 8004a4c:	080046f5 	.word	0x080046f5

08004a50 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004a54:	f7fc fa5c 	bl	8000f10 <HAL_GetTick>
 8004a58:	4603      	mov	r3, r0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004a70:	f107 0308 	add.w	r3, r7, #8
 8004a74:	461a      	mov	r2, r3
 8004a76:	2101      	movs	r1, #1
 8004a78:	4816      	ldr	r0, [pc, #88]	; (8004ad4 <ethernetif_set_link+0x74>)
 8004a7a:	f7fc ff9a 	bl	80019b2 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d108      	bne.n	8004aa8 <ethernetif_set_link+0x48>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f006 fec7 	bl	800b834 <netif_set_link_up>
 8004aa6:	e011      	b.n	8004acc <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ab0:	089b      	lsrs	r3, r3, #2
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <ethernetif_set_link+0x6c>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d104      	bne.n	8004acc <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f006 fedf 	bl	800b88a <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004acc:	20c8      	movs	r0, #200	; 0xc8
 8004ace:	f000 f9c1 	bl	8004e54 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004ad2:	e7cd      	b.n	8004a70 <ethernetif_set_link+0x10>
 8004ad4:	20003888 	.word	0x20003888

08004ad8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d05d      	beq.n	8004bb6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004afa:	4b34      	ldr	r3, [pc, #208]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d03f      	beq.n	8004b82 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004b02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b06:	2100      	movs	r1, #0
 8004b08:	4830      	ldr	r0, [pc, #192]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004b0a:	f7fc ffba 	bl	8001a82 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004b0e:	f7fc f9ff 	bl	8000f10 <HAL_GetTick>
 8004b12:	4603      	mov	r3, r0
 8004b14:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004b16:	f107 0308 	add.w	r3, r7, #8
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	482b      	ldr	r0, [pc, #172]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004b20:	f7fc ff47 	bl	80019b2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004b24:	f7fc f9f4 	bl	8000f10 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b32:	d828      	bhi.n	8004b86 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0eb      	beq.n	8004b16 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004b3e:	f107 0308 	add.w	r3, r7, #8
 8004b42:	461a      	mov	r2, r3
 8004b44:	2110      	movs	r1, #16
 8004b46:	4821      	ldr	r0, [pc, #132]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004b48:	f7fc ff33 	bl	80019b2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004b56:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b5c:	60da      	str	r2, [r3, #12]
 8004b5e:	e002      	b.n	8004b66 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004b60:	4b1a      	ldr	r3, [pc, #104]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004b70:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
 8004b76:	e016      	b.n	8004ba6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004b78:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	e011      	b.n	8004ba6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004b82:	bf00      	nop
 8004b84:	e000      	b.n	8004b88 <ethernetif_update_config+0xb0>
          goto error;
 8004b86:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	08db      	lsrs	r3, r3, #3
 8004b8e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004b90:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	085b      	lsrs	r3, r3, #1
 8004b96:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	480a      	ldr	r0, [pc, #40]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004ba2:	f7fc ff6e 	bl	8001a82 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4808      	ldr	r0, [pc, #32]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004baa:	f7fd f82f 	bl	8001c0c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004bae:	4807      	ldr	r0, [pc, #28]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004bb0:	f7fc ffcd 	bl	8001b4e <HAL_ETH_Start>
 8004bb4:	e002      	b.n	8004bbc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004bb6:	4805      	ldr	r0, [pc, #20]	; (8004bcc <ethernetif_update_config+0xf4>)
 8004bb8:	f7fc fff8 	bl	8001bac <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f807 	bl	8004bd0 <ethernetif_notify_conn_changed>
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20003888 	.word	0x20003888

08004bd0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr
	...

08004be4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bea:	f3ef 8305 	mrs	r3, IPSR
 8004bee:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10f      	bne.n	8004c16 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfa:	607b      	str	r3, [r7, #4]
  return(result);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <osKernelInitialize+0x32>
 8004c02:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <osKernelInitialize+0x60>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d109      	bne.n	8004c1e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004c16:	f06f 0305 	mvn.w	r3, #5
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	e00c      	b.n	8004c38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <osKernelInitialize+0x60>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d105      	bne.n	8004c32 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <osKernelInitialize+0x60>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e002      	b.n	8004c38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295
 8004c36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c38:	68fb      	ldr	r3, [r7, #12]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr
 8004c44:	200038d0 	.word	0x200038d0

08004c48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c4e:	f3ef 8305 	mrs	r3, IPSR
 8004c52:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10f      	bne.n	8004c7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5e:	607b      	str	r3, [r7, #4]
  return(result);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <osKernelStart+0x32>
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <osKernelStart+0x64>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d109      	bne.n	8004c82 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c72:	603b      	str	r3, [r7, #0]
  return(result);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004c7a:	f06f 0305 	mvn.w	r3, #5
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e00e      	b.n	8004ca0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c82:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <osKernelStart+0x64>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d107      	bne.n	8004c9a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <osKernelStart+0x64>)
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004c90:	f002 f97c 	bl	8006f8c <vTaskStartScheduler>
      stat = osOK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e002      	b.n	8004ca0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	200038d0 	.word	0x200038d0

08004cb0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cb6:	f3ef 8305 	mrs	r3, IPSR
 8004cba:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10f      	bne.n	8004ce2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc6:	607b      	str	r3, [r7, #4]
  return(result);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <osKernelGetTickCount+0x32>
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <osKernelGetTickCount+0x4c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d109      	bne.n	8004cea <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cda:	603b      	str	r3, [r7, #0]
  return(result);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004ce2:	f002 fa7d 	bl	80071e0 <xTaskGetTickCountFromISR>
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	e002      	b.n	8004cf0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004cea:	f002 fa6b 	bl	80071c4 <xTaskGetTickCount>
 8004cee:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	200038d0 	.word	0x200038d0

08004d00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b092      	sub	sp, #72	; 0x48
 8004d04:	af04      	add	r7, sp, #16
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d10:	f3ef 8305 	mrs	r3, IPSR
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f040 8094 	bne.w	8004e46 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d22:	623b      	str	r3, [r7, #32]
  return(result);
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 808d 	bne.w	8004e46 <osThreadNew+0x146>
 8004d2c:	4b48      	ldr	r3, [pc, #288]	; (8004e50 <osThreadNew+0x150>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d106      	bne.n	8004d42 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d34:	f3ef 8311 	mrs	r3, BASEPRI
 8004d38:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f040 8082 	bne.w	8004e46 <osThreadNew+0x146>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d07e      	beq.n	8004e46 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004d4c:	2318      	movs	r3, #24
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004d50:	2300      	movs	r3, #0
 8004d52:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004d54:	f107 031b 	add.w	r3, r7, #27
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d045      	beq.n	8004df2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <osThreadNew+0x74>
        name = attr->name;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <osThreadNew+0x9a>
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	2b38      	cmp	r3, #56	; 0x38
 8004d8c:	d805      	bhi.n	8004d9a <osThreadNew+0x9a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <osThreadNew+0x9e>
        return (NULL);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e054      	b.n	8004e48 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	089b      	lsrs	r3, r3, #2
 8004dac:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00e      	beq.n	8004dd4 <osThreadNew+0xd4>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2ba7      	cmp	r3, #167	; 0xa7
 8004dbc:	d90a      	bls.n	8004dd4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d006      	beq.n	8004dd4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <osThreadNew+0xd4>
        mem = 1;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd2:	e010      	b.n	8004df6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10c      	bne.n	8004df6 <osThreadNew+0xf6>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d108      	bne.n	8004df6 <osThreadNew+0xf6>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <osThreadNew+0xf6>
          mem = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df0:	e001      	b.n	8004df6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d110      	bne.n	8004e1e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e04:	9202      	str	r2, [sp, #8]
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f001 fed6 	bl	8006bc4 <xTaskCreateStatic>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e013      	b.n	8004e46 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d110      	bne.n	8004e46 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	f107 0314 	add.w	r3, r7, #20
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f001 ff20 	bl	8006c7c <xTaskCreate>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d001      	beq.n	8004e46 <osThreadNew+0x146>
          hTask = NULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e46:	697b      	ldr	r3, [r7, #20]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3738      	adds	r7, #56	; 0x38
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200038d0 	.word	0x200038d0

08004e54 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e5c:	f3ef 8305 	mrs	r3, IPSR
 8004e60:	613b      	str	r3, [r7, #16]
  return(result);
 8004e62:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10f      	bne.n	8004e88 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e68:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d109      	bne.n	8004e88 <osDelay+0x34>
 8004e74:	4b0d      	ldr	r3, [pc, #52]	; (8004eac <osDelay+0x58>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d109      	bne.n	8004e90 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e80:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <osDelay+0x3c>
    stat = osErrorISR;
 8004e88:	f06f 0305 	mvn.w	r3, #5
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e007      	b.n	8004ea0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f002 f842 	bl	8006f24 <vTaskDelay>
    }
  }

  return (stat);
 8004ea0:	697b      	ldr	r3, [r7, #20]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	200038d0 	.word	0x200038d0

08004eb0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ebc:	f3ef 8305 	mrs	r3, IPSR
 8004ec0:	613b      	str	r3, [r7, #16]
  return(result);
 8004ec2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f040 8085 	bne.w	8004fd4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eca:	f3ef 8310 	mrs	r3, PRIMASK
 8004ece:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d17e      	bne.n	8004fd4 <osMutexNew+0x124>
 8004ed6:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <osMutexNew+0x130>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d105      	bne.n	8004eea <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ede:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d174      	bne.n	8004fd4 <osMutexNew+0x124>
    if (attr != NULL) {
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	623b      	str	r3, [r7, #32]
 8004ef6:	e001      	b.n	8004efc <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <osMutexNew+0x5c>
      rmtx = 1U;
 8004f06:	2301      	movs	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	e001      	b.n	8004f10 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d15c      	bne.n	8004fd4 <osMutexNew+0x124>
      mem = -1;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d015      	beq.n	8004f52 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d006      	beq.n	8004f3c <osMutexNew+0x8c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	2b4f      	cmp	r3, #79	; 0x4f
 8004f34:	d902      	bls.n	8004f3c <osMutexNew+0x8c>
          mem = 1;
 8004f36:	2301      	movs	r3, #1
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	e00c      	b.n	8004f56 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d108      	bne.n	8004f56 <osMutexNew+0xa6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <osMutexNew+0xa6>
            mem = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61bb      	str	r3, [r7, #24]
 8004f50:	e001      	b.n	8004f56 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d112      	bne.n	8004f82 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4619      	mov	r1, r3
 8004f68:	2004      	movs	r0, #4
 8004f6a:	f000 fea1 	bl	8005cb0 <xQueueCreateMutexStatic>
 8004f6e:	6278      	str	r0, [r7, #36]	; 0x24
 8004f70:	e016      	b.n	8004fa0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	4619      	mov	r1, r3
 8004f78:	2001      	movs	r0, #1
 8004f7a:	f000 fe99 	bl	8005cb0 <xQueueCreateMutexStatic>
 8004f7e:	6278      	str	r0, [r7, #36]	; 0x24
 8004f80:	e00e      	b.n	8004fa0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10b      	bne.n	8004fa0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004f8e:	2004      	movs	r0, #4
 8004f90:	f000 fe76 	bl	8005c80 <xQueueCreateMutex>
 8004f94:	6278      	str	r0, [r7, #36]	; 0x24
 8004f96:	e003      	b.n	8004fa0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004f98:	2001      	movs	r0, #1
 8004f9a:	f000 fe71 	bl	8005c80 <xQueueCreateMutex>
 8004f9e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00c      	beq.n	8004fc0 <osMutexNew+0x110>
        if (attr != NULL) {
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <osMutexNew+0x104>
          name = attr->name;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	e001      	b.n	8004fb8 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004fb8:	6979      	ldr	r1, [r7, #20]
 8004fba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fbc:	f001 fd7c 	bl	8006ab8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d006      	beq.n	8004fd4 <osMutexNew+0x124>
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3728      	adds	r7, #40	; 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	200038d0 	.word	0x200038d0

08004fe4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005002:	f3ef 8305 	mrs	r3, IPSR
 8005006:	613b      	str	r3, [r7, #16]
  return(result);
 8005008:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500e:	f3ef 8310 	mrs	r3, PRIMASK
 8005012:	60fb      	str	r3, [r7, #12]
  return(result);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <osMutexAcquire+0x4a>
 800501a:	4b20      	ldr	r3, [pc, #128]	; (800509c <osMutexAcquire+0xb8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d109      	bne.n	8005036 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005022:	f3ef 8311 	mrs	r3, BASEPRI
 8005026:	60bb      	str	r3, [r7, #8]
  return(result);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800502e:	f06f 0305 	mvn.w	r3, #5
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	e02c      	b.n	8005090 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d103      	bne.n	8005044 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800503c:	f06f 0303 	mvn.w	r3, #3
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	e025      	b.n	8005090 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d011      	beq.n	800506e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800504a:	6839      	ldr	r1, [r7, #0]
 800504c:	69b8      	ldr	r0, [r7, #24]
 800504e:	f000 fe7e 	bl	8005d4e <xQueueTakeMutexRecursive>
 8005052:	4603      	mov	r3, r0
 8005054:	2b01      	cmp	r3, #1
 8005056:	d01b      	beq.n	8005090 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800505e:	f06f 0301 	mvn.w	r3, #1
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	e014      	b.n	8005090 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005066:	f06f 0302 	mvn.w	r3, #2
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	e010      	b.n	8005090 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	69b8      	ldr	r0, [r7, #24]
 8005072:	f001 fa11 	bl	8006498 <xQueueSemaphoreTake>
 8005076:	4603      	mov	r3, r0
 8005078:	2b01      	cmp	r3, #1
 800507a:	d009      	beq.n	8005090 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8005082:	f06f 0301 	mvn.w	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	e002      	b.n	8005090 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800508a:	f06f 0302 	mvn.w	r3, #2
 800508e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005090:	69fb      	ldr	r3, [r7, #28]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	200038d0 	.word	0x200038d0

080050a0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050bc:	f3ef 8305 	mrs	r3, IPSR
 80050c0:	613b      	str	r3, [r7, #16]
  return(result);
 80050c2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10f      	bne.n	80050e8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c8:	f3ef 8310 	mrs	r3, PRIMASK
 80050cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <osMutexRelease+0x48>
 80050d4:	4b19      	ldr	r3, [pc, #100]	; (800513c <osMutexRelease+0x9c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d109      	bne.n	80050f0 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050dc:	f3ef 8311 	mrs	r3, BASEPRI
 80050e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <osMutexRelease+0x50>
    stat = osErrorISR;
 80050e8:	f06f 0305 	mvn.w	r3, #5
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	e01f      	b.n	8005130 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80050f6:	f06f 0303 	mvn.w	r3, #3
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	e018      	b.n	8005130 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005104:	69b8      	ldr	r0, [r7, #24]
 8005106:	f000 fdee 	bl	8005ce6 <xQueueGiveMutexRecursive>
 800510a:	4603      	mov	r3, r0
 800510c:	2b01      	cmp	r3, #1
 800510e:	d00f      	beq.n	8005130 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005110:	f06f 0302 	mvn.w	r3, #2
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	e00b      	b.n	8005130 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005118:	2300      	movs	r3, #0
 800511a:	2200      	movs	r2, #0
 800511c:	2100      	movs	r1, #0
 800511e:	69b8      	ldr	r0, [r7, #24]
 8005120:	f000 feb6 	bl	8005e90 <xQueueGenericSend>
 8005124:	4603      	mov	r3, r0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d002      	beq.n	8005130 <osMutexRelease+0x90>
        stat = osErrorResource;
 800512a:	f06f 0302 	mvn.w	r3, #2
 800512e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005130:	69fb      	ldr	r3, [r7, #28]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	200038d0 	.word	0x200038d0

08005140 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b08c      	sub	sp, #48	; 0x30
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005150:	f3ef 8305 	mrs	r3, IPSR
 8005154:	61bb      	str	r3, [r7, #24]
  return(result);
 8005156:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005158:	2b00      	cmp	r3, #0
 800515a:	f040 8086 	bne.w	800526a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515e:	f3ef 8310 	mrs	r3, PRIMASK
 8005162:	617b      	str	r3, [r7, #20]
  return(result);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d17f      	bne.n	800526a <osSemaphoreNew+0x12a>
 800516a:	4b42      	ldr	r3, [pc, #264]	; (8005274 <osSemaphoreNew+0x134>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d105      	bne.n	800517e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005172:	f3ef 8311 	mrs	r3, BASEPRI
 8005176:	613b      	str	r3, [r7, #16]
  return(result);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d175      	bne.n	800526a <osSemaphoreNew+0x12a>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d072      	beq.n	800526a <osSemaphoreNew+0x12a>
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	429a      	cmp	r2, r3
 800518a:	d86e      	bhi.n	800526a <osSemaphoreNew+0x12a>
    mem = -1;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
 8005190:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d015      	beq.n	80051c4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d006      	beq.n	80051ae <osSemaphoreNew+0x6e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	2b4f      	cmp	r3, #79	; 0x4f
 80051a6:	d902      	bls.n	80051ae <osSemaphoreNew+0x6e>
        mem = 1;
 80051a8:	2301      	movs	r3, #1
 80051aa:	623b      	str	r3, [r7, #32]
 80051ac:	e00c      	b.n	80051c8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d108      	bne.n	80051c8 <osSemaphoreNew+0x88>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d104      	bne.n	80051c8 <osSemaphoreNew+0x88>
          mem = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	623b      	str	r3, [r7, #32]
 80051c2:	e001      	b.n	80051c8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ce:	d04c      	beq.n	800526a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d128      	bne.n	8005228 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d10a      	bne.n	80051f2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2203      	movs	r2, #3
 80051e2:	9200      	str	r2, [sp, #0]
 80051e4:	2200      	movs	r2, #0
 80051e6:	2100      	movs	r1, #0
 80051e8:	2001      	movs	r0, #1
 80051ea:	f000 fc57 	bl	8005a9c <xQueueGenericCreateStatic>
 80051ee:	6278      	str	r0, [r7, #36]	; 0x24
 80051f0:	e005      	b.n	80051fe <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80051f2:	2203      	movs	r2, #3
 80051f4:	2100      	movs	r1, #0
 80051f6:	2001      	movs	r0, #1
 80051f8:	f000 fcc7 	bl	8005b8a <xQueueGenericCreate>
 80051fc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	d022      	beq.n	800524a <osSemaphoreNew+0x10a>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01f      	beq.n	800524a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800520a:	2300      	movs	r3, #0
 800520c:	2200      	movs	r2, #0
 800520e:	2100      	movs	r1, #0
 8005210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005212:	f000 fe3d 	bl	8005e90 <xQueueGenericSend>
 8005216:	4603      	mov	r3, r0
 8005218:	2b01      	cmp	r3, #1
 800521a:	d016      	beq.n	800524a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800521c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800521e:	f001 fb00 	bl	8006822 <vQueueDelete>
            hSemaphore = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	e010      	b.n	800524a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d108      	bne.n	8005240 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	461a      	mov	r2, r3
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fdbf 	bl	8005dba <xQueueCreateCountingSemaphoreStatic>
 800523c:	6278      	str	r0, [r7, #36]	; 0x24
 800523e:	e004      	b.n	800524a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fdf0 	bl	8005e28 <xQueueCreateCountingSemaphore>
 8005248:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <osSemaphoreNew+0x11e>
          name = attr->name;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	e001      	b.n	8005262 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005262:	69f9      	ldr	r1, [r7, #28]
 8005264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005266:	f001 fc27 	bl	8006ab8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800526c:	4618      	mov	r0, r3
 800526e:	3728      	adds	r7, #40	; 0x28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	200038d0 	.word	0x200038d0

08005278 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d103      	bne.n	8005298 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005290:	f06f 0303 	mvn.w	r3, #3
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	e04b      	b.n	8005330 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005298:	f3ef 8305 	mrs	r3, IPSR
 800529c:	617b      	str	r3, [r7, #20]
  return(result);
 800529e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10f      	bne.n	80052c4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a4:	f3ef 8310 	mrs	r3, PRIMASK
 80052a8:	613b      	str	r3, [r7, #16]
  return(result);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d109      	bne.n	80052c4 <osSemaphoreAcquire+0x4c>
 80052b0:	4b22      	ldr	r3, [pc, #136]	; (800533c <osSemaphoreAcquire+0xc4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d128      	bne.n	800530a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052b8:	f3ef 8311 	mrs	r3, BASEPRI
 80052bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d022      	beq.n	800530a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80052ca:	f06f 0303 	mvn.w	r3, #3
 80052ce:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80052d0:	e02d      	b.n	800532e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80052d6:	f107 0308 	add.w	r3, r7, #8
 80052da:	461a      	mov	r2, r3
 80052dc:	2100      	movs	r1, #0
 80052de:	69b8      	ldr	r0, [r7, #24]
 80052e0:	f001 f9e6 	bl	80066b0 <xQueueReceiveFromISR>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d003      	beq.n	80052f2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80052ea:	f06f 0302 	mvn.w	r3, #2
 80052ee:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80052f0:	e01d      	b.n	800532e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01a      	beq.n	800532e <osSemaphoreAcquire+0xb6>
 80052f8:	4b11      	ldr	r3, [pc, #68]	; (8005340 <osSemaphoreAcquire+0xc8>)
 80052fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005308:	e011      	b.n	800532e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800530a:	6839      	ldr	r1, [r7, #0]
 800530c:	69b8      	ldr	r0, [r7, #24]
 800530e:	f001 f8c3 	bl	8006498 <xQueueSemaphoreTake>
 8005312:	4603      	mov	r3, r0
 8005314:	2b01      	cmp	r3, #1
 8005316:	d00b      	beq.n	8005330 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800531e:	f06f 0301 	mvn.w	r3, #1
 8005322:	61fb      	str	r3, [r7, #28]
 8005324:	e004      	b.n	8005330 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005326:	f06f 0302 	mvn.w	r3, #2
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	e000      	b.n	8005330 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800532e:	bf00      	nop
      }
    }
  }

  return (stat);
 8005330:	69fb      	ldr	r3, [r7, #28]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	200038d0 	.word	0x200038d0
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005350:	2300      	movs	r3, #0
 8005352:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800535a:	f06f 0303 	mvn.w	r3, #3
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	e03e      	b.n	80053e0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005362:	f3ef 8305 	mrs	r3, IPSR
 8005366:	617b      	str	r3, [r7, #20]
  return(result);
 8005368:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10f      	bne.n	800538e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536e:	f3ef 8310 	mrs	r3, PRIMASK
 8005372:	613b      	str	r3, [r7, #16]
  return(result);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d109      	bne.n	800538e <osSemaphoreRelease+0x4a>
 800537a:	4b1c      	ldr	r3, [pc, #112]	; (80053ec <osSemaphoreRelease+0xa8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d120      	bne.n	80053c4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005382:	f3ef 8311 	mrs	r3, BASEPRI
 8005386:	60fb      	str	r3, [r7, #12]
  return(result);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01a      	beq.n	80053c4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800538e:	2300      	movs	r3, #0
 8005390:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005392:	f107 0308 	add.w	r3, r7, #8
 8005396:	4619      	mov	r1, r3
 8005398:	69b8      	ldr	r0, [r7, #24]
 800539a:	f000 ff0f 	bl	80061bc <xQueueGiveFromISR>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d003      	beq.n	80053ac <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80053a4:	f06f 0302 	mvn.w	r3, #2
 80053a8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80053aa:	e018      	b.n	80053de <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d015      	beq.n	80053de <osSemaphoreRelease+0x9a>
 80053b2:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <osSemaphoreRelease+0xac>)
 80053b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80053c2:	e00c      	b.n	80053de <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80053c4:	2300      	movs	r3, #0
 80053c6:	2200      	movs	r2, #0
 80053c8:	2100      	movs	r1, #0
 80053ca:	69b8      	ldr	r0, [r7, #24]
 80053cc:	f000 fd60 	bl	8005e90 <xQueueGenericSend>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d004      	beq.n	80053e0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80053d6:	f06f 0302 	mvn.w	r3, #2
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	e000      	b.n	80053e0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80053de:	bf00      	nop
    }
  }

  return (stat);
 80053e0:	69fb      	ldr	r3, [r7, #28]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3720      	adds	r7, #32
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200038d0 	.word	0x200038d0
 80053f0:	e000ed04 	.word	0xe000ed04

080053f4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005400:	f3ef 8305 	mrs	r3, IPSR
 8005404:	617b      	str	r3, [r7, #20]
  return(result);
 8005406:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10f      	bne.n	800542c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800540c:	f3ef 8310 	mrs	r3, PRIMASK
 8005410:	613b      	str	r3, [r7, #16]
  return(result);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <osSemaphoreDelete+0x38>
 8005418:	4b10      	ldr	r3, [pc, #64]	; (800545c <osSemaphoreDelete+0x68>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d109      	bne.n	8005434 <osSemaphoreDelete+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005420:	f3ef 8311 	mrs	r3, BASEPRI
 8005424:	60fb      	str	r3, [r7, #12]
  return(result);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800542c:	f06f 0305 	mvn.w	r3, #5
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	e00e      	b.n	8005452 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d103      	bne.n	8005442 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800543a:	f06f 0303 	mvn.w	r3, #3
 800543e:	61fb      	str	r3, [r7, #28]
 8005440:	e007      	b.n	8005452 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005442:	69b8      	ldr	r0, [r7, #24]
 8005444:	f001 fb60 	bl	8006b08 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800544c:	69b8      	ldr	r0, [r7, #24]
 800544e:	f001 f9e8 	bl	8006822 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005452:	69fb      	ldr	r3, [r7, #28]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	200038d0 	.word	0x200038d0

08005460 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b08c      	sub	sp, #48	; 0x30
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005470:	f3ef 8305 	mrs	r3, IPSR
 8005474:	61bb      	str	r3, [r7, #24]
  return(result);
 8005476:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005478:	2b00      	cmp	r3, #0
 800547a:	d16f      	bne.n	800555c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800547c:	f3ef 8310 	mrs	r3, PRIMASK
 8005480:	617b      	str	r3, [r7, #20]
  return(result);
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d169      	bne.n	800555c <osMessageQueueNew+0xfc>
 8005488:	4b37      	ldr	r3, [pc, #220]	; (8005568 <osMessageQueueNew+0x108>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b02      	cmp	r3, #2
 800548e:	d105      	bne.n	800549c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005490:	f3ef 8311 	mrs	r3, BASEPRI
 8005494:	613b      	str	r3, [r7, #16]
  return(result);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d15f      	bne.n	800555c <osMessageQueueNew+0xfc>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d05c      	beq.n	800555c <osMessageQueueNew+0xfc>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d059      	beq.n	800555c <osMessageQueueNew+0xfc>
    mem = -1;
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d029      	beq.n	8005508 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d012      	beq.n	80054e2 <osMessageQueueNew+0x82>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b4f      	cmp	r3, #79	; 0x4f
 80054c2:	d90e      	bls.n	80054e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695a      	ldr	r2, [r3, #20]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	429a      	cmp	r2, r3
 80054da:	d302      	bcc.n	80054e2 <osMessageQueueNew+0x82>
        mem = 1;
 80054dc:	2301      	movs	r3, #1
 80054de:	623b      	str	r3, [r7, #32]
 80054e0:	e014      	b.n	800550c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d110      	bne.n	800550c <osMessageQueueNew+0xac>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10c      	bne.n	800550c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d108      	bne.n	800550c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d104      	bne.n	800550c <osMessageQueueNew+0xac>
          mem = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	623b      	str	r3, [r7, #32]
 8005506:	e001      	b.n	800550c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d10b      	bne.n	800552a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2100      	movs	r1, #0
 800551c:	9100      	str	r1, [sp, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 fabb 	bl	8005a9c <xQueueGenericCreateStatic>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24
 8005528:	e008      	b.n	800553c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d105      	bne.n	800553c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005530:	2200      	movs	r2, #0
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 fb28 	bl	8005b8a <xQueueGenericCreate>
 800553a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00c      	beq.n	800555c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	e001      	b.n	8005554 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005554:	69f9      	ldr	r1, [r7, #28]
 8005556:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005558:	f001 faae 	bl	8006ab8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800555e:	4618      	mov	r0, r3
 8005560:	3728      	adds	r7, #40	; 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200038d0 	.word	0x200038d0

0800556c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005580:	2300      	movs	r3, #0
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005584:	f3ef 8305 	mrs	r3, IPSR
 8005588:	61fb      	str	r3, [r7, #28]
  return(result);
 800558a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10f      	bne.n	80055b0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005590:	f3ef 8310 	mrs	r3, PRIMASK
 8005594:	61bb      	str	r3, [r7, #24]
  return(result);
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d109      	bne.n	80055b0 <osMessageQueuePut+0x44>
 800559c:	4b2b      	ldr	r3, [pc, #172]	; (800564c <osMessageQueuePut+0xe0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d12e      	bne.n	8005602 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055a4:	f3ef 8311 	mrs	r3, BASEPRI
 80055a8:	617b      	str	r3, [r7, #20]
  return(result);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d028      	beq.n	8005602 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <osMessageQueuePut+0x56>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <osMessageQueuePut+0x56>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80055c2:	f06f 0303 	mvn.w	r3, #3
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055c8:	e039      	b.n	800563e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80055ce:	f107 0210 	add.w	r2, r7, #16
 80055d2:	2300      	movs	r3, #0
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	6a38      	ldr	r0, [r7, #32]
 80055d8:	f000 fd58 	bl	800608c <xQueueGenericSendFromISR>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d003      	beq.n	80055ea <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80055e2:	f06f 0302 	mvn.w	r3, #2
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055e8:	e029      	b.n	800563e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d026      	beq.n	800563e <osMessageQueuePut+0xd2>
 80055f0:	4b17      	ldr	r3, [pc, #92]	; (8005650 <osMessageQueuePut+0xe4>)
 80055f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005600:	e01d      	b.n	800563e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <osMessageQueuePut+0xa2>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800560e:	f06f 0303 	mvn.w	r3, #3
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
 8005614:	e014      	b.n	8005640 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005616:	2300      	movs	r3, #0
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	6a38      	ldr	r0, [r7, #32]
 800561e:	f000 fc37 	bl	8005e90 <xQueueGenericSend>
 8005622:	4603      	mov	r3, r0
 8005624:	2b01      	cmp	r3, #1
 8005626:	d00b      	beq.n	8005640 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800562e:	f06f 0301 	mvn.w	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
 8005634:	e004      	b.n	8005640 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005636:	f06f 0302 	mvn.w	r3, #2
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
 800563c:	e000      	b.n	8005640 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800563e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005642:	4618      	mov	r0, r3
 8005644:	3728      	adds	r7, #40	; 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	200038d0 	.word	0x200038d0
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	; 0x28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005666:	2300      	movs	r3, #0
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800566a:	f3ef 8305 	mrs	r3, IPSR
 800566e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005670:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10f      	bne.n	8005696 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005676:	f3ef 8310 	mrs	r3, PRIMASK
 800567a:	61bb      	str	r3, [r7, #24]
  return(result);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <osMessageQueueGet+0x42>
 8005682:	4b2b      	ldr	r3, [pc, #172]	; (8005730 <osMessageQueueGet+0xdc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d12e      	bne.n	80056e8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800568a:	f3ef 8311 	mrs	r3, BASEPRI
 800568e:	617b      	str	r3, [r7, #20]
  return(result);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d028      	beq.n	80056e8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <osMessageQueueGet+0x54>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <osMessageQueueGet+0x54>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80056a8:	f06f 0303 	mvn.w	r3, #3
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056ae:	e038      	b.n	8005722 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80056b4:	f107 0310 	add.w	r3, r7, #16
 80056b8:	461a      	mov	r2, r3
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	6a38      	ldr	r0, [r7, #32]
 80056be:	f000 fff7 	bl	80066b0 <xQueueReceiveFromISR>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d003      	beq.n	80056d0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80056c8:	f06f 0302 	mvn.w	r3, #2
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056ce:	e028      	b.n	8005722 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d025      	beq.n	8005722 <osMessageQueueGet+0xce>
 80056d6:	4b17      	ldr	r3, [pc, #92]	; (8005734 <osMessageQueueGet+0xe0>)
 80056d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056e6:	e01c      	b.n	8005722 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <osMessageQueueGet+0xa0>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80056f4:	f06f 0303 	mvn.w	r3, #3
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
 80056fa:	e013      	b.n	8005724 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	6a38      	ldr	r0, [r7, #32]
 8005702:	f000 fde9 	bl	80062d8 <xQueueReceive>
 8005706:	4603      	mov	r3, r0
 8005708:	2b01      	cmp	r3, #1
 800570a:	d00b      	beq.n	8005724 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005712:	f06f 0301 	mvn.w	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
 8005718:	e004      	b.n	8005724 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800571a:	f06f 0302 	mvn.w	r3, #2
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
 8005720:	e000      	b.n	8005724 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005722:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005726:	4618      	mov	r0, r3
 8005728:	3728      	adds	r7, #40	; 0x28
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200038d0 	.word	0x200038d0
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <osMessageQueueGetCount+0x18>
    count = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
 800574e:	e01e      	b.n	800578e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005750:	f3ef 8305 	mrs	r3, IPSR
 8005754:	617b      	str	r3, [r7, #20]
  return(result);
 8005756:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10f      	bne.n	800577c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575c:	f3ef 8310 	mrs	r3, PRIMASK
 8005760:	613b      	str	r3, [r7, #16]
  return(result);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d109      	bne.n	800577c <osMessageQueueGetCount+0x44>
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <osMessageQueueGetCount+0x60>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d10a      	bne.n	8005786 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005770:	f3ef 8311 	mrs	r3, BASEPRI
 8005774:	60fb      	str	r3, [r7, #12]
  return(result);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800577c:	69b8      	ldr	r0, [r7, #24]
 800577e:	f001 f835 	bl	80067ec <uxQueueMessagesWaitingFromISR>
 8005782:	61f8      	str	r0, [r7, #28]
 8005784:	e003      	b.n	800578e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005786:	69b8      	ldr	r0, [r7, #24]
 8005788:	f001 f812 	bl	80067b0 <uxQueueMessagesWaiting>
 800578c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800578e:	69fb      	ldr	r3, [r7, #28]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	200038d0 	.word	0x200038d0

0800579c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057a8:	f3ef 8305 	mrs	r3, IPSR
 80057ac:	617b      	str	r3, [r7, #20]
  return(result);
 80057ae:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10f      	bne.n	80057d4 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b4:	f3ef 8310 	mrs	r3, PRIMASK
 80057b8:	613b      	str	r3, [r7, #16]
  return(result);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <osMessageQueueDelete+0x38>
 80057c0:	4b10      	ldr	r3, [pc, #64]	; (8005804 <osMessageQueueDelete+0x68>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d109      	bne.n	80057dc <osMessageQueueDelete+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057c8:	f3ef 8311 	mrs	r3, BASEPRI
 80057cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 80057d4:	f06f 0305 	mvn.w	r3, #5
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e00e      	b.n	80057fa <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 80057e2:	f06f 0303 	mvn.w	r3, #3
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	e007      	b.n	80057fa <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80057ea:	69b8      	ldr	r0, [r7, #24]
 80057ec:	f001 f98c 	bl	8006b08 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 80057f4:	69b8      	ldr	r0, [r7, #24]
 80057f6:	f001 f814 	bl	8006822 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80057fa:	69fb      	ldr	r3, [r7, #28]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3720      	adds	r7, #32
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	200038d0 	.word	0x200038d0

08005808 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a06      	ldr	r2, [pc, #24]	; (8005830 <vApplicationGetIdleTaskMemory+0x28>)
 8005818:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4a05      	ldr	r2, [pc, #20]	; (8005834 <vApplicationGetIdleTaskMemory+0x2c>)
 800581e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2280      	movs	r2, #128	; 0x80
 8005824:	601a      	str	r2, [r3, #0]
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr
 8005830:	200038d4 	.word	0x200038d4
 8005834:	2000397c 	.word	0x2000397c

08005838 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4a07      	ldr	r2, [pc, #28]	; (8005864 <vApplicationGetTimerTaskMemory+0x2c>)
 8005848:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4a06      	ldr	r2, [pc, #24]	; (8005868 <vApplicationGetTimerTaskMemory+0x30>)
 800584e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005856:	601a      	str	r2, [r3, #0]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20003b7c 	.word	0x20003b7c
 8005868:	20003c24 	.word	0x20003c24

0800586c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f103 0208 	add.w	r2, r3, #8
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f04f 32ff 	mov.w	r2, #4294967295
 8005884:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f103 0208 	add.w	r2, r3, #8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f103 0208 	add.w	r2, r3, #8
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr

080058aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr

080058c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591e:	d103      	bne.n	8005928 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	e00c      	b.n	8005942 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3308      	adds	r3, #8
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	e002      	b.n	8005936 <vListInsert+0x2e>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	429a      	cmp	r2, r3
 8005940:	d2f6      	bcs.n	8005930 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	601a      	str	r2, [r3, #0]
}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6892      	ldr	r2, [r2, #8]
 800598e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6852      	ldr	r2, [r2, #4]
 8005998:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d103      	bne.n	80059ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	1e5a      	subs	r2, r3, #1
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr
	...

080059cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059f6:	f002 fd39 	bl	800846c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a06:	fb01 f303 	mul.w	r3, r1, r3
 8005a0a:	441a      	add	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a26:	3b01      	subs	r3, #1
 8005a28:	68f9      	ldr	r1, [r7, #12]
 8005a2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	441a      	add	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	22ff      	movs	r2, #255	; 0xff
 8005a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	22ff      	movs	r2, #255	; 0xff
 8005a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d114      	bne.n	8005a76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01a      	beq.n	8005a8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3310      	adds	r3, #16
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 fd45 	bl	80074e8 <xTaskRemoveFromEventList>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d012      	beq.n	8005a8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <xQueueGenericReset+0xcc>)
 8005a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	e009      	b.n	8005a8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3310      	adds	r3, #16
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fef6 	bl	800586c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3324      	adds	r3, #36	; 0x24
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff fef1 	bl	800586c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a8a:	f002 fd1f 	bl	80084cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a8e:	2301      	movs	r3, #1
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08e      	sub	sp, #56	; 0x38
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <xQueueGenericCreateStatic+0x52>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <xQueueGenericCreateStatic+0x56>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <xQueueGenericCreateStatic+0x58>
 8005af2:	2300      	movs	r3, #0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	623b      	str	r3, [r7, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	e7fe      	b.n	8005b0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <xQueueGenericCreateStatic+0x7e>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <xQueueGenericCreateStatic+0x82>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <xQueueGenericCreateStatic+0x84>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	61fb      	str	r3, [r7, #28]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b3a:	2350      	movs	r3, #80	; 0x50
 8005b3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b50      	cmp	r3, #80	; 0x50
 8005b42:	d00a      	beq.n	8005b5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	61bb      	str	r3, [r7, #24]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f843 	bl	8005c06 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3730      	adds	r7, #48	; 0x30
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b08a      	sub	sp, #40	; 0x28
 8005b8e:	af02      	add	r7, sp, #8
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	4613      	mov	r3, r2
 8005b96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	613b      	str	r3, [r7, #16]
}
 8005bb0:	bf00      	nop
 8005bb2:	e7fe      	b.n	8005bb2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	e004      	b.n	8005bca <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	fb02 f303 	mul.w	r3, r2, r3
 8005bc8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	3350      	adds	r3, #80	; 0x50
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f002 fd4c 	bl	800866c <pvPortMalloc>
 8005bd4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00f      	beq.n	8005bfc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	3350      	adds	r3, #80	; 0x50
 8005be0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bea:	79fa      	ldrb	r2, [r7, #7]
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f805 	bl	8005c06 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005bfc:	69bb      	ldr	r3, [r7, #24]
	}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3720      	adds	r7, #32
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e002      	b.n	8005c28 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c34:	2101      	movs	r1, #1
 8005c36:	69b8      	ldr	r0, [r7, #24]
 8005c38:	f7ff fec8 	bl	80059cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00e      	beq.n	8005c78 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2100      	movs	r1, #0
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f90c 	bl	8005e90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	461a      	mov	r2, r3
 8005c96:	6939      	ldr	r1, [r7, #16]
 8005c98:	6978      	ldr	r0, [r7, #20]
 8005c9a:	f7ff ff76 	bl	8005b8a <xQueueGenericCreate>
 8005c9e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f7ff ffd3 	bl	8005c4c <prvInitialiseMutex>

		return pxNewQueue;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
	}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	6039      	str	r1, [r7, #0]
 8005cba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	6939      	ldr	r1, [r7, #16]
 8005cce:	6978      	ldr	r0, [r7, #20]
 8005cd0:	f7ff fee4 	bl	8005a9c <xQueueGenericCreateStatic>
 8005cd4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f7ff ffb8 	bl	8005c4c <prvInitialiseMutex>

		return pxNewQueue;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
	}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005ce6:	b590      	push	{r4, r7, lr}
 8005ce8:	b087      	sub	sp, #28
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	60fb      	str	r3, [r7, #12]
}
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	685c      	ldr	r4, [r3, #4]
 8005d12:	f001 fdaf 	bl	8007874 <xTaskGetCurrentTaskHandle>
 8005d16:	4603      	mov	r3, r0
 8005d18:	429c      	cmp	r4, r3
 8005d1a:	d111      	bne.n	8005d40 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	1e5a      	subs	r2, r3, #1
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d105      	bne.n	8005d3a <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2200      	movs	r2, #0
 8005d32:	2100      	movs	r1, #0
 8005d34:	6938      	ldr	r0, [r7, #16]
 8005d36:	f000 f8ab 	bl	8005e90 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	e001      	b.n	8005d44 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005d44:	697b      	ldr	r3, [r7, #20]
	}
 8005d46:	4618      	mov	r0, r3
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd90      	pop	{r4, r7, pc}

08005d4e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005d4e:	b590      	push	{r4, r7, lr}
 8005d50:	b087      	sub	sp, #28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	60fb      	str	r3, [r7, #12]
}
 8005d74:	bf00      	nop
 8005d76:	e7fe      	b.n	8005d76 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685c      	ldr	r4, [r3, #4]
 8005d7c:	f001 fd7a 	bl	8007874 <xTaskGetCurrentTaskHandle>
 8005d80:	4603      	mov	r3, r0
 8005d82:	429c      	cmp	r4, r3
 8005d84:	d107      	bne.n	8005d96 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005d90:	2301      	movs	r3, #1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e00c      	b.n	8005db0 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6938      	ldr	r0, [r7, #16]
 8005d9a:	f000 fb7d 	bl	8006498 <xQueueSemaphoreTake>
 8005d9e:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d004      	beq.n	8005db0 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005db0:	697b      	ldr	r3, [r7, #20]
	}
 8005db2:	4618      	mov	r0, r3
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd90      	pop	{r4, r7, pc}

08005dba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b08a      	sub	sp, #40	; 0x28
 8005dbe:	af02      	add	r7, sp, #8
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	61bb      	str	r3, [r7, #24]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d90a      	bls.n	8005e00 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	617b      	str	r3, [r7, #20]
}
 8005dfc:	bf00      	nop
 8005dfe:	e7fe      	b.n	8005dfe <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005e00:	2302      	movs	r3, #2
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	2100      	movs	r1, #0
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff fe46 	bl	8005a9c <xQueueGenericCreateStatic>
 8005e10:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
	}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3720      	adds	r7, #32
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	613b      	str	r3, [r7, #16]
}
 8005e4a:	bf00      	nop
 8005e4c:	e7fe      	b.n	8005e4c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d90a      	bls.n	8005e6c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	60fb      	str	r3, [r7, #12]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	2100      	movs	r1, #0
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fe8a 	bl	8005b8a <xQueueGenericCreate>
 8005e76:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005e84:	697b      	ldr	r3, [r7, #20]
	}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08e      	sub	sp, #56	; 0x38
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <xQueueGenericSend+0x32>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <xQueueGenericSend+0x40>
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <xQueueGenericSend+0x44>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e000      	b.n	8005ed6 <xQueueGenericSend+0x46>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <xQueueGenericSend+0x60>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d103      	bne.n	8005efe <xQueueGenericSend+0x6e>
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <xQueueGenericSend+0x72>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <xQueueGenericSend+0x74>
 8005f02:	2300      	movs	r3, #0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <xQueueGenericSend+0x8e>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	623b      	str	r3, [r7, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f1e:	f001 fcb7 	bl	8007890 <xTaskGetSchedulerState>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <xQueueGenericSend+0x9e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <xQueueGenericSend+0xa2>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <xQueueGenericSend+0xa4>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xQueueGenericSend+0xbe>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	61fb      	str	r3, [r7, #28]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f4e:	f002 fa8d 	bl	800846c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d302      	bcc.n	8005f64 <xQueueGenericSend+0xd4>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d129      	bne.n	8005fb8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f6a:	f000 fc94 	bl	8006896 <prvCopyDataToQueue>
 8005f6e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d010      	beq.n	8005f9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	3324      	adds	r3, #36	; 0x24
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f001 fab3 	bl	80074e8 <xTaskRemoveFromEventList>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d013      	beq.n	8005fb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f88:	4b3f      	ldr	r3, [pc, #252]	; (8006088 <xQueueGenericSend+0x1f8>)
 8005f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	e00a      	b.n	8005fb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d007      	beq.n	8005fb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fa0:	4b39      	ldr	r3, [pc, #228]	; (8006088 <xQueueGenericSend+0x1f8>)
 8005fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fb0:	f002 fa8c 	bl	80084cc <vPortExitCritical>
				return pdPASS;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e063      	b.n	8006080 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d103      	bne.n	8005fc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fbe:	f002 fa85 	bl	80084cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e05c      	b.n	8006080 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fcc:	f107 0314 	add.w	r3, r7, #20
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 faed 	bl	80075b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fda:	f002 fa77 	bl	80084cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fde:	f001 f845 	bl	800706c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fe2:	f002 fa43 	bl	800846c <vPortEnterCritical>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fec:	b25b      	sxtb	r3, r3
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d103      	bne.n	8005ffc <xQueueGenericSend+0x16c>
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006002:	b25b      	sxtb	r3, r3
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d103      	bne.n	8006012 <xQueueGenericSend+0x182>
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006012:	f002 fa5b 	bl	80084cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006016:	1d3a      	adds	r2, r7, #4
 8006018:	f107 0314 	add.w	r3, r7, #20
 800601c:	4611      	mov	r1, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f001 fadc 	bl	80075dc <xTaskCheckForTimeOut>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d124      	bne.n	8006074 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800602a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800602c:	f000 fd2b 	bl	8006a86 <prvIsQueueFull>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d018      	beq.n	8006068 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	3310      	adds	r3, #16
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4611      	mov	r1, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f001 fa02 	bl	8007448 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006046:	f000 fcb6 	bl	80069b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800604a:	f001 f81d 	bl	8007088 <xTaskResumeAll>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	f47f af7c 	bne.w	8005f4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006056:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <xQueueGenericSend+0x1f8>)
 8006058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	e772      	b.n	8005f4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800606a:	f000 fca4 	bl	80069b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800606e:	f001 f80b 	bl	8007088 <xTaskResumeAll>
 8006072:	e76c      	b.n	8005f4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006076:	f000 fc9e 	bl	80069b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800607a:	f001 f805 	bl	8007088 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800607e:	2300      	movs	r3, #0
		}
	}
}
 8006080:	4618      	mov	r0, r3
 8006082:	3738      	adds	r7, #56	; 0x38
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08e      	sub	sp, #56	; 0x38
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d103      	bne.n	80060c8 <xQueueGenericSendFromISR+0x3c>
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <xQueueGenericSendFromISR+0x40>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e000      	b.n	80060ce <xQueueGenericSendFromISR+0x42>
 80060cc:	2300      	movs	r3, #0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	623b      	str	r3, [r7, #32]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d103      	bne.n	80060f6 <xQueueGenericSendFromISR+0x6a>
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <xQueueGenericSendFromISR+0x6e>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <xQueueGenericSendFromISR+0x70>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	61fb      	str	r3, [r7, #28]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006116:	f002 fa6b 	bl	80085f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800611a:	f3ef 8211 	mrs	r2, BASEPRI
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	61ba      	str	r2, [r7, #24]
 8006130:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006132:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	429a      	cmp	r2, r3
 8006140:	d302      	bcc.n	8006148 <xQueueGenericSendFromISR+0xbc>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d12c      	bne.n	80061a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006158:	f000 fb9d 	bl	8006896 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800615c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d112      	bne.n	800618c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	2b00      	cmp	r3, #0
 800616c:	d016      	beq.n	800619c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	3324      	adds	r3, #36	; 0x24
 8006172:	4618      	mov	r0, r3
 8006174:	f001 f9b8 	bl	80074e8 <xTaskRemoveFromEventList>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00e      	beq.n	800619c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e007      	b.n	800619c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800618c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006190:	3301      	adds	r3, #1
 8006192:	b2db      	uxtb	r3, r3
 8006194:	b25a      	sxtb	r2, r3
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800619c:	2301      	movs	r3, #1
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80061a0:	e001      	b.n	80061a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3738      	adds	r7, #56	; 0x38
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08e      	sub	sp, #56	; 0x38
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10a      	bne.n	80061e6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	623b      	str	r3, [r7, #32]
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <xQueueGiveFromISR+0x48>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	61fb      	str	r3, [r7, #28]
}
 8006200:	bf00      	nop
 8006202:	e7fe      	b.n	8006202 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d103      	bne.n	8006214 <xQueueGiveFromISR+0x58>
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <xQueueGiveFromISR+0x5c>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <xQueueGiveFromISR+0x5e>
 8006218:	2300      	movs	r3, #0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <xQueueGiveFromISR+0x78>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	61bb      	str	r3, [r7, #24]
}
 8006230:	bf00      	nop
 8006232:	e7fe      	b.n	8006232 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006234:	f002 f9dc 	bl	80085f0 <vPortValidateInterruptPriority>
	__asm volatile
 8006238:	f3ef 8211 	mrs	r2, BASEPRI
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	617a      	str	r2, [r7, #20]
 800624e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006250:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006260:	429a      	cmp	r2, r3
 8006262:	d22b      	bcs.n	80062bc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800626a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006276:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627e:	d112      	bne.n	80062a6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	2b00      	cmp	r3, #0
 8006286:	d016      	beq.n	80062b6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	3324      	adds	r3, #36	; 0x24
 800628c:	4618      	mov	r0, r3
 800628e:	f001 f92b 	bl	80074e8 <xTaskRemoveFromEventList>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00e      	beq.n	80062b6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00b      	beq.n	80062b6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2201      	movs	r2, #1
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	e007      	b.n	80062b6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062aa:	3301      	adds	r3, #1
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	b25a      	sxtb	r2, r3
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80062b6:	2301      	movs	r3, #1
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ba:	e001      	b.n	80062c0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f383 8811 	msr	BASEPRI, r3
}
 80062ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3738      	adds	r7, #56	; 0x38
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08c      	sub	sp, #48	; 0x30
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80062e4:	2300      	movs	r3, #0
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <xQueueReceive+0x30>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	623b      	str	r3, [r7, #32]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <xQueueReceive+0x3e>
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <xQueueReceive+0x42>
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <xQueueReceive+0x44>
 800631a:	2300      	movs	r3, #0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <xQueueReceive+0x5e>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	61fb      	str	r3, [r7, #28]
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006336:	f001 faab 	bl	8007890 <xTaskGetSchedulerState>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <xQueueReceive+0x6e>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <xQueueReceive+0x72>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <xQueueReceive+0x74>
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <xQueueReceive+0x8e>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	61bb      	str	r3, [r7, #24]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006366:	f002 f881 	bl	800846c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01f      	beq.n	80063b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800637a:	f000 faf6 	bl	800696a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	1e5a      	subs	r2, r3, #1
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00f      	beq.n	80063ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	3310      	adds	r3, #16
 8006392:	4618      	mov	r0, r3
 8006394:	f001 f8a8 	bl	80074e8 <xTaskRemoveFromEventList>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800639e:	4b3d      	ldr	r3, [pc, #244]	; (8006494 <xQueueReceive+0x1bc>)
 80063a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063ae:	f002 f88d 	bl	80084cc <vPortExitCritical>
				return pdPASS;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e069      	b.n	800648a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063bc:	f002 f886 	bl	80084cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063c0:	2300      	movs	r3, #0
 80063c2:	e062      	b.n	800648a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063ca:	f107 0310 	add.w	r3, r7, #16
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 f8ee 	bl	80075b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063d4:	2301      	movs	r3, #1
 80063d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063d8:	f002 f878 	bl	80084cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063dc:	f000 fe46 	bl	800706c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063e0:	f002 f844 	bl	800846c <vPortEnterCritical>
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d103      	bne.n	80063fa <xQueueReceive+0x122>
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006400:	b25b      	sxtb	r3, r3
 8006402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006406:	d103      	bne.n	8006410 <xQueueReceive+0x138>
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006410:	f002 f85c 	bl	80084cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006414:	1d3a      	adds	r2, r7, #4
 8006416:	f107 0310 	add.w	r3, r7, #16
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f8dd 	bl	80075dc <xTaskCheckForTimeOut>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d123      	bne.n	8006470 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800642a:	f000 fb16 	bl	8006a5a <prvIsQueueEmpty>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d017      	beq.n	8006464 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	3324      	adds	r3, #36	; 0x24
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	4611      	mov	r1, r2
 800643c:	4618      	mov	r0, r3
 800643e:	f001 f803 	bl	8007448 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006444:	f000 fab7 	bl	80069b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006448:	f000 fe1e 	bl	8007088 <xTaskResumeAll>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d189      	bne.n	8006366 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006452:	4b10      	ldr	r3, [pc, #64]	; (8006494 <xQueueReceive+0x1bc>)
 8006454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	e780      	b.n	8006366 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006466:	f000 faa6 	bl	80069b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800646a:	f000 fe0d 	bl	8007088 <xTaskResumeAll>
 800646e:	e77a      	b.n	8006366 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006472:	f000 faa0 	bl	80069b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006476:	f000 fe07 	bl	8007088 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800647a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800647c:	f000 faed 	bl	8006a5a <prvIsQueueEmpty>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	f43f af6f 	beq.w	8006366 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006488:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800648a:	4618      	mov	r0, r3
 800648c:	3730      	adds	r7, #48	; 0x30
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	e000ed04 	.word	0xe000ed04

08006498 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08e      	sub	sp, #56	; 0x38
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	623b      	str	r3, [r7, #32]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	61fb      	str	r3, [r7, #28]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064e8:	f001 f9d2 	bl	8007890 <xTaskGetSchedulerState>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <xQueueSemaphoreTake+0x60>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <xQueueSemaphoreTake+0x64>
 80064f8:	2301      	movs	r3, #1
 80064fa:	e000      	b.n	80064fe <xQueueSemaphoreTake+0x66>
 80064fc:	2300      	movs	r3, #0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	61bb      	str	r3, [r7, #24]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006518:	f001 ffa8 	bl	800846c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	2b00      	cmp	r3, #0
 8006526:	d024      	beq.n	8006572 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	1e5a      	subs	r2, r3, #1
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006538:	f001 fb2a 	bl	8007b90 <pvTaskIncrementMutexHeldCount>
 800653c:	4602      	mov	r2, r0
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00f      	beq.n	800656a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	3310      	adds	r3, #16
 800654e:	4618      	mov	r0, r3
 8006550:	f000 ffca 	bl	80074e8 <xTaskRemoveFromEventList>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800655a:	4b54      	ldr	r3, [pc, #336]	; (80066ac <xQueueSemaphoreTake+0x214>)
 800655c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800656a:	f001 ffaf 	bl	80084cc <vPortExitCritical>
				return pdPASS;
 800656e:	2301      	movs	r3, #1
 8006570:	e097      	b.n	80066a2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d111      	bne.n	800659c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	617b      	str	r3, [r7, #20]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006594:	f001 ff9a 	bl	80084cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006598:	2300      	movs	r3, #0
 800659a:	e082      	b.n	80066a2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800659c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065a2:	f107 030c 	add.w	r3, r7, #12
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 f802 	bl	80075b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065ac:	2301      	movs	r3, #1
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065b0:	f001 ff8c 	bl	80084cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065b4:	f000 fd5a 	bl	800706c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065b8:	f001 ff58 	bl	800846c <vPortEnterCritical>
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065c2:	b25b      	sxtb	r3, r3
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d103      	bne.n	80065d2 <xQueueSemaphoreTake+0x13a>
 80065ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065d8:	b25b      	sxtb	r3, r3
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d103      	bne.n	80065e8 <xQueueSemaphoreTake+0x150>
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065e8:	f001 ff70 	bl	80084cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065ec:	463a      	mov	r2, r7
 80065ee:	f107 030c 	add.w	r3, r7, #12
 80065f2:	4611      	mov	r1, r2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fff1 	bl	80075dc <xTaskCheckForTimeOut>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d132      	bne.n	8006666 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006602:	f000 fa2a 	bl	8006a5a <prvIsQueueEmpty>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d026      	beq.n	800665a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d109      	bne.n	8006628 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006614:	f001 ff2a 	bl	800846c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4618      	mov	r0, r3
 800661e:	f001 f955 	bl	80078cc <xTaskPriorityInherit>
 8006622:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006624:	f001 ff52 	bl	80084cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	3324      	adds	r3, #36	; 0x24
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	4611      	mov	r1, r2
 8006630:	4618      	mov	r0, r3
 8006632:	f000 ff09 	bl	8007448 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006638:	f000 f9bd 	bl	80069b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800663c:	f000 fd24 	bl	8007088 <xTaskResumeAll>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	f47f af68 	bne.w	8006518 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006648:	4b18      	ldr	r3, [pc, #96]	; (80066ac <xQueueSemaphoreTake+0x214>)
 800664a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	e75e      	b.n	8006518 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800665a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800665c:	f000 f9ab 	bl	80069b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006660:	f000 fd12 	bl	8007088 <xTaskResumeAll>
 8006664:	e758      	b.n	8006518 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006668:	f000 f9a5 	bl	80069b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800666c:	f000 fd0c 	bl	8007088 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006672:	f000 f9f2 	bl	8006a5a <prvIsQueueEmpty>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	f43f af4d 	beq.w	8006518 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00d      	beq.n	80066a0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006684:	f001 fef2 	bl	800846c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800668a:	f000 f8ed 	bl	8006868 <prvGetDisinheritPriorityAfterTimeout>
 800668e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006696:	4618      	mov	r0, r3
 8006698:	f001 f9f4 	bl	8007a84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800669c:	f001 ff16 	bl	80084cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3738      	adds	r7, #56	; 0x38
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08e      	sub	sp, #56	; 0x38
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10a      	bne.n	80066dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	623b      	str	r3, [r7, #32]
}
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d103      	bne.n	80066ea <xQueueReceiveFromISR+0x3a>
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <xQueueReceiveFromISR+0x3e>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <xQueueReceiveFromISR+0x40>
 80066ee:	2300      	movs	r3, #0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	61fb      	str	r3, [r7, #28]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800670a:	f001 ff71 	bl	80085f0 <vPortValidateInterruptPriority>
	__asm volatile
 800670e:	f3ef 8211 	mrs	r2, BASEPRI
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	61ba      	str	r2, [r7, #24]
 8006724:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006726:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	2b00      	cmp	r3, #0
 8006734:	d02f      	beq.n	8006796 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800673c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006744:	f000 f911 	bl	800696a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	1e5a      	subs	r2, r3, #1
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006750:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d112      	bne.n	8006780 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d016      	beq.n	8006790 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	3310      	adds	r3, #16
 8006766:	4618      	mov	r0, r3
 8006768:	f000 febe 	bl	80074e8 <xTaskRemoveFromEventList>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00e      	beq.n	8006790 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e007      	b.n	8006790 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006784:	3301      	adds	r3, #1
 8006786:	b2db      	uxtb	r3, r3
 8006788:	b25a      	sxtb	r2, r3
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006790:	2301      	movs	r3, #1
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
 8006794:	e001      	b.n	800679a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006796:	2300      	movs	r3, #0
 8006798:	637b      	str	r3, [r7, #52]	; 0x34
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f383 8811 	msr	BASEPRI, r3
}
 80067a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3738      	adds	r7, #56	; 0x38
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	60bb      	str	r3, [r7, #8]
}
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80067d4:	f001 fe4a 	bl	800846c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80067de:	f001 fe75 	bl	80084cc <vPortExitCritical>

	return uxReturn;
 80067e2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	60bb      	str	r3, [r7, #8]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8006816:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr

08006822 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <vQueueDelete+0x28>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	60bb      	str	r3, [r7, #8]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f95c 	bl	8006b08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006856:	2b00      	cmp	r3, #0
 8006858:	d102      	bne.n	8006860 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f001 ffca 	bl	80087f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d006      	beq.n	8006886 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e001      	b.n	800688a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800688a:	68fb      	ldr	r3, [r7, #12]
	}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr

08006896 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10d      	bne.n	80068d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d14d      	bne.n	8006958 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 f871 	bl	80079a8 <xTaskPriorityDisinherit>
 80068c6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	e043      	b.n	8006958 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d119      	bne.n	800690a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6898      	ldr	r0, [r3, #8]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	461a      	mov	r2, r3
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	f00e f9ea 	bl	8014cba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	441a      	add	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d32b      	bcc.n	8006958 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	609a      	str	r2, [r3, #8]
 8006908:	e026      	b.n	8006958 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	68d8      	ldr	r0, [r3, #12]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	461a      	mov	r2, r3
 8006914:	68b9      	ldr	r1, [r7, #8]
 8006916:	f00e f9d0 	bl	8014cba <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	425b      	negs	r3, r3
 8006924:	441a      	add	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d207      	bcs.n	8006946 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	425b      	negs	r3, r3
 8006940:	441a      	add	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d105      	bne.n	8006958 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	3b01      	subs	r3, #1
 8006956:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006960:	697b      	ldr	r3, [r7, #20]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d018      	beq.n	80069ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	441a      	add	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d303      	bcc.n	800699e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68d9      	ldr	r1, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	461a      	mov	r2, r3
 80069a8:	6838      	ldr	r0, [r7, #0]
 80069aa:	f00e f986 	bl	8014cba <memcpy>
	}
}
 80069ae:	bf00      	nop
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069be:	f001 fd55 	bl	800846c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ca:	e011      	b.n	80069f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d012      	beq.n	80069fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3324      	adds	r3, #36	; 0x24
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fd85 	bl	80074e8 <xTaskRemoveFromEventList>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069e4:	f000 fe5c 	bl	80076a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dce9      	bgt.n	80069cc <prvUnlockQueue+0x16>
 80069f8:	e000      	b.n	80069fc <prvUnlockQueue+0x46>
					break;
 80069fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	22ff      	movs	r2, #255	; 0xff
 8006a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a04:	f001 fd62 	bl	80084cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a08:	f001 fd30 	bl	800846c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a14:	e011      	b.n	8006a3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d012      	beq.n	8006a44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3310      	adds	r3, #16
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fd60 	bl	80074e8 <xTaskRemoveFromEventList>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a2e:	f000 fe37 	bl	80076a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dce9      	bgt.n	8006a16 <prvUnlockQueue+0x60>
 8006a42:	e000      	b.n	8006a46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	22ff      	movs	r2, #255	; 0xff
 8006a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a4e:	f001 fd3d 	bl	80084cc <vPortExitCritical>
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a62:	f001 fd03 	bl	800846c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e001      	b.n	8006a78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a74:	2300      	movs	r3, #0
 8006a76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a78:	f001 fd28 	bl	80084cc <vPortExitCritical>

	return xReturn;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a8e:	f001 fced 	bl	800846c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d102      	bne.n	8006aa4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	e001      	b.n	8006aa8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aa8:	f001 fd10 	bl	80084cc <vPortExitCritical>

	return xReturn;
 8006aac:	68fb      	ldr	r3, [r7, #12]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	e014      	b.n	8006af2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ac8:	4a0e      	ldr	r2, [pc, #56]	; (8006b04 <vQueueAddToRegistry+0x4c>)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10b      	bne.n	8006aec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ad4:	490b      	ldr	r1, [pc, #44]	; (8006b04 <vQueueAddToRegistry+0x4c>)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006ade:	4a09      	ldr	r2, [pc, #36]	; (8006b04 <vQueueAddToRegistry+0x4c>)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	4413      	add	r3, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006aea:	e006      	b.n	8006afa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3301      	adds	r3, #1
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b07      	cmp	r3, #7
 8006af6:	d9e7      	bls.n	8006ac8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr
 8006b04:	20004024 	.word	0x20004024

08006b08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b10:	2300      	movs	r3, #0
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	e016      	b.n	8006b44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006b16:	4a10      	ldr	r2, [pc, #64]	; (8006b58 <vQueueUnregisterQueue+0x50>)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	4413      	add	r3, r2
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d10b      	bne.n	8006b3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006b26:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <vQueueUnregisterQueue+0x50>)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006b30:	4a09      	ldr	r2, [pc, #36]	; (8006b58 <vQueueUnregisterQueue+0x50>)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	00db      	lsls	r3, r3, #3
 8006b36:	4413      	add	r3, r2
 8006b38:	2200      	movs	r2, #0
 8006b3a:	605a      	str	r2, [r3, #4]
				break;
 8006b3c:	e006      	b.n	8006b4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3301      	adds	r3, #1
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b07      	cmp	r3, #7
 8006b48:	d9e5      	bls.n	8006b16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bc80      	pop	{r7}
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20004024 	.word	0x20004024

08006b5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b6c:	f001 fc7e 	bl	800846c <vPortEnterCritical>
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b76:	b25b      	sxtb	r3, r3
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d103      	bne.n	8006b86 <vQueueWaitForMessageRestricted+0x2a>
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b8c:	b25b      	sxtb	r3, r3
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d103      	bne.n	8006b9c <vQueueWaitForMessageRestricted+0x40>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b9c:	f001 fc96 	bl	80084cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	3324      	adds	r3, #36	; 0x24
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fc6d 	bl	8007490 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bb6:	6978      	ldr	r0, [r7, #20]
 8006bb8:	f7ff fefd 	bl	80069b6 <prvUnlockQueue>
	}
 8006bbc:	bf00      	nop
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08e      	sub	sp, #56	; 0x38
 8006bc8:	af04      	add	r7, sp, #16
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <xTaskCreateStatic+0x2a>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	623b      	str	r3, [r7, #32]
}
 8006bea:	bf00      	nop
 8006bec:	e7fe      	b.n	8006bec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10a      	bne.n	8006c0a <xTaskCreateStatic+0x46>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	61fb      	str	r3, [r7, #28]
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c0a:	23a8      	movs	r3, #168	; 0xa8
 8006c0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2ba8      	cmp	r3, #168	; 0xa8
 8006c12:	d00a      	beq.n	8006c2a <xTaskCreateStatic+0x66>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	61bb      	str	r3, [r7, #24]
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01e      	beq.n	8006c6e <xTaskCreateStatic+0xaa>
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01b      	beq.n	8006c6e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9303      	str	r3, [sp, #12]
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	9302      	str	r3, [sp, #8]
 8006c50:	f107 0314 	add.w	r3, r7, #20
 8006c54:	9301      	str	r3, [sp, #4]
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 f851 	bl	8006d08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c68:	f000 f8ec 	bl	8006e44 <prvAddNewTaskToReadyList>
 8006c6c:	e001      	b.n	8006c72 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c72:	697b      	ldr	r3, [r7, #20]
	}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3728      	adds	r7, #40	; 0x28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08c      	sub	sp, #48	; 0x30
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 fceb 	bl	800866c <pvPortMalloc>
 8006c96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00e      	beq.n	8006cbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006c9e:	20a8      	movs	r0, #168	; 0xa8
 8006ca0:	f001 fce4 	bl	800866c <pvPortMalloc>
 8006ca4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8006cb2:	e005      	b.n	8006cc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cb4:	6978      	ldr	r0, [r7, #20]
 8006cb6:	f001 fd9d 	bl	80087f4 <vPortFree>
 8006cba:	e001      	b.n	8006cc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d017      	beq.n	8006cf6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cce:	88fa      	ldrh	r2, [r7, #6]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9303      	str	r3, [sp, #12]
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	9302      	str	r3, [sp, #8]
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f80f 	bl	8006d08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cea:	69f8      	ldr	r0, [r7, #28]
 8006cec:	f000 f8aa 	bl	8006e44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	e002      	b.n	8006cfc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cfc:	69bb      	ldr	r3, [r7, #24]
	}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	461a      	mov	r2, r3
 8006d20:	21a5      	movs	r1, #165	; 0xa5
 8006d22:	f00d fefe 	bl	8014b22 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d30:	3b01      	subs	r3, #1
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	f023 0307 	bic.w	r3, r3, #7
 8006d3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	617b      	str	r3, [r7, #20]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d60:	2300      	movs	r3, #0
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	e012      	b.n	8006d8c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	7819      	ldrb	r1, [r3, #0]
 8006d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	4413      	add	r3, r2
 8006d74:	3334      	adds	r3, #52	; 0x34
 8006d76:	460a      	mov	r2, r1
 8006d78:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	4413      	add	r3, r2
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d006      	beq.n	8006d94 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	2b0f      	cmp	r3, #15
 8006d90:	d9e9      	bls.n	8006d66 <prvInitialiseNewTask+0x5e>
 8006d92:	e000      	b.n	8006d96 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006d94:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	2b37      	cmp	r3, #55	; 0x37
 8006da2:	d901      	bls.n	8006da8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006da4:	2337      	movs	r3, #55	; 0x37
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	2200      	movs	r2, #0
 8006db8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fe fd73 	bl	80058aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	3318      	adds	r3, #24
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fe fd6e 	bl	80058aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	3354      	adds	r3, #84	; 0x54
 8006df8:	224c      	movs	r2, #76	; 0x4c
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f00d fe90 	bl	8014b22 <memset>
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	4a0c      	ldr	r2, [pc, #48]	; (8006e38 <prvInitialiseNewTask+0x130>)
 8006e06:	659a      	str	r2, [r3, #88]	; 0x58
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	4a0c      	ldr	r2, [pc, #48]	; (8006e3c <prvInitialiseNewTask+0x134>)
 8006e0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	4a0b      	ldr	r2, [pc, #44]	; (8006e40 <prvInitialiseNewTask+0x138>)
 8006e12:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	68f9      	ldr	r1, [r7, #12]
 8006e18:	69b8      	ldr	r0, [r7, #24]
 8006e1a:	f001 fa33 	bl	8008284 <pxPortInitialiseStack>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e30:	bf00      	nop
 8006e32:	3720      	adds	r7, #32
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	2000bb74 	.word	0x2000bb74
 8006e3c:	2000bbdc 	.word	0x2000bbdc
 8006e40:	2000bc44 	.word	0x2000bc44

08006e44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e4c:	f001 fb0e 	bl	800846c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e50:	4b2d      	ldr	r3, [pc, #180]	; (8006f08 <prvAddNewTaskToReadyList+0xc4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	4a2c      	ldr	r2, [pc, #176]	; (8006f08 <prvAddNewTaskToReadyList+0xc4>)
 8006e58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e5a:	4b2c      	ldr	r3, [pc, #176]	; (8006f0c <prvAddNewTaskToReadyList+0xc8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e62:	4a2a      	ldr	r2, [pc, #168]	; (8006f0c <prvAddNewTaskToReadyList+0xc8>)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e68:	4b27      	ldr	r3, [pc, #156]	; (8006f08 <prvAddNewTaskToReadyList+0xc4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d110      	bne.n	8006e92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e70:	f000 fc3a 	bl	80076e8 <prvInitialiseTaskLists>
 8006e74:	e00d      	b.n	8006e92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e76:	4b26      	ldr	r3, [pc, #152]	; (8006f10 <prvAddNewTaskToReadyList+0xcc>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e7e:	4b23      	ldr	r3, [pc, #140]	; (8006f0c <prvAddNewTaskToReadyList+0xc8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d802      	bhi.n	8006e92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e8c:	4a1f      	ldr	r2, [pc, #124]	; (8006f0c <prvAddNewTaskToReadyList+0xc8>)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e92:	4b20      	ldr	r3, [pc, #128]	; (8006f14 <prvAddNewTaskToReadyList+0xd0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3301      	adds	r3, #1
 8006e98:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <prvAddNewTaskToReadyList+0xd0>)
 8006e9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e9c:	4b1d      	ldr	r3, [pc, #116]	; (8006f14 <prvAddNewTaskToReadyList+0xd0>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	; (8006f18 <prvAddNewTaskToReadyList+0xd4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d903      	bls.n	8006eb8 <prvAddNewTaskToReadyList+0x74>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <prvAddNewTaskToReadyList+0xd4>)
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4a15      	ldr	r2, [pc, #84]	; (8006f1c <prvAddNewTaskToReadyList+0xd8>)
 8006ec6:	441a      	add	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f7fe fcf7 	bl	80058c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ed4:	f001 fafa 	bl	80084cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ed8:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <prvAddNewTaskToReadyList+0xcc>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00e      	beq.n	8006efe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <prvAddNewTaskToReadyList+0xc8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d207      	bcs.n	8006efe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006eee:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <prvAddNewTaskToReadyList+0xdc>)
 8006ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20004538 	.word	0x20004538
 8006f0c:	20004064 	.word	0x20004064
 8006f10:	20004544 	.word	0x20004544
 8006f14:	20004554 	.word	0x20004554
 8006f18:	20004540 	.word	0x20004540
 8006f1c:	20004068 	.word	0x20004068
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d017      	beq.n	8006f66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f36:	4b13      	ldr	r3, [pc, #76]	; (8006f84 <vTaskDelay+0x60>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <vTaskDelay+0x30>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	60bb      	str	r3, [r7, #8]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f54:	f000 f88a 	bl	800706c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f58:	2100      	movs	r1, #0
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fe2c 	bl	8007bb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f60:	f000 f892 	bl	8007088 <xTaskResumeAll>
 8006f64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d107      	bne.n	8006f7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <vTaskDelay+0x64>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f7c:	bf00      	nop
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	20004560 	.word	0x20004560
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08a      	sub	sp, #40	; 0x28
 8006f90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f9a:	463a      	mov	r2, r7
 8006f9c:	1d39      	adds	r1, r7, #4
 8006f9e:	f107 0308 	add.w	r3, r7, #8
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe fc30 	bl	8005808 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	9202      	str	r2, [sp, #8]
 8006fb0:	9301      	str	r3, [sp, #4]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	460a      	mov	r2, r1
 8006fba:	4924      	ldr	r1, [pc, #144]	; (800704c <vTaskStartScheduler+0xc0>)
 8006fbc:	4824      	ldr	r0, [pc, #144]	; (8007050 <vTaskStartScheduler+0xc4>)
 8006fbe:	f7ff fe01 	bl	8006bc4 <xTaskCreateStatic>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	4a23      	ldr	r2, [pc, #140]	; (8007054 <vTaskStartScheduler+0xc8>)
 8006fc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fc8:	4b22      	ldr	r3, [pc, #136]	; (8007054 <vTaskStartScheduler+0xc8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e001      	b.n	8006fda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d102      	bne.n	8006fe6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006fe0:	f000 fe3e 	bl	8007c60 <xTimerCreateTimerTask>
 8006fe4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d11b      	bne.n	8007024 <vTaskStartScheduler+0x98>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	613b      	str	r3, [r7, #16]
}
 8006ffe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007000:	4b15      	ldr	r3, [pc, #84]	; (8007058 <vTaskStartScheduler+0xcc>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3354      	adds	r3, #84	; 0x54
 8007006:	4a15      	ldr	r2, [pc, #84]	; (800705c <vTaskStartScheduler+0xd0>)
 8007008:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800700a:	4b15      	ldr	r3, [pc, #84]	; (8007060 <vTaskStartScheduler+0xd4>)
 800700c:	f04f 32ff 	mov.w	r2, #4294967295
 8007010:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007012:	4b14      	ldr	r3, [pc, #80]	; (8007064 <vTaskStartScheduler+0xd8>)
 8007014:	2201      	movs	r2, #1
 8007016:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007018:	4b13      	ldr	r3, [pc, #76]	; (8007068 <vTaskStartScheduler+0xdc>)
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800701e:	f001 f9b3 	bl	8008388 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007022:	e00e      	b.n	8007042 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702a:	d10a      	bne.n	8007042 <vTaskStartScheduler+0xb6>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60fb      	str	r3, [r7, #12]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <vTaskStartScheduler+0xb4>
}
 8007042:	bf00      	nop
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	08015918 	.word	0x08015918
 8007050:	080076b9 	.word	0x080076b9
 8007054:	2000455c 	.word	0x2000455c
 8007058:	20004064 	.word	0x20004064
 800705c:	2000007c 	.word	0x2000007c
 8007060:	20004558 	.word	0x20004558
 8007064:	20004544 	.word	0x20004544
 8007068:	2000453c 	.word	0x2000453c

0800706c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007070:	4b04      	ldr	r3, [pc, #16]	; (8007084 <vTaskSuspendAll+0x18>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3301      	adds	r3, #1
 8007076:	4a03      	ldr	r2, [pc, #12]	; (8007084 <vTaskSuspendAll+0x18>)
 8007078:	6013      	str	r3, [r2, #0]
}
 800707a:	bf00      	nop
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20004560 	.word	0x20004560

08007088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007092:	2300      	movs	r3, #0
 8007094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007096:	4b42      	ldr	r3, [pc, #264]	; (80071a0 <xTaskResumeAll+0x118>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	603b      	str	r3, [r7, #0]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070b4:	f001 f9da 	bl	800846c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070b8:	4b39      	ldr	r3, [pc, #228]	; (80071a0 <xTaskResumeAll+0x118>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3b01      	subs	r3, #1
 80070be:	4a38      	ldr	r2, [pc, #224]	; (80071a0 <xTaskResumeAll+0x118>)
 80070c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c2:	4b37      	ldr	r3, [pc, #220]	; (80071a0 <xTaskResumeAll+0x118>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d162      	bne.n	8007190 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070ca:	4b36      	ldr	r3, [pc, #216]	; (80071a4 <xTaskResumeAll+0x11c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d05e      	beq.n	8007190 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070d2:	e02f      	b.n	8007134 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80070d4:	4b34      	ldr	r3, [pc, #208]	; (80071a8 <xTaskResumeAll+0x120>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3318      	adds	r3, #24
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fc49 	bl	8005978 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3304      	adds	r3, #4
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fe fc44 	bl	8005978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f4:	4b2d      	ldr	r3, [pc, #180]	; (80071ac <xTaskResumeAll+0x124>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d903      	bls.n	8007104 <xTaskResumeAll+0x7c>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	4a2a      	ldr	r2, [pc, #168]	; (80071ac <xTaskResumeAll+0x124>)
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007108:	4613      	mov	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4a27      	ldr	r2, [pc, #156]	; (80071b0 <xTaskResumeAll+0x128>)
 8007112:	441a      	add	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3304      	adds	r3, #4
 8007118:	4619      	mov	r1, r3
 800711a:	4610      	mov	r0, r2
 800711c:	f7fe fbd1 	bl	80058c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007124:	4b23      	ldr	r3, [pc, #140]	; (80071b4 <xTaskResumeAll+0x12c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	429a      	cmp	r2, r3
 800712c:	d302      	bcc.n	8007134 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800712e:	4b22      	ldr	r3, [pc, #136]	; (80071b8 <xTaskResumeAll+0x130>)
 8007130:	2201      	movs	r2, #1
 8007132:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007134:	4b1c      	ldr	r3, [pc, #112]	; (80071a8 <xTaskResumeAll+0x120>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1cb      	bne.n	80070d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007142:	f000 fb73 	bl	800782c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007146:	4b1d      	ldr	r3, [pc, #116]	; (80071bc <xTaskResumeAll+0x134>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d010      	beq.n	8007174 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007152:	f000 f857 	bl	8007204 <xTaskIncrementTick>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800715c:	4b16      	ldr	r3, [pc, #88]	; (80071b8 <xTaskResumeAll+0x130>)
 800715e:	2201      	movs	r2, #1
 8007160:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3b01      	subs	r3, #1
 8007166:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f1      	bne.n	8007152 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800716e:	4b13      	ldr	r3, [pc, #76]	; (80071bc <xTaskResumeAll+0x134>)
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007174:	4b10      	ldr	r3, [pc, #64]	; (80071b8 <xTaskResumeAll+0x130>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800717c:	2301      	movs	r3, #1
 800717e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007180:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <xTaskResumeAll+0x138>)
 8007182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007190:	f001 f99c 	bl	80084cc <vPortExitCritical>

	return xAlreadyYielded;
 8007194:	68bb      	ldr	r3, [r7, #8]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20004560 	.word	0x20004560
 80071a4:	20004538 	.word	0x20004538
 80071a8:	200044f8 	.word	0x200044f8
 80071ac:	20004540 	.word	0x20004540
 80071b0:	20004068 	.word	0x20004068
 80071b4:	20004064 	.word	0x20004064
 80071b8:	2000454c 	.word	0x2000454c
 80071bc:	20004548 	.word	0x20004548
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071ca:	4b04      	ldr	r3, [pc, #16]	; (80071dc <xTaskGetTickCount+0x18>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071d0:	687b      	ldr	r3, [r7, #4]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr
 80071dc:	2000453c 	.word	0x2000453c

080071e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071e6:	f001 fa03 	bl	80085f0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80071ea:	2300      	movs	r3, #0
 80071ec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80071ee:	4b04      	ldr	r3, [pc, #16]	; (8007200 <xTaskGetTickCountFromISR+0x20>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071f4:	683b      	ldr	r3, [r7, #0]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	2000453c 	.word	0x2000453c

08007204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800720a:	2300      	movs	r3, #0
 800720c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800720e:	4b51      	ldr	r3, [pc, #324]	; (8007354 <xTaskIncrementTick+0x150>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	f040 808e 	bne.w	8007334 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007218:	4b4f      	ldr	r3, [pc, #316]	; (8007358 <xTaskIncrementTick+0x154>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007220:	4a4d      	ldr	r2, [pc, #308]	; (8007358 <xTaskIncrementTick+0x154>)
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d120      	bne.n	800726e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800722c:	4b4b      	ldr	r3, [pc, #300]	; (800735c <xTaskIncrementTick+0x158>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <xTaskIncrementTick+0x48>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	603b      	str	r3, [r7, #0]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <xTaskIncrementTick+0x46>
 800724c:	4b43      	ldr	r3, [pc, #268]	; (800735c <xTaskIncrementTick+0x158>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	4b43      	ldr	r3, [pc, #268]	; (8007360 <xTaskIncrementTick+0x15c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a41      	ldr	r2, [pc, #260]	; (800735c <xTaskIncrementTick+0x158>)
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	4a41      	ldr	r2, [pc, #260]	; (8007360 <xTaskIncrementTick+0x15c>)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	4b40      	ldr	r3, [pc, #256]	; (8007364 <xTaskIncrementTick+0x160>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	4a3f      	ldr	r2, [pc, #252]	; (8007364 <xTaskIncrementTick+0x160>)
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	f000 fadf 	bl	800782c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800726e:	4b3e      	ldr	r3, [pc, #248]	; (8007368 <xTaskIncrementTick+0x164>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	429a      	cmp	r2, r3
 8007276:	d34e      	bcc.n	8007316 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007278:	4b38      	ldr	r3, [pc, #224]	; (800735c <xTaskIncrementTick+0x158>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <xTaskIncrementTick+0x82>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <xTaskIncrementTick+0x84>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800728c:	4b36      	ldr	r3, [pc, #216]	; (8007368 <xTaskIncrementTick+0x164>)
 800728e:	f04f 32ff 	mov.w	r2, #4294967295
 8007292:	601a      	str	r2, [r3, #0]
					break;
 8007294:	e03f      	b.n	8007316 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007296:	4b31      	ldr	r3, [pc, #196]	; (800735c <xTaskIncrementTick+0x158>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d203      	bcs.n	80072b6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072ae:	4a2e      	ldr	r2, [pc, #184]	; (8007368 <xTaskIncrementTick+0x164>)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6013      	str	r3, [r2, #0]
						break;
 80072b4:	e02f      	b.n	8007316 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fb5c 	bl	8005978 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	3318      	adds	r3, #24
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fe fb53 	bl	8005978 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d6:	4b25      	ldr	r3, [pc, #148]	; (800736c <xTaskIncrementTick+0x168>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d903      	bls.n	80072e6 <xTaskIncrementTick+0xe2>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	4a22      	ldr	r2, [pc, #136]	; (800736c <xTaskIncrementTick+0x168>)
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4a1f      	ldr	r2, [pc, #124]	; (8007370 <xTaskIncrementTick+0x16c>)
 80072f4:	441a      	add	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	3304      	adds	r3, #4
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f7fe fae0 	bl	80058c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007306:	4b1b      	ldr	r3, [pc, #108]	; (8007374 <xTaskIncrementTick+0x170>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	429a      	cmp	r2, r3
 800730e:	d3b3      	bcc.n	8007278 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007310:	2301      	movs	r3, #1
 8007312:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007314:	e7b0      	b.n	8007278 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007316:	4b17      	ldr	r3, [pc, #92]	; (8007374 <xTaskIncrementTick+0x170>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4914      	ldr	r1, [pc, #80]	; (8007370 <xTaskIncrementTick+0x16c>)
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d907      	bls.n	800733e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800732e:	2301      	movs	r3, #1
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e004      	b.n	800733e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007334:	4b10      	ldr	r3, [pc, #64]	; (8007378 <xTaskIncrementTick+0x174>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3301      	adds	r3, #1
 800733a:	4a0f      	ldr	r2, [pc, #60]	; (8007378 <xTaskIncrementTick+0x174>)
 800733c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800733e:	4b0f      	ldr	r3, [pc, #60]	; (800737c <xTaskIncrementTick+0x178>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007346:	2301      	movs	r3, #1
 8007348:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800734a:	697b      	ldr	r3, [r7, #20]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20004560 	.word	0x20004560
 8007358:	2000453c 	.word	0x2000453c
 800735c:	200044f0 	.word	0x200044f0
 8007360:	200044f4 	.word	0x200044f4
 8007364:	20004550 	.word	0x20004550
 8007368:	20004558 	.word	0x20004558
 800736c:	20004540 	.word	0x20004540
 8007370:	20004068 	.word	0x20004068
 8007374:	20004064 	.word	0x20004064
 8007378:	20004548 	.word	0x20004548
 800737c:	2000454c 	.word	0x2000454c

08007380 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007386:	4b2a      	ldr	r3, [pc, #168]	; (8007430 <vTaskSwitchContext+0xb0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800738e:	4b29      	ldr	r3, [pc, #164]	; (8007434 <vTaskSwitchContext+0xb4>)
 8007390:	2201      	movs	r2, #1
 8007392:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007394:	e046      	b.n	8007424 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007396:	4b27      	ldr	r3, [pc, #156]	; (8007434 <vTaskSwitchContext+0xb4>)
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800739c:	4b26      	ldr	r3, [pc, #152]	; (8007438 <vTaskSwitchContext+0xb8>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e010      	b.n	80073c6 <vTaskSwitchContext+0x46>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	607b      	str	r3, [r7, #4]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <vTaskSwitchContext+0x3e>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	491d      	ldr	r1, [pc, #116]	; (800743c <vTaskSwitchContext+0xbc>)
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0e4      	beq.n	80073a4 <vTaskSwitchContext+0x24>
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4a15      	ldr	r2, [pc, #84]	; (800743c <vTaskSwitchContext+0xbc>)
 80073e6:	4413      	add	r3, r2
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	605a      	str	r2, [r3, #4]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	3308      	adds	r3, #8
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d104      	bne.n	800740a <vTaskSwitchContext+0x8a>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	4a0b      	ldr	r2, [pc, #44]	; (8007440 <vTaskSwitchContext+0xc0>)
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	4a08      	ldr	r2, [pc, #32]	; (8007438 <vTaskSwitchContext+0xb8>)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800741a:	4b09      	ldr	r3, [pc, #36]	; (8007440 <vTaskSwitchContext+0xc0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3354      	adds	r3, #84	; 0x54
 8007420:	4a08      	ldr	r2, [pc, #32]	; (8007444 <vTaskSwitchContext+0xc4>)
 8007422:	6013      	str	r3, [r2, #0]
}
 8007424:	bf00      	nop
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	bc80      	pop	{r7}
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	20004560 	.word	0x20004560
 8007434:	2000454c 	.word	0x2000454c
 8007438:	20004540 	.word	0x20004540
 800743c:	20004068 	.word	0x20004068
 8007440:	20004064 	.word	0x20004064
 8007444:	2000007c 	.word	0x2000007c

08007448 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	60fb      	str	r3, [r7, #12]
}
 800746a:	bf00      	nop
 800746c:	e7fe      	b.n	800746c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800746e:	4b07      	ldr	r3, [pc, #28]	; (800748c <vTaskPlaceOnEventList+0x44>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3318      	adds	r3, #24
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fe fa46 	bl	8005908 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800747c:	2101      	movs	r1, #1
 800747e:	6838      	ldr	r0, [r7, #0]
 8007480:	f000 fb9a 	bl	8007bb8 <prvAddCurrentTaskToDelayedList>
}
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20004064 	.word	0x20004064

08007490 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	617b      	str	r3, [r7, #20]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3318      	adds	r3, #24
 80074be:	4619      	mov	r1, r3
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f7fe f9fe 	bl	80058c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80074cc:	f04f 33ff 	mov.w	r3, #4294967295
 80074d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	68b8      	ldr	r0, [r7, #8]
 80074d6:	f000 fb6f 	bl	8007bb8 <prvAddCurrentTaskToDelayedList>
	}
 80074da:	bf00      	nop
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20004064 	.word	0x20004064

080074e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	60fb      	str	r3, [r7, #12]
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	3318      	adds	r3, #24
 8007518:	4618      	mov	r0, r3
 800751a:	f7fe fa2d 	bl	8005978 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800751e:	4b1e      	ldr	r3, [pc, #120]	; (8007598 <xTaskRemoveFromEventList+0xb0>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d11d      	bne.n	8007562 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3304      	adds	r3, #4
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fa24 	bl	8005978 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007534:	4b19      	ldr	r3, [pc, #100]	; (800759c <xTaskRemoveFromEventList+0xb4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d903      	bls.n	8007544 <xTaskRemoveFromEventList+0x5c>
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	4a16      	ldr	r2, [pc, #88]	; (800759c <xTaskRemoveFromEventList+0xb4>)
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4a13      	ldr	r2, [pc, #76]	; (80075a0 <xTaskRemoveFromEventList+0xb8>)
 8007552:	441a      	add	r2, r3
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	3304      	adds	r3, #4
 8007558:	4619      	mov	r1, r3
 800755a:	4610      	mov	r0, r2
 800755c:	f7fe f9b1 	bl	80058c2 <vListInsertEnd>
 8007560:	e005      	b.n	800756e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	3318      	adds	r3, #24
 8007566:	4619      	mov	r1, r3
 8007568:	480e      	ldr	r0, [pc, #56]	; (80075a4 <xTaskRemoveFromEventList+0xbc>)
 800756a:	f7fe f9aa 	bl	80058c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007572:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <xTaskRemoveFromEventList+0xc0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	429a      	cmp	r2, r3
 800757a:	d905      	bls.n	8007588 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800757c:	2301      	movs	r3, #1
 800757e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <xTaskRemoveFromEventList+0xc4>)
 8007582:	2201      	movs	r2, #1
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	e001      	b.n	800758c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800758c:	697b      	ldr	r3, [r7, #20]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20004560 	.word	0x20004560
 800759c:	20004540 	.word	0x20004540
 80075a0:	20004068 	.word	0x20004068
 80075a4:	200044f8 	.word	0x200044f8
 80075a8:	20004064 	.word	0x20004064
 80075ac:	2000454c 	.word	0x2000454c

080075b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075b8:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <vTaskInternalSetTimeOutState+0x24>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <vTaskInternalSetTimeOutState+0x28>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	605a      	str	r2, [r3, #4]
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20004550 	.word	0x20004550
 80075d8:	2000453c 	.word	0x2000453c

080075dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	613b      	str	r3, [r7, #16]
}
 80075fe:	bf00      	nop
 8007600:	e7fe      	b.n	8007600 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	60fb      	str	r3, [r7, #12]
}
 800761a:	bf00      	nop
 800761c:	e7fe      	b.n	800761c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800761e:	f000 ff25 	bl	800846c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007622:	4b1d      	ldr	r3, [pc, #116]	; (8007698 <xTaskCheckForTimeOut+0xbc>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763a:	d102      	bne.n	8007642 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800763c:	2300      	movs	r3, #0
 800763e:	61fb      	str	r3, [r7, #28]
 8007640:	e023      	b.n	800768a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	4b15      	ldr	r3, [pc, #84]	; (800769c <xTaskCheckForTimeOut+0xc0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	d007      	beq.n	800765e <xTaskCheckForTimeOut+0x82>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	429a      	cmp	r2, r3
 8007656:	d302      	bcc.n	800765e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007658:	2301      	movs	r3, #1
 800765a:	61fb      	str	r3, [r7, #28]
 800765c:	e015      	b.n	800768a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	429a      	cmp	r2, r3
 8007666:	d20b      	bcs.n	8007680 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	1ad2      	subs	r2, r2, r3
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff ff9b 	bl	80075b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800767a:	2300      	movs	r3, #0
 800767c:	61fb      	str	r3, [r7, #28]
 800767e:	e004      	b.n	800768a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007686:	2301      	movs	r3, #1
 8007688:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800768a:	f000 ff1f 	bl	80084cc <vPortExitCritical>

	return xReturn;
 800768e:	69fb      	ldr	r3, [r7, #28]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3720      	adds	r7, #32
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	2000453c 	.word	0x2000453c
 800769c:	20004550 	.word	0x20004550

080076a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076a4:	4b03      	ldr	r3, [pc, #12]	; (80076b4 <vTaskMissedYield+0x14>)
 80076a6:	2201      	movs	r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
}
 80076aa:	bf00      	nop
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	2000454c 	.word	0x2000454c

080076b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076c0:	f000 f852 	bl	8007768 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076c4:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <prvIdleTask+0x28>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d9f9      	bls.n	80076c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076cc:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <prvIdleTask+0x2c>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076dc:	e7f0      	b.n	80076c0 <prvIdleTask+0x8>
 80076de:	bf00      	nop
 80076e0:	20004068 	.word	0x20004068
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076ee:	2300      	movs	r3, #0
 80076f0:	607b      	str	r3, [r7, #4]
 80076f2:	e00c      	b.n	800770e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4a12      	ldr	r2, [pc, #72]	; (8007748 <prvInitialiseTaskLists+0x60>)
 8007700:	4413      	add	r3, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe f8b2 	bl	800586c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3301      	adds	r3, #1
 800770c:	607b      	str	r3, [r7, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b37      	cmp	r3, #55	; 0x37
 8007712:	d9ef      	bls.n	80076f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007714:	480d      	ldr	r0, [pc, #52]	; (800774c <prvInitialiseTaskLists+0x64>)
 8007716:	f7fe f8a9 	bl	800586c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800771a:	480d      	ldr	r0, [pc, #52]	; (8007750 <prvInitialiseTaskLists+0x68>)
 800771c:	f7fe f8a6 	bl	800586c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007720:	480c      	ldr	r0, [pc, #48]	; (8007754 <prvInitialiseTaskLists+0x6c>)
 8007722:	f7fe f8a3 	bl	800586c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007726:	480c      	ldr	r0, [pc, #48]	; (8007758 <prvInitialiseTaskLists+0x70>)
 8007728:	f7fe f8a0 	bl	800586c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800772c:	480b      	ldr	r0, [pc, #44]	; (800775c <prvInitialiseTaskLists+0x74>)
 800772e:	f7fe f89d 	bl	800586c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007732:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <prvInitialiseTaskLists+0x78>)
 8007734:	4a05      	ldr	r2, [pc, #20]	; (800774c <prvInitialiseTaskLists+0x64>)
 8007736:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007738:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <prvInitialiseTaskLists+0x7c>)
 800773a:	4a05      	ldr	r2, [pc, #20]	; (8007750 <prvInitialiseTaskLists+0x68>)
 800773c:	601a      	str	r2, [r3, #0]
}
 800773e:	bf00      	nop
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20004068 	.word	0x20004068
 800774c:	200044c8 	.word	0x200044c8
 8007750:	200044dc 	.word	0x200044dc
 8007754:	200044f8 	.word	0x200044f8
 8007758:	2000450c 	.word	0x2000450c
 800775c:	20004524 	.word	0x20004524
 8007760:	200044f0 	.word	0x200044f0
 8007764:	200044f4 	.word	0x200044f4

08007768 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800776e:	e019      	b.n	80077a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007770:	f000 fe7c 	bl	800846c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007774:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <prvCheckTasksWaitingTermination+0x50>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3304      	adds	r3, #4
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe f8f9 	bl	8005978 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007786:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <prvCheckTasksWaitingTermination+0x54>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3b01      	subs	r3, #1
 800778c:	4a0b      	ldr	r2, [pc, #44]	; (80077bc <prvCheckTasksWaitingTermination+0x54>)
 800778e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <prvCheckTasksWaitingTermination+0x58>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3b01      	subs	r3, #1
 8007796:	4a0a      	ldr	r2, [pc, #40]	; (80077c0 <prvCheckTasksWaitingTermination+0x58>)
 8007798:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800779a:	f000 fe97 	bl	80084cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f810 	bl	80077c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077a4:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <prvCheckTasksWaitingTermination+0x58>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e1      	bne.n	8007770 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077ac:	bf00      	nop
 80077ae:	bf00      	nop
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	2000450c 	.word	0x2000450c
 80077bc:	20004538 	.word	0x20004538
 80077c0:	20004520 	.word	0x20004520

080077c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3354      	adds	r3, #84	; 0x54
 80077d0:	4618      	mov	r0, r3
 80077d2:	f00d f9bf 	bl	8014b54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d108      	bne.n	80077f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e4:	4618      	mov	r0, r3
 80077e6:	f001 f805 	bl	80087f4 <vPortFree>
				vPortFree( pxTCB );
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 f802 	bl	80087f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077f0:	e018      	b.n	8007824 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d103      	bne.n	8007804 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fff9 	bl	80087f4 <vPortFree>
	}
 8007802:	e00f      	b.n	8007824 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800780a:	2b02      	cmp	r3, #2
 800780c:	d00a      	beq.n	8007824 <prvDeleteTCB+0x60>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	60fb      	str	r3, [r7, #12]
}
 8007820:	bf00      	nop
 8007822:	e7fe      	b.n	8007822 <prvDeleteTCB+0x5e>
	}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007832:	4b0e      	ldr	r3, [pc, #56]	; (800786c <prvResetNextTaskUnblockTime+0x40>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <prvResetNextTaskUnblockTime+0x14>
 800783c:	2301      	movs	r3, #1
 800783e:	e000      	b.n	8007842 <prvResetNextTaskUnblockTime+0x16>
 8007840:	2300      	movs	r3, #0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d004      	beq.n	8007850 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007846:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <prvResetNextTaskUnblockTime+0x44>)
 8007848:	f04f 32ff 	mov.w	r2, #4294967295
 800784c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800784e:	e008      	b.n	8007862 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007850:	4b06      	ldr	r3, [pc, #24]	; (800786c <prvResetNextTaskUnblockTime+0x40>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	4a04      	ldr	r2, [pc, #16]	; (8007870 <prvResetNextTaskUnblockTime+0x44>)
 8007860:	6013      	str	r3, [r2, #0]
}
 8007862:	bf00      	nop
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr
 800786c:	200044f0 	.word	0x200044f0
 8007870:	20004558 	.word	0x20004558

08007874 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800787a:	4b04      	ldr	r3, [pc, #16]	; (800788c <xTaskGetCurrentTaskHandle+0x18>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007880:	687b      	ldr	r3, [r7, #4]
	}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr
 800788c:	20004064 	.word	0x20004064

08007890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007896:	4b0b      	ldr	r3, [pc, #44]	; (80078c4 <xTaskGetSchedulerState+0x34>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d102      	bne.n	80078a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800789e:	2301      	movs	r3, #1
 80078a0:	607b      	str	r3, [r7, #4]
 80078a2:	e008      	b.n	80078b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078a4:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <xTaskGetSchedulerState+0x38>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078ac:	2302      	movs	r3, #2
 80078ae:	607b      	str	r3, [r7, #4]
 80078b0:	e001      	b.n	80078b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078b2:	2300      	movs	r3, #0
 80078b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078b6:	687b      	ldr	r3, [r7, #4]
	}
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	bc80      	pop	{r7}
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20004544 	.word	0x20004544
 80078c8:	20004560 	.word	0x20004560

080078cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d056      	beq.n	8007990 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e6:	4b2d      	ldr	r3, [pc, #180]	; (800799c <xTaskPriorityInherit+0xd0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d246      	bcs.n	800797e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	db06      	blt.n	8007906 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f8:	4b28      	ldr	r3, [pc, #160]	; (800799c <xTaskPriorityInherit+0xd0>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6959      	ldr	r1, [r3, #20]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4a22      	ldr	r2, [pc, #136]	; (80079a0 <xTaskPriorityInherit+0xd4>)
 8007918:	4413      	add	r3, r2
 800791a:	4299      	cmp	r1, r3
 800791c:	d101      	bne.n	8007922 <xTaskPriorityInherit+0x56>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <xTaskPriorityInherit+0x58>
 8007922:	2300      	movs	r3, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d022      	beq.n	800796e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	3304      	adds	r3, #4
 800792c:	4618      	mov	r0, r3
 800792e:	f7fe f823 	bl	8005978 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007932:	4b1a      	ldr	r3, [pc, #104]	; (800799c <xTaskPriorityInherit+0xd0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007940:	4b18      	ldr	r3, [pc, #96]	; (80079a4 <xTaskPriorityInherit+0xd8>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	429a      	cmp	r2, r3
 8007946:	d903      	bls.n	8007950 <xTaskPriorityInherit+0x84>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794c:	4a15      	ldr	r2, [pc, #84]	; (80079a4 <xTaskPriorityInherit+0xd8>)
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007954:	4613      	mov	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4a10      	ldr	r2, [pc, #64]	; (80079a0 <xTaskPriorityInherit+0xd4>)
 800795e:	441a      	add	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	3304      	adds	r3, #4
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f7fd ffab 	bl	80058c2 <vListInsertEnd>
 800796c:	e004      	b.n	8007978 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800796e:	4b0b      	ldr	r3, [pc, #44]	; (800799c <xTaskPriorityInherit+0xd0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007978:	2301      	movs	r3, #1
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	e008      	b.n	8007990 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007982:	4b06      	ldr	r3, [pc, #24]	; (800799c <xTaskPriorityInherit+0xd0>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	429a      	cmp	r2, r3
 800798a:	d201      	bcs.n	8007990 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800798c:	2301      	movs	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007990:	68fb      	ldr	r3, [r7, #12]
	}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20004064 	.word	0x20004064
 80079a0:	20004068 	.word	0x20004068
 80079a4:	20004540 	.word	0x20004540

080079a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d056      	beq.n	8007a6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079be:	4b2e      	ldr	r3, [pc, #184]	; (8007a78 <xTaskPriorityDisinherit+0xd0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d00a      	beq.n	80079de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	60fb      	str	r3, [r7, #12]
}
 80079da:	bf00      	nop
 80079dc:	e7fe      	b.n	80079dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10a      	bne.n	80079fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	60bb      	str	r3, [r7, #8]
}
 80079f8:	bf00      	nop
 80079fa:	e7fe      	b.n	80079fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a00:	1e5a      	subs	r2, r3, #1
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d02c      	beq.n	8007a6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d128      	bne.n	8007a6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fd ffaa 	bl	8005978 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3c:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <xTaskPriorityDisinherit+0xd4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d903      	bls.n	8007a4c <xTaskPriorityDisinherit+0xa4>
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	4a0c      	ldr	r2, [pc, #48]	; (8007a7c <xTaskPriorityDisinherit+0xd4>)
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <xTaskPriorityDisinherit+0xd8>)
 8007a5a:	441a      	add	r2, r3
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	4619      	mov	r1, r3
 8007a62:	4610      	mov	r0, r2
 8007a64:	f7fd ff2d 	bl	80058c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a6c:	697b      	ldr	r3, [r7, #20]
	}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20004064 	.word	0x20004064
 8007a7c:	20004540 	.word	0x20004540
 8007a80:	20004068 	.word	0x20004068

08007a84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a92:	2301      	movs	r3, #1
 8007a94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d06f      	beq.n	8007b7c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	60fb      	str	r3, [r7, #12]
}
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d902      	bls.n	8007aca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	61fb      	str	r3, [r7, #28]
 8007ac8:	e002      	b.n	8007ad0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ace:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d050      	beq.n	8007b7c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d14b      	bne.n	8007b7c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ae4:	4b27      	ldr	r3, [pc, #156]	; (8007b84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d10a      	bne.n	8007b04 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	60bb      	str	r3, [r7, #8]
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	db04      	blt.n	8007b22 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	6959      	ldr	r1, [r3, #20]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007b32:	4413      	add	r3, r2
 8007b34:	4299      	cmp	r1, r3
 8007b36:	d101      	bne.n	8007b3c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d01c      	beq.n	8007b7c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	3304      	adds	r3, #4
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fd ff16 	bl	8005978 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b50:	4b0e      	ldr	r3, [pc, #56]	; (8007b8c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d903      	bls.n	8007b60 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	4a0b      	ldr	r2, [pc, #44]	; (8007b8c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4a06      	ldr	r2, [pc, #24]	; (8007b88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007b6e:	441a      	add	r2, r3
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f7fd fea3 	bl	80058c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b7c:	bf00      	nop
 8007b7e:	3720      	adds	r7, #32
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20004064 	.word	0x20004064
 8007b88:	20004068 	.word	0x20004068
 8007b8c:	20004540 	.word	0x20004540

08007b90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b94:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d004      	beq.n	8007ba6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ba2:	3201      	adds	r2, #1
 8007ba4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007ba6:	4b03      	ldr	r3, [pc, #12]	; (8007bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
	}
 8007baa:	4618      	mov	r0, r3
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bc80      	pop	{r7}
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20004064 	.word	0x20004064

08007bb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bc2:	4b21      	ldr	r3, [pc, #132]	; (8007c48 <prvAddCurrentTaskToDelayedList+0x90>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bc8:	4b20      	ldr	r3, [pc, #128]	; (8007c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fd fed2 	bl	8005978 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bda:	d10a      	bne.n	8007bf2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d007      	beq.n	8007bf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007be2:	4b1a      	ldr	r3, [pc, #104]	; (8007c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4819      	ldr	r0, [pc, #100]	; (8007c50 <prvAddCurrentTaskToDelayedList+0x98>)
 8007bec:	f7fd fe69 	bl	80058c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bf0:	e026      	b.n	8007c40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bfa:	4b14      	ldr	r3, [pc, #80]	; (8007c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d209      	bcs.n	8007c1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c0a:	4b12      	ldr	r3, [pc, #72]	; (8007c54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4b0f      	ldr	r3, [pc, #60]	; (8007c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f7fd fe76 	bl	8005908 <vListInsert>
}
 8007c1c:	e010      	b.n	8007c40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c1e:	4b0e      	ldr	r3, [pc, #56]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f7fd fe6c 	bl	8005908 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c30:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d202      	bcs.n	8007c40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c3a:	4a08      	ldr	r2, [pc, #32]	; (8007c5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	6013      	str	r3, [r2, #0]
}
 8007c40:	bf00      	nop
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	2000453c 	.word	0x2000453c
 8007c4c:	20004064 	.word	0x20004064
 8007c50:	20004524 	.word	0x20004524
 8007c54:	200044f4 	.word	0x200044f4
 8007c58:	200044f0 	.word	0x200044f0
 8007c5c:	20004558 	.word	0x20004558

08007c60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	; 0x28
 8007c64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c6a:	f000 facb 	bl	8008204 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ce0 <xTimerCreateTimerTask+0x80>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d021      	beq.n	8007cba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c7e:	1d3a      	adds	r2, r7, #4
 8007c80:	f107 0108 	add.w	r1, r7, #8
 8007c84:	f107 030c 	add.w	r3, r7, #12
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fd fdd5 	bl	8005838 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	9202      	str	r2, [sp, #8]
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	2302      	movs	r3, #2
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	460a      	mov	r2, r1
 8007ca0:	4910      	ldr	r1, [pc, #64]	; (8007ce4 <xTimerCreateTimerTask+0x84>)
 8007ca2:	4811      	ldr	r0, [pc, #68]	; (8007ce8 <xTimerCreateTimerTask+0x88>)
 8007ca4:	f7fe ff8e 	bl	8006bc4 <xTaskCreateStatic>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	4a10      	ldr	r2, [pc, #64]	; (8007cec <xTimerCreateTimerTask+0x8c>)
 8007cac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cae:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <xTimerCreateTimerTask+0x8c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	613b      	str	r3, [r7, #16]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007cd6:	697b      	ldr	r3, [r7, #20]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20004594 	.word	0x20004594
 8007ce4:	08015920 	.word	0x08015920
 8007ce8:	08007e0d 	.word	0x08007e0d
 8007cec:	20004598 	.word	0x20004598

08007cf0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	; 0x28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10a      	bne.n	8007d1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	623b      	str	r3, [r7, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	e7fe      	b.n	8007d1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d1e:	4b1a      	ldr	r3, [pc, #104]	; (8007d88 <xTimerGenericCommand+0x98>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d02a      	beq.n	8007d7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b05      	cmp	r3, #5
 8007d36:	dc18      	bgt.n	8007d6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d38:	f7ff fdaa 	bl	8007890 <xTaskGetSchedulerState>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d109      	bne.n	8007d56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d42:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <xTimerGenericCommand+0x98>)
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	f107 0110 	add.w	r1, r7, #16
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4e:	f7fe f89f 	bl	8005e90 <xQueueGenericSend>
 8007d52:	6278      	str	r0, [r7, #36]	; 0x24
 8007d54:	e012      	b.n	8007d7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d56:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <xTimerGenericCommand+0x98>)
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	f107 0110 	add.w	r1, r7, #16
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2200      	movs	r2, #0
 8007d62:	f7fe f895 	bl	8005e90 <xQueueGenericSend>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24
 8007d68:	e008      	b.n	8007d7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d6a:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <xTimerGenericCommand+0x98>)
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	f107 0110 	add.w	r1, r7, #16
 8007d72:	2300      	movs	r3, #0
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	f7fe f989 	bl	800608c <xQueueGenericSendFromISR>
 8007d7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3728      	adds	r7, #40	; 0x28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20004594 	.word	0x20004594

08007d8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d96:	4b1c      	ldr	r3, [pc, #112]	; (8007e08 <prvProcessExpiredTimer+0x7c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	3304      	adds	r3, #4
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fd fde7 	bl	8005978 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d122      	bne.n	8007df8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	699a      	ldr	r2, [r3, #24]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	18d1      	adds	r1, r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	6978      	ldr	r0, [r7, #20]
 8007dc0:	f000 f8c8 	bl	8007f54 <prvInsertTimerInActiveList>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d016      	beq.n	8007df8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	6978      	ldr	r0, [r7, #20]
 8007dd6:	f7ff ff8b 	bl	8007cf0 <xTimerGenericCommand>
 8007dda:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10a      	bne.n	8007df8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	60fb      	str	r3, [r7, #12]
}
 8007df4:	bf00      	nop
 8007df6:	e7fe      	b.n	8007df6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	6978      	ldr	r0, [r7, #20]
 8007dfe:	4798      	blx	r3
}
 8007e00:	bf00      	nop
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	2000458c 	.word	0x2000458c

08007e0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e14:	f107 0308 	add.w	r3, r7, #8
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 f857 	bl	8007ecc <prvGetNextExpireTime>
 8007e1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	4619      	mov	r1, r3
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f803 	bl	8007e30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e2a:	f000 f8d5 	bl	8007fd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e2e:	e7f1      	b.n	8007e14 <prvTimerTask+0x8>

08007e30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e3a:	f7ff f917 	bl	800706c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e3e:	f107 0308 	add.w	r3, r7, #8
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 f866 	bl	8007f14 <prvSampleTimeNow>
 8007e48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d130      	bne.n	8007eb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10a      	bne.n	8007e6c <prvProcessTimerOrBlockTask+0x3c>
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d806      	bhi.n	8007e6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e5e:	f7ff f913 	bl	8007088 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e62:	68f9      	ldr	r1, [r7, #12]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff ff91 	bl	8007d8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e6a:	e024      	b.n	8007eb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d008      	beq.n	8007e84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e72:	4b13      	ldr	r3, [pc, #76]	; (8007ec0 <prvProcessTimerOrBlockTask+0x90>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bf0c      	ite	eq
 8007e7c:	2301      	moveq	r3, #1
 8007e7e:	2300      	movne	r3, #0
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e84:	4b0f      	ldr	r3, [pc, #60]	; (8007ec4 <prvProcessTimerOrBlockTask+0x94>)
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	4619      	mov	r1, r3
 8007e92:	f7fe fe63 	bl	8006b5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e96:	f7ff f8f7 	bl	8007088 <xTaskResumeAll>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10a      	bne.n	8007eb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ea0:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <prvProcessTimerOrBlockTask+0x98>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
}
 8007eb0:	e001      	b.n	8007eb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007eb2:	f7ff f8e9 	bl	8007088 <xTaskResumeAll>
}
 8007eb6:	bf00      	nop
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20004590 	.word	0x20004590
 8007ec4:	20004594 	.word	0x20004594
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ed4:	4b0e      	ldr	r3, [pc, #56]	; (8007f10 <prvGetNextExpireTime+0x44>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	bf0c      	ite	eq
 8007ede:	2301      	moveq	r3, #1
 8007ee0:	2300      	movne	r3, #0
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d105      	bne.n	8007efe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ef2:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <prvGetNextExpireTime+0x44>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e001      	b.n	8007f02 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f02:	68fb      	ldr	r3, [r7, #12]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bc80      	pop	{r7}
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	2000458c 	.word	0x2000458c

08007f14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f1c:	f7ff f952 	bl	80071c4 <xTaskGetTickCount>
 8007f20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f22:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <prvSampleTimeNow+0x3c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d205      	bcs.n	8007f38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f2c:	f000 f908 	bl	8008140 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	e002      	b.n	8007f3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f3e:	4a04      	ldr	r2, [pc, #16]	; (8007f50 <prvSampleTimeNow+0x3c>)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f44:	68fb      	ldr	r3, [r7, #12]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	2000459c 	.word	0x2000459c

08007f54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d812      	bhi.n	8007fa0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d302      	bcc.n	8007f8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	e01b      	b.n	8007fc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f8e:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <prvInsertTimerInActiveList+0x7c>)
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f7fd fcb5 	bl	8005908 <vListInsert>
 8007f9e:	e012      	b.n	8007fc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d206      	bcs.n	8007fb6 <prvInsertTimerInActiveList+0x62>
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d302      	bcc.n	8007fb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	617b      	str	r3, [r7, #20]
 8007fb4:	e007      	b.n	8007fc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fb6:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <prvInsertTimerInActiveList+0x80>)
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	f7fd fca1 	bl	8005908 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007fc6:	697b      	ldr	r3, [r7, #20]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	20004590 	.word	0x20004590
 8007fd4:	2000458c 	.word	0x2000458c

08007fd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08e      	sub	sp, #56	; 0x38
 8007fdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fde:	e09d      	b.n	800811c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	da18      	bge.n	8008018 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007fe6:	1d3b      	adds	r3, r7, #4
 8007fe8:	3304      	adds	r3, #4
 8007fea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	61fb      	str	r3, [r7, #28]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800800e:	6850      	ldr	r0, [r2, #4]
 8008010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008012:	6892      	ldr	r2, [r2, #8]
 8008014:	4611      	mov	r1, r2
 8008016:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	db7e      	blt.n	800811c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	3304      	adds	r3, #4
 800802e:	4618      	mov	r0, r3
 8008030:	f7fd fca2 	bl	8005978 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008034:	463b      	mov	r3, r7
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff ff6c 	bl	8007f14 <prvSampleTimeNow>
 800803c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b09      	cmp	r3, #9
 8008042:	d86a      	bhi.n	800811a <prvProcessReceivedCommands+0x142>
 8008044:	a201      	add	r2, pc, #4	; (adr r2, 800804c <prvProcessReceivedCommands+0x74>)
 8008046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804a:	bf00      	nop
 800804c:	08008075 	.word	0x08008075
 8008050:	08008075 	.word	0x08008075
 8008054:	08008075 	.word	0x08008075
 8008058:	0800811d 	.word	0x0800811d
 800805c:	080080d1 	.word	0x080080d1
 8008060:	08008109 	.word	0x08008109
 8008064:	08008075 	.word	0x08008075
 8008068:	08008075 	.word	0x08008075
 800806c:	0800811d 	.word	0x0800811d
 8008070:	080080d1 	.word	0x080080d1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	18d1      	adds	r1, r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008082:	f7ff ff67 	bl	8007f54 <prvInsertTimerInActiveList>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d047      	beq.n	800811c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008092:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d13f      	bne.n	800811c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	441a      	add	r2, r3
 80080a4:	2300      	movs	r3, #0
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	2300      	movs	r3, #0
 80080aa:	2100      	movs	r1, #0
 80080ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ae:	f7ff fe1f 	bl	8007cf0 <xTimerGenericCommand>
 80080b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d130      	bne.n	800811c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	61bb      	str	r3, [r7, #24]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10a      	bne.n	80080f4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	617b      	str	r3, [r7, #20]
}
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	699a      	ldr	r2, [r3, #24]
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	18d1      	adds	r1, r2, r3
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008102:	f7ff ff27 	bl	8007f54 <prvInsertTimerInActiveList>
					break;
 8008106:	e009      	b.n	800811c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d104      	bne.n	800811c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008114:	f000 fb6e 	bl	80087f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008118:	e000      	b.n	800811c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800811a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800811c:	4b07      	ldr	r3, [pc, #28]	; (800813c <prvProcessReceivedCommands+0x164>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	1d39      	adds	r1, r7, #4
 8008122:	2200      	movs	r2, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe f8d7 	bl	80062d8 <xQueueReceive>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	f47f af57 	bne.w	8007fe0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008132:	bf00      	nop
 8008134:	bf00      	nop
 8008136:	3730      	adds	r7, #48	; 0x30
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20004594 	.word	0x20004594

08008140 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008146:	e045      	b.n	80081d4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008148:	4b2c      	ldr	r3, [pc, #176]	; (80081fc <prvSwitchTimerLists+0xbc>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008152:	4b2a      	ldr	r3, [pc, #168]	; (80081fc <prvSwitchTimerLists+0xbc>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3304      	adds	r3, #4
 8008160:	4618      	mov	r0, r3
 8008162:	f7fd fc09 	bl	8005978 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d12e      	bne.n	80081d4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4413      	add	r3, r2
 800817e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	429a      	cmp	r2, r3
 8008186:	d90e      	bls.n	80081a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008194:	4b19      	ldr	r3, [pc, #100]	; (80081fc <prvSwitchTimerLists+0xbc>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3304      	adds	r3, #4
 800819c:	4619      	mov	r1, r3
 800819e:	4610      	mov	r0, r2
 80081a0:	f7fd fbb2 	bl	8005908 <vListInsert>
 80081a4:	e016      	b.n	80081d4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081a6:	2300      	movs	r3, #0
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	2300      	movs	r3, #0
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	2100      	movs	r1, #0
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff fd9d 	bl	8007cf0 <xTimerGenericCommand>
 80081b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10a      	bne.n	80081d4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	603b      	str	r3, [r7, #0]
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081d4:	4b09      	ldr	r3, [pc, #36]	; (80081fc <prvSwitchTimerLists+0xbc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1b4      	bne.n	8008148 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081de:	4b07      	ldr	r3, [pc, #28]	; (80081fc <prvSwitchTimerLists+0xbc>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081e4:	4b06      	ldr	r3, [pc, #24]	; (8008200 <prvSwitchTimerLists+0xc0>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a04      	ldr	r2, [pc, #16]	; (80081fc <prvSwitchTimerLists+0xbc>)
 80081ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80081ec:	4a04      	ldr	r2, [pc, #16]	; (8008200 <prvSwitchTimerLists+0xc0>)
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	6013      	str	r3, [r2, #0]
}
 80081f2:	bf00      	nop
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	2000458c 	.word	0x2000458c
 8008200:	20004590 	.word	0x20004590

08008204 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800820a:	f000 f92f 	bl	800846c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800820e:	4b15      	ldr	r3, [pc, #84]	; (8008264 <prvCheckForValidListAndQueue+0x60>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d120      	bne.n	8008258 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008216:	4814      	ldr	r0, [pc, #80]	; (8008268 <prvCheckForValidListAndQueue+0x64>)
 8008218:	f7fd fb28 	bl	800586c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800821c:	4813      	ldr	r0, [pc, #76]	; (800826c <prvCheckForValidListAndQueue+0x68>)
 800821e:	f7fd fb25 	bl	800586c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008222:	4b13      	ldr	r3, [pc, #76]	; (8008270 <prvCheckForValidListAndQueue+0x6c>)
 8008224:	4a10      	ldr	r2, [pc, #64]	; (8008268 <prvCheckForValidListAndQueue+0x64>)
 8008226:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008228:	4b12      	ldr	r3, [pc, #72]	; (8008274 <prvCheckForValidListAndQueue+0x70>)
 800822a:	4a10      	ldr	r2, [pc, #64]	; (800826c <prvCheckForValidListAndQueue+0x68>)
 800822c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800822e:	2300      	movs	r3, #0
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	4b11      	ldr	r3, [pc, #68]	; (8008278 <prvCheckForValidListAndQueue+0x74>)
 8008234:	4a11      	ldr	r2, [pc, #68]	; (800827c <prvCheckForValidListAndQueue+0x78>)
 8008236:	2110      	movs	r1, #16
 8008238:	200a      	movs	r0, #10
 800823a:	f7fd fc2f 	bl	8005a9c <xQueueGenericCreateStatic>
 800823e:	4603      	mov	r3, r0
 8008240:	4a08      	ldr	r2, [pc, #32]	; (8008264 <prvCheckForValidListAndQueue+0x60>)
 8008242:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008244:	4b07      	ldr	r3, [pc, #28]	; (8008264 <prvCheckForValidListAndQueue+0x60>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <prvCheckForValidListAndQueue+0x60>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	490b      	ldr	r1, [pc, #44]	; (8008280 <prvCheckForValidListAndQueue+0x7c>)
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe fc30 	bl	8006ab8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008258:	f000 f938 	bl	80084cc <vPortExitCritical>
}
 800825c:	bf00      	nop
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20004594 	.word	0x20004594
 8008268:	20004564 	.word	0x20004564
 800826c:	20004578 	.word	0x20004578
 8008270:	2000458c 	.word	0x2000458c
 8008274:	20004590 	.word	0x20004590
 8008278:	20004640 	.word	0x20004640
 800827c:	200045a0 	.word	0x200045a0
 8008280:	08015928 	.word	0x08015928

08008284 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	3b04      	subs	r3, #4
 8008294:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800829c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3b04      	subs	r3, #4
 80082a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f023 0201 	bic.w	r2, r3, #1
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3b04      	subs	r3, #4
 80082b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082b4:	4a08      	ldr	r2, [pc, #32]	; (80082d8 <pxPortInitialiseStack+0x54>)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3b14      	subs	r3, #20
 80082be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3b20      	subs	r3, #32
 80082ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082cc:	68fb      	ldr	r3, [r7, #12]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bc80      	pop	{r7}
 80082d6:	4770      	bx	lr
 80082d8:	080082dd 	.word	0x080082dd

080082dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082e6:	4b12      	ldr	r3, [pc, #72]	; (8008330 <prvTaskExitError+0x54>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ee:	d00a      	beq.n	8008306 <prvTaskExitError+0x2a>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60fb      	str	r3, [r7, #12]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <prvTaskExitError+0x28>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	60bb      	str	r3, [r7, #8]
}
 8008318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800831a:	bf00      	nop
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0fc      	beq.n	800831c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	bc80      	pop	{r7}
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	20000014 	.word	0x20000014
	...

08008340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <pxCurrentTCBConst2>)
 8008342:	6819      	ldr	r1, [r3, #0]
 8008344:	6808      	ldr	r0, [r1, #0]
 8008346:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800834a:	f380 8809 	msr	PSP, r0
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f04f 0000 	mov.w	r0, #0
 8008356:	f380 8811 	msr	BASEPRI, r0
 800835a:	f04e 0e0d 	orr.w	lr, lr, #13
 800835e:	4770      	bx	lr

08008360 <pxCurrentTCBConst2>:
 8008360:	20004064 	.word	0x20004064
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop

08008368 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008368:	4806      	ldr	r0, [pc, #24]	; (8008384 <prvPortStartFirstTask+0x1c>)
 800836a:	6800      	ldr	r0, [r0, #0]
 800836c:	6800      	ldr	r0, [r0, #0]
 800836e:	f380 8808 	msr	MSP, r0
 8008372:	b662      	cpsie	i
 8008374:	b661      	cpsie	f
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	df00      	svc	0
 8008380:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008382:	bf00      	nop
 8008384:	e000ed08 	.word	0xe000ed08

08008388 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800838e:	4b32      	ldr	r3, [pc, #200]	; (8008458 <xPortStartScheduler+0xd0>)
 8008390:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	22ff      	movs	r2, #255	; 0xff
 800839e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	4b2a      	ldr	r3, [pc, #168]	; (800845c <xPortStartScheduler+0xd4>)
 80083b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083b6:	4b2a      	ldr	r3, [pc, #168]	; (8008460 <xPortStartScheduler+0xd8>)
 80083b8:	2207      	movs	r2, #7
 80083ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083bc:	e009      	b.n	80083d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80083be:	4b28      	ldr	r3, [pc, #160]	; (8008460 <xPortStartScheduler+0xd8>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	4a26      	ldr	r2, [pc, #152]	; (8008460 <xPortStartScheduler+0xd8>)
 80083c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083da:	2b80      	cmp	r3, #128	; 0x80
 80083dc:	d0ef      	beq.n	80083be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083de:	4b20      	ldr	r3, [pc, #128]	; (8008460 <xPortStartScheduler+0xd8>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f1c3 0307 	rsb	r3, r3, #7
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d00a      	beq.n	8008400 <xPortStartScheduler+0x78>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	60bb      	str	r3, [r7, #8]
}
 80083fc:	bf00      	nop
 80083fe:	e7fe      	b.n	80083fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008400:	4b17      	ldr	r3, [pc, #92]	; (8008460 <xPortStartScheduler+0xd8>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	4a16      	ldr	r2, [pc, #88]	; (8008460 <xPortStartScheduler+0xd8>)
 8008408:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800840a:	4b15      	ldr	r3, [pc, #84]	; (8008460 <xPortStartScheduler+0xd8>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008412:	4a13      	ldr	r2, [pc, #76]	; (8008460 <xPortStartScheduler+0xd8>)
 8008414:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	b2da      	uxtb	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800841e:	4b11      	ldr	r3, [pc, #68]	; (8008464 <xPortStartScheduler+0xdc>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a10      	ldr	r2, [pc, #64]	; (8008464 <xPortStartScheduler+0xdc>)
 8008424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008428:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800842a:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <xPortStartScheduler+0xdc>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a0d      	ldr	r2, [pc, #52]	; (8008464 <xPortStartScheduler+0xdc>)
 8008430:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008434:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008436:	f000 f8b9 	bl	80085ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800843a:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <xPortStartScheduler+0xe0>)
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008440:	f7ff ff92 	bl	8008368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008444:	f7fe ff9c 	bl	8007380 <vTaskSwitchContext>
	prvTaskExitError();
 8008448:	f7ff ff48 	bl	80082dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	e000e400 	.word	0xe000e400
 800845c:	20004690 	.word	0x20004690
 8008460:	20004694 	.word	0x20004694
 8008464:	e000ed20 	.word	0xe000ed20
 8008468:	20000014 	.word	0x20000014

0800846c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	607b      	str	r3, [r7, #4]
}
 8008484:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008486:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <vPortEnterCritical+0x58>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3301      	adds	r3, #1
 800848c:	4a0d      	ldr	r2, [pc, #52]	; (80084c4 <vPortEnterCritical+0x58>)
 800848e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008490:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <vPortEnterCritical+0x58>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d10f      	bne.n	80084b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008498:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <vPortEnterCritical+0x5c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	603b      	str	r3, [r7, #0]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <vPortEnterCritical+0x4a>
	}
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	bc80      	pop	{r7}
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20000014 	.word	0x20000014
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084d2:	4b11      	ldr	r3, [pc, #68]	; (8008518 <vPortExitCritical+0x4c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <vPortExitCritical+0x24>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	607b      	str	r3, [r7, #4]
}
 80084ec:	bf00      	nop
 80084ee:	e7fe      	b.n	80084ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80084f0:	4b09      	ldr	r3, [pc, #36]	; (8008518 <vPortExitCritical+0x4c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	4a08      	ldr	r2, [pc, #32]	; (8008518 <vPortExitCritical+0x4c>)
 80084f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084fa:	4b07      	ldr	r3, [pc, #28]	; (8008518 <vPortExitCritical+0x4c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d105      	bne.n	800850e <vPortExitCritical+0x42>
 8008502:	2300      	movs	r3, #0
 8008504:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	f383 8811 	msr	BASEPRI, r3
}
 800850c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	bc80      	pop	{r7}
 8008516:	4770      	bx	lr
 8008518:	20000014 	.word	0x20000014
 800851c:	00000000 	.word	0x00000000

08008520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008520:	f3ef 8009 	mrs	r0, PSP
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	4b0d      	ldr	r3, [pc, #52]	; (8008560 <pxCurrentTCBConst>)
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008530:	6010      	str	r0, [r2, #0]
 8008532:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008536:	f04f 0050 	mov.w	r0, #80	; 0x50
 800853a:	f380 8811 	msr	BASEPRI, r0
 800853e:	f7fe ff1f 	bl	8007380 <vTaskSwitchContext>
 8008542:	f04f 0000 	mov.w	r0, #0
 8008546:	f380 8811 	msr	BASEPRI, r0
 800854a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800854e:	6819      	ldr	r1, [r3, #0]
 8008550:	6808      	ldr	r0, [r1, #0]
 8008552:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008556:	f380 8809 	msr	PSP, r0
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	4770      	bx	lr

08008560 <pxCurrentTCBConst>:
 8008560:	20004064 	.word	0x20004064
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	607b      	str	r3, [r7, #4]
}
 8008580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008582:	f7fe fe3f 	bl	8007204 <xTaskIncrementTick>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800858c:	4b06      	ldr	r3, [pc, #24]	; (80085a8 <SysTick_Handler+0x40>)
 800858e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	2300      	movs	r3, #0
 8008596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	f383 8811 	msr	BASEPRI, r3
}
 800859e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	e000ed04 	.word	0xe000ed04

080085ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085ac:	b480      	push	{r7}
 80085ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085b0:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <vPortSetupTimerInterrupt+0x30>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085b6:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <vPortSetupTimerInterrupt+0x34>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085bc:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <vPortSetupTimerInterrupt+0x38>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a09      	ldr	r2, [pc, #36]	; (80085e8 <vPortSetupTimerInterrupt+0x3c>)
 80085c2:	fba2 2303 	umull	r2, r3, r2, r3
 80085c6:	099b      	lsrs	r3, r3, #6
 80085c8:	4a08      	ldr	r2, [pc, #32]	; (80085ec <vPortSetupTimerInterrupt+0x40>)
 80085ca:	3b01      	subs	r3, #1
 80085cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085ce:	4b03      	ldr	r3, [pc, #12]	; (80085dc <vPortSetupTimerInterrupt+0x30>)
 80085d0:	2207      	movs	r2, #7
 80085d2:	601a      	str	r2, [r3, #0]
}
 80085d4:	bf00      	nop
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bc80      	pop	{r7}
 80085da:	4770      	bx	lr
 80085dc:	e000e010 	.word	0xe000e010
 80085e0:	e000e018 	.word	0xe000e018
 80085e4:	20000008 	.word	0x20000008
 80085e8:	10624dd3 	.word	0x10624dd3
 80085ec:	e000e014 	.word	0xe000e014

080085f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085f6:	f3ef 8305 	mrs	r3, IPSR
 80085fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b0f      	cmp	r3, #15
 8008600:	d914      	bls.n	800862c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008602:	4a16      	ldr	r2, [pc, #88]	; (800865c <vPortValidateInterruptPriority+0x6c>)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4413      	add	r3, r2
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800860c:	4b14      	ldr	r3, [pc, #80]	; (8008660 <vPortValidateInterruptPriority+0x70>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	7afa      	ldrb	r2, [r7, #11]
 8008612:	429a      	cmp	r2, r3
 8008614:	d20a      	bcs.n	800862c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	607b      	str	r3, [r7, #4]
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800862c:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <vPortValidateInterruptPriority+0x74>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <vPortValidateInterruptPriority+0x78>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	429a      	cmp	r2, r3
 800863a:	d90a      	bls.n	8008652 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	603b      	str	r3, [r7, #0]
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <vPortValidateInterruptPriority+0x60>
	}
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr
 800865c:	e000e3f0 	.word	0xe000e3f0
 8008660:	20004690 	.word	0x20004690
 8008664:	e000ed0c 	.word	0xe000ed0c
 8008668:	20004694 	.word	0x20004694

0800866c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	; 0x28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008674:	2300      	movs	r3, #0
 8008676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008678:	f7fe fcf8 	bl	800706c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800867c:	4b58      	ldr	r3, [pc, #352]	; (80087e0 <pvPortMalloc+0x174>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008684:	f000 f910 	bl	80088a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008688:	4b56      	ldr	r3, [pc, #344]	; (80087e4 <pvPortMalloc+0x178>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4013      	ands	r3, r2
 8008690:	2b00      	cmp	r3, #0
 8008692:	f040 808e 	bne.w	80087b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01d      	beq.n	80086d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800869c:	2208      	movs	r2, #8
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d014      	beq.n	80086d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f023 0307 	bic.w	r3, r3, #7
 80086b4:	3308      	adds	r3, #8
 80086b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f003 0307 	and.w	r3, r3, #7
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <pvPortMalloc+0x6c>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	617b      	str	r3, [r7, #20]
}
 80086d4:	bf00      	nop
 80086d6:	e7fe      	b.n	80086d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d069      	beq.n	80087b2 <pvPortMalloc+0x146>
 80086de:	4b42      	ldr	r3, [pc, #264]	; (80087e8 <pvPortMalloc+0x17c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d864      	bhi.n	80087b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086e8:	4b40      	ldr	r3, [pc, #256]	; (80087ec <pvPortMalloc+0x180>)
 80086ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086ec:	4b3f      	ldr	r3, [pc, #252]	; (80087ec <pvPortMalloc+0x180>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086f2:	e004      	b.n	80086fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	429a      	cmp	r2, r3
 8008706:	d903      	bls.n	8008710 <pvPortMalloc+0xa4>
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1f1      	bne.n	80086f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008710:	4b33      	ldr	r3, [pc, #204]	; (80087e0 <pvPortMalloc+0x174>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008716:	429a      	cmp	r2, r3
 8008718:	d04b      	beq.n	80087b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2208      	movs	r2, #8
 8008720:	4413      	add	r3, r2
 8008722:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	1ad2      	subs	r2, r2, r3
 8008734:	2308      	movs	r3, #8
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	429a      	cmp	r2, r3
 800873a:	d91f      	bls.n	800877c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4413      	add	r3, r2
 8008742:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00a      	beq.n	8008764 <pvPortMalloc+0xf8>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	613b      	str	r3, [r7, #16]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	685a      	ldr	r2, [r3, #4]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	1ad2      	subs	r2, r2, r3
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008776:	69b8      	ldr	r0, [r7, #24]
 8008778:	f000 f8f8 	bl	800896c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800877c:	4b1a      	ldr	r3, [pc, #104]	; (80087e8 <pvPortMalloc+0x17c>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	4a18      	ldr	r2, [pc, #96]	; (80087e8 <pvPortMalloc+0x17c>)
 8008788:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800878a:	4b17      	ldr	r3, [pc, #92]	; (80087e8 <pvPortMalloc+0x17c>)
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	4b18      	ldr	r3, [pc, #96]	; (80087f0 <pvPortMalloc+0x184>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	429a      	cmp	r2, r3
 8008794:	d203      	bcs.n	800879e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008796:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <pvPortMalloc+0x17c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a15      	ldr	r2, [pc, #84]	; (80087f0 <pvPortMalloc+0x184>)
 800879c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	4b10      	ldr	r3, [pc, #64]	; (80087e4 <pvPortMalloc+0x178>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	431a      	orrs	r2, r3
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	2200      	movs	r2, #0
 80087b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087b2:	f7fe fc69 	bl	8007088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	f003 0307 	and.w	r3, r3, #7
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00a      	beq.n	80087d6 <pvPortMalloc+0x16a>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	60fb      	str	r3, [r7, #12]
}
 80087d2:	bf00      	nop
 80087d4:	e7fe      	b.n	80087d4 <pvPortMalloc+0x168>
	return pvReturn;
 80087d6:	69fb      	ldr	r3, [r7, #28]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3728      	adds	r7, #40	; 0x28
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	200082a0 	.word	0x200082a0
 80087e4:	200082ac 	.word	0x200082ac
 80087e8:	200082a4 	.word	0x200082a4
 80087ec:	20008298 	.word	0x20008298
 80087f0:	200082a8 	.word	0x200082a8

080087f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d048      	beq.n	8008898 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008806:	2308      	movs	r3, #8
 8008808:	425b      	negs	r3, r3
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4413      	add	r3, r2
 800880e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	4b21      	ldr	r3, [pc, #132]	; (80088a0 <vPortFree+0xac>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4013      	ands	r3, r2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <vPortFree+0x44>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	60fb      	str	r3, [r7, #12]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00a      	beq.n	8008856 <vPortFree+0x62>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	60bb      	str	r3, [r7, #8]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <vPortFree+0xac>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4013      	ands	r3, r2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d019      	beq.n	8008898 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d115      	bne.n	8008898 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <vPortFree+0xac>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	43db      	mvns	r3, r3
 8008876:	401a      	ands	r2, r3
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800887c:	f7fe fbf6 	bl	800706c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	4b07      	ldr	r3, [pc, #28]	; (80088a4 <vPortFree+0xb0>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4413      	add	r3, r2
 800888a:	4a06      	ldr	r2, [pc, #24]	; (80088a4 <vPortFree+0xb0>)
 800888c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800888e:	6938      	ldr	r0, [r7, #16]
 8008890:	f000 f86c 	bl	800896c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008894:	f7fe fbf8 	bl	8007088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008898:	bf00      	nop
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	200082ac 	.word	0x200082ac
 80088a4:	200082a4 	.word	0x200082a4

080088a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088ae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80088b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088b4:	4b27      	ldr	r3, [pc, #156]	; (8008954 <prvHeapInit+0xac>)
 80088b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00c      	beq.n	80088dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3307      	adds	r3, #7
 80088c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0307 	bic.w	r3, r3, #7
 80088ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	4a1f      	ldr	r2, [pc, #124]	; (8008954 <prvHeapInit+0xac>)
 80088d8:	4413      	add	r3, r2
 80088da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088e0:	4a1d      	ldr	r2, [pc, #116]	; (8008958 <prvHeapInit+0xb0>)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088e6:	4b1c      	ldr	r3, [pc, #112]	; (8008958 <prvHeapInit+0xb0>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	4413      	add	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088f4:	2208      	movs	r2, #8
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	1a9b      	subs	r3, r3, r2
 80088fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0307 	bic.w	r3, r3, #7
 8008902:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4a15      	ldr	r2, [pc, #84]	; (800895c <prvHeapInit+0xb4>)
 8008908:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800890a:	4b14      	ldr	r3, [pc, #80]	; (800895c <prvHeapInit+0xb4>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2200      	movs	r2, #0
 8008910:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008912:	4b12      	ldr	r3, [pc, #72]	; (800895c <prvHeapInit+0xb4>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2200      	movs	r2, #0
 8008918:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	1ad2      	subs	r2, r2, r3
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008928:	4b0c      	ldr	r3, [pc, #48]	; (800895c <prvHeapInit+0xb4>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	4a0a      	ldr	r2, [pc, #40]	; (8008960 <prvHeapInit+0xb8>)
 8008936:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	4a09      	ldr	r2, [pc, #36]	; (8008964 <prvHeapInit+0xbc>)
 800893e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008940:	4b09      	ldr	r3, [pc, #36]	; (8008968 <prvHeapInit+0xc0>)
 8008942:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008946:	601a      	str	r2, [r3, #0]
}
 8008948:	bf00      	nop
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	bc80      	pop	{r7}
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20004698 	.word	0x20004698
 8008958:	20008298 	.word	0x20008298
 800895c:	200082a0 	.word	0x200082a0
 8008960:	200082a8 	.word	0x200082a8
 8008964:	200082a4 	.word	0x200082a4
 8008968:	200082ac 	.word	0x200082ac

0800896c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008974:	4b27      	ldr	r3, [pc, #156]	; (8008a14 <prvInsertBlockIntoFreeList+0xa8>)
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	e002      	b.n	8008980 <prvInsertBlockIntoFreeList+0x14>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	429a      	cmp	r2, r3
 8008988:	d8f7      	bhi.n	800897a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	4413      	add	r3, r2
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	429a      	cmp	r2, r3
 800899a:	d108      	bne.n	80089ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	441a      	add	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	441a      	add	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d118      	bne.n	80089f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <prvInsertBlockIntoFreeList+0xac>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d00d      	beq.n	80089ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	441a      	add	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	e008      	b.n	80089fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089ea:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <prvInsertBlockIntoFreeList+0xac>)
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	e003      	b.n	80089fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d002      	beq.n	8008a0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a0a:	bf00      	nop
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bc80      	pop	{r7}
 8008a12:	4770      	bx	lr
 8008a14:	20008298 	.word	0x20008298
 8008a18:	200082a0 	.word	0x200082a0

08008a1c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f002 f8fd 	bl	800ac30 <tcpip_send_msg_wait_sem>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d103      	bne.n	8008a4a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008a48:	e001      	b.n	8008a4e <netconn_apimsg+0x32>
  }
  return err;
 8008a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08a      	sub	sp, #40	; 0x28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	603a      	str	r2, [r7, #0]
 8008a62:	71fb      	strb	r3, [r7, #7]
 8008a64:	460b      	mov	r3, r1
 8008a66:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 ff83 	bl	8009978 <netconn_alloc>
 8008a72:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d054      	beq.n	8008b24 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008a7a:	79bb      	ldrb	r3, [r7, #6]
 8008a7c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	4619      	mov	r1, r3
 8008a88:	4829      	ldr	r0, [pc, #164]	; (8008b30 <netconn_new_with_proto_and_callback+0xd8>)
 8008a8a:	f7ff ffc7 	bl	8008a1c <netconn_apimsg>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8008a94:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d043      	beq.n	8008b24 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <netconn_new_with_proto_and_callback+0x58>
 8008aa4:	4b23      	ldr	r3, [pc, #140]	; (8008b34 <netconn_new_with_proto_and_callback+0xdc>)
 8008aa6:	2289      	movs	r2, #137	; 0x89
 8008aa8:	4923      	ldr	r1, [pc, #140]	; (8008b38 <netconn_new_with_proto_and_callback+0xe0>)
 8008aaa:	4824      	ldr	r0, [pc, #144]	; (8008b3c <netconn_new_with_proto_and_callback+0xe4>)
 8008aac:	f00b ffd4 	bl	8014a58 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	3310      	adds	r3, #16
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f00b fde9 	bl	801468c <sys_mbox_valid>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d105      	bne.n	8008acc <netconn_new_with_proto_and_callback+0x74>
 8008ac0:	4b1c      	ldr	r3, [pc, #112]	; (8008b34 <netconn_new_with_proto_and_callback+0xdc>)
 8008ac2:	228a      	movs	r2, #138	; 0x8a
 8008ac4:	491e      	ldr	r1, [pc, #120]	; (8008b40 <netconn_new_with_proto_and_callback+0xe8>)
 8008ac6:	481d      	ldr	r0, [pc, #116]	; (8008b3c <netconn_new_with_proto_and_callback+0xe4>)
 8008ac8:	f00b ffc6 	bl	8014a58 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	3314      	adds	r3, #20
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f00b fddb 	bl	801468c <sys_mbox_valid>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d005      	beq.n	8008ae8 <netconn_new_with_proto_and_callback+0x90>
 8008adc:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <netconn_new_with_proto_and_callback+0xdc>)
 8008ade:	228c      	movs	r2, #140	; 0x8c
 8008ae0:	4918      	ldr	r1, [pc, #96]	; (8008b44 <netconn_new_with_proto_and_callback+0xec>)
 8008ae2:	4816      	ldr	r0, [pc, #88]	; (8008b3c <netconn_new_with_proto_and_callback+0xe4>)
 8008ae4:	f00b ffb8 	bl	8014a58 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	330c      	adds	r3, #12
 8008aec:	4618      	mov	r0, r3
 8008aee:	f00b fe59 	bl	80147a4 <sys_sem_valid>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d105      	bne.n	8008b04 <netconn_new_with_proto_and_callback+0xac>
 8008af8:	4b0e      	ldr	r3, [pc, #56]	; (8008b34 <netconn_new_with_proto_and_callback+0xdc>)
 8008afa:	228f      	movs	r2, #143	; 0x8f
 8008afc:	4912      	ldr	r1, [pc, #72]	; (8008b48 <netconn_new_with_proto_and_callback+0xf0>)
 8008afe:	480f      	ldr	r0, [pc, #60]	; (8008b3c <netconn_new_with_proto_and_callback+0xe4>)
 8008b00:	f00b ffaa 	bl	8014a58 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	330c      	adds	r3, #12
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f00b fe3e 	bl	801478a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	3310      	adds	r3, #16
 8008b12:	4618      	mov	r0, r3
 8008b14:	f00b fd30 	bl	8014578 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b1a:	2007      	movs	r0, #7
 8008b1c:	f002 fd26 	bl	800b56c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	e000      	b.n	8008b26 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3728      	adds	r7, #40	; 0x28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	08009921 	.word	0x08009921
 8008b34:	08015930 	.word	0x08015930
 8008b38:	08015964 	.word	0x08015964
 8008b3c:	08015988 	.word	0x08015988
 8008b40:	080159b0 	.word	0x080159b0
 8008b44:	080159c8 	.word	0x080159c8
 8008b48:	080159ec 	.word	0x080159ec

08008b4c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <netconn_delete+0x12>
    return ERR_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e016      	b.n	8008b8c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008b62:	2329      	movs	r3, #41	; 0x29
 8008b64:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008b66:	f107 0308 	add.w	r3, r7, #8
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	4809      	ldr	r0, [pc, #36]	; (8008b94 <netconn_delete+0x48>)
 8008b6e:	f7ff ff55 	bl	8008a1c <netconn_apimsg>
 8008b72:	4603      	mov	r3, r0
 8008b74:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008b76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <netconn_delete+0x38>
    return err;
 8008b7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008b82:	e003      	b.n	8008b8c <netconn_delete+0x40>
  }

  netconn_free(conn);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 ff67 	bl	8009a58 <netconn_free>

  return ERR_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3720      	adds	r7, #32
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	08009ee5 	.word	0x08009ee5

08008b98 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08a      	sub	sp, #40	; 0x28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d108      	bne.n	8008bbe <netconn_bind+0x26>
 8008bac:	4b11      	ldr	r3, [pc, #68]	; (8008bf4 <netconn_bind+0x5c>)
 8008bae:	22ff      	movs	r2, #255	; 0xff
 8008bb0:	4911      	ldr	r1, [pc, #68]	; (8008bf8 <netconn_bind+0x60>)
 8008bb2:	4812      	ldr	r0, [pc, #72]	; (8008bfc <netconn_bind+0x64>)
 8008bb4:	f00b ff50 	bl	8014a58 <iprintf>
 8008bb8:	f06f 030f 	mvn.w	r3, #15
 8008bbc:	e015      	b.n	8008bea <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8008bc4:	4b0e      	ldr	r3, [pc, #56]	; (8008c00 <netconn_bind+0x68>)
 8008bc6:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008bd0:	88fb      	ldrh	r3, [r7, #6]
 8008bd2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008bd4:	f107 0310 	add.w	r3, r7, #16
 8008bd8:	4619      	mov	r1, r3
 8008bda:	480a      	ldr	r0, [pc, #40]	; (8008c04 <netconn_bind+0x6c>)
 8008bdc:	f7ff ff1e 	bl	8008a1c <netconn_apimsg>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8008be6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3728      	adds	r7, #40	; 0x28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	08015930 	.word	0x08015930
 8008bf8:	08015a68 	.word	0x08015a68
 8008bfc:	08015988 	.word	0x08015988
 8008c00:	08017f88 	.word	0x08017f88
 8008c04:	0800a0e9 	.word	0x0800a0e9

08008c08 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d109      	bne.n	8008c2e <netconn_listen_with_backlog+0x26>
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <netconn_listen_with_backlog+0x48>)
 8008c1c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008c20:	490c      	ldr	r1, [pc, #48]	; (8008c54 <netconn_listen_with_backlog+0x4c>)
 8008c22:	480d      	ldr	r0, [pc, #52]	; (8008c58 <netconn_listen_with_backlog+0x50>)
 8008c24:	f00b ff18 	bl	8014a58 <iprintf>
 8008c28:	f06f 030f 	mvn.w	r3, #15
 8008c2c:	e00b      	b.n	8008c46 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008c32:	f107 0308 	add.w	r3, r7, #8
 8008c36:	4619      	mov	r1, r3
 8008c38:	4808      	ldr	r0, [pc, #32]	; (8008c5c <netconn_listen_with_backlog+0x54>)
 8008c3a:	f7ff feef 	bl	8008a1c <netconn_apimsg>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8008c42:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3720      	adds	r7, #32
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	08015930 	.word	0x08015930
 8008c54:	08015ac8 	.word	0x08015ac8
 8008c58:	08015988 	.word	0x08015988
 8008c5c:	0800a1a9 	.word	0x0800a1a9

08008c60 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d109      	bne.n	8008c84 <netconn_accept+0x24>
 8008c70:	4b34      	ldr	r3, [pc, #208]	; (8008d44 <netconn_accept+0xe4>)
 8008c72:	f240 128d 	movw	r2, #397	; 0x18d
 8008c76:	4934      	ldr	r1, [pc, #208]	; (8008d48 <netconn_accept+0xe8>)
 8008c78:	4834      	ldr	r0, [pc, #208]	; (8008d4c <netconn_accept+0xec>)
 8008c7a:	f00b feed 	bl	8014a58 <iprintf>
 8008c7e:	f06f 030f 	mvn.w	r3, #15
 8008c82:	e05b      	b.n	8008d3c <netconn_accept+0xdc>
  *new_conn = NULL;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d109      	bne.n	8008ca4 <netconn_accept+0x44>
 8008c90:	4b2c      	ldr	r3, [pc, #176]	; (8008d44 <netconn_accept+0xe4>)
 8008c92:	f240 128f 	movw	r2, #399	; 0x18f
 8008c96:	492e      	ldr	r1, [pc, #184]	; (8008d50 <netconn_accept+0xf0>)
 8008c98:	482c      	ldr	r0, [pc, #176]	; (8008d4c <netconn_accept+0xec>)
 8008c9a:	f00b fedd 	bl	8014a58 <iprintf>
 8008c9e:	f06f 030f 	mvn.w	r3, #15
 8008ca2:	e04b      	b.n	8008d3c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008caa:	f113 0f0c 	cmn.w	r3, #12
 8008cae:	da03      	bge.n	8008cb8 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008cb6:	e041      	b.n	8008d3c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3314      	adds	r3, #20
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f00b fce5 	bl	801468c <sys_mbox_valid>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <netconn_accept+0x6e>
    return ERR_CLSD;
 8008cc8:	f06f 030e 	mvn.w	r3, #14
 8008ccc:	e036      	b.n	8008d3c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3314      	adds	r3, #20
 8008cd2:	f107 010c 	add.w	r1, r7, #12
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f00b fc8f 	bl	80145fc <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d005      	beq.n	8008cf6 <netconn_accept+0x96>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4a16      	ldr	r2, [pc, #88]	; (8008d54 <netconn_accept+0xf4>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d102      	bne.n	8008d04 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 8008cfe:	f06f 030c 	mvn.w	r3, #12
 8008d02:	e01b      	b.n	8008d3c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d114      	bne.n	8008d34 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00e      	beq.n	8008d2e <netconn_accept+0xce>
 8008d10:	f00b fdc2 	bl	8014898 <sys_arch_protect>
 8008d14:	6138      	str	r0, [r7, #16]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008d1c:	f113 0f0c 	cmn.w	r3, #12
 8008d20:	db02      	blt.n	8008d28 <netconn_accept+0xc8>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	22f1      	movs	r2, #241	; 0xf1
 8008d26:	721a      	strb	r2, [r3, #8]
 8008d28:	6938      	ldr	r0, [r7, #16]
 8008d2a:	f00b fdc3 	bl	80148b4 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 8008d2e:	f06f 030e 	mvn.w	r3, #14
 8008d32:	e003      	b.n	8008d3c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008d3a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	08015930 	.word	0x08015930
 8008d48:	08015ae8 	.word	0x08015ae8
 8008d4c:	08015988 	.word	0x08015988
 8008d50:	08015b08 	.word	0x08015b08
 8008d54:	200082b0 	.word	0x200082b0

08008d58 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	; 0x28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <netconn_recv_data+0x28>
 8008d6c:	4b5c      	ldr	r3, [pc, #368]	; (8008ee0 <netconn_recv_data+0x188>)
 8008d6e:	f240 12e7 	movw	r2, #487	; 0x1e7
 8008d72:	495c      	ldr	r1, [pc, #368]	; (8008ee4 <netconn_recv_data+0x18c>)
 8008d74:	485c      	ldr	r0, [pc, #368]	; (8008ee8 <netconn_recv_data+0x190>)
 8008d76:	f00b fe6f 	bl	8014a58 <iprintf>
 8008d7a:	f06f 030f 	mvn.w	r3, #15
 8008d7e:	e0aa      	b.n	8008ed6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d109      	bne.n	8008da0 <netconn_recv_data+0x48>
 8008d8c:	4b54      	ldr	r3, [pc, #336]	; (8008ee0 <netconn_recv_data+0x188>)
 8008d8e:	f240 12e9 	movw	r2, #489	; 0x1e9
 8008d92:	4956      	ldr	r1, [pc, #344]	; (8008eec <netconn_recv_data+0x194>)
 8008d94:	4854      	ldr	r0, [pc, #336]	; (8008ee8 <netconn_recv_data+0x190>)
 8008d96:	f00b fe5f 	bl	8014a58 <iprintf>
 8008d9a:	f06f 030f 	mvn.w	r3, #15
 8008d9e:	e09a      	b.n	8008ed6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008da8:	2b10      	cmp	r3, #16
 8008daa:	d115      	bne.n	8008dd8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3310      	adds	r3, #16
 8008db0:	4618      	mov	r0, r3
 8008db2:	f00b fc6b 	bl	801468c <sys_mbox_valid>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10d      	bne.n	8008dd8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3314      	adds	r3, #20
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f00b fc63 	bl	801468c <sys_mbox_valid>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <netconn_recv_data+0x7a>
 8008dcc:	f06f 030a 	mvn.w	r3, #10
 8008dd0:	e081      	b.n	8008ed6 <netconn_recv_data+0x17e>
 8008dd2:	f06f 030e 	mvn.w	r3, #14
 8008dd6:	e07e      	b.n	8008ed6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3310      	adds	r3, #16
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f00b fc55 	bl	801468c <sys_mbox_valid>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d109      	bne.n	8008dfc <netconn_recv_data+0xa4>
 8008de8:	4b3d      	ldr	r3, [pc, #244]	; (8008ee0 <netconn_recv_data+0x188>)
 8008dea:	f240 12f5 	movw	r2, #501	; 0x1f5
 8008dee:	4940      	ldr	r1, [pc, #256]	; (8008ef0 <netconn_recv_data+0x198>)
 8008df0:	483d      	ldr	r0, [pc, #244]	; (8008ee8 <netconn_recv_data+0x190>)
 8008df2:	f00b fe31 	bl	8014a58 <iprintf>
 8008df6:	f06f 030a 	mvn.w	r3, #10
 8008dfa:	e06c      	b.n	8008ed6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008e02:	f113 0f0c 	cmn.w	r3, #12
 8008e06:	da03      	bge.n	8008e10 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008e0e:	e062      	b.n	8008ed6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3310      	adds	r3, #16
 8008e14:	f107 0120 	add.w	r1, r7, #32
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f00b fbee 	bl	80145fc <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e28:	2b10      	cmp	r3, #16
 8008e2a:	d138      	bne.n	8008e9e <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	891b      	ldrh	r3, [r3, #8]
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e001      	b.n	8008e42 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8008e42:	f107 030c 	add.w	r3, r7, #12
 8008e46:	4619      	mov	r1, r3
 8008e48:	482a      	ldr	r0, [pc, #168]	; (8008ef4 <netconn_recv_data+0x19c>)
 8008e4a:	f7ff fde7 	bl	8008a1c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d120      	bne.n	8008e96 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d005      	beq.n	8008e68 <netconn_recv_data+0x110>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e60:	2200      	movs	r2, #0
 8008e62:	2101      	movs	r1, #1
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10b      	bne.n	8008e88 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <netconn_recv_data+0x12a>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008e80:	e029      	b.n	8008ed6 <netconn_recv_data+0x17e>
 8008e82:	f06f 030d 	mvn.w	r3, #13
 8008e86:	e026      	b.n	8008ed6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008e88:	2101      	movs	r1, #1
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f926 	bl	80090dc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008e90:	f06f 030e 	mvn.w	r3, #14
 8008e94:	e01f      	b.n	8008ed6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	891b      	ldrh	r3, [r3, #8]
 8008e9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008e9c:	e00d      	b.n	8008eba <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d106      	bne.n	8008eb2 <netconn_recv_data+0x15a>
 8008ea4:	4b0e      	ldr	r3, [pc, #56]	; (8008ee0 <netconn_recv_data+0x188>)
 8008ea6:	f240 223e 	movw	r2, #574	; 0x23e
 8008eaa:	4913      	ldr	r1, [pc, #76]	; (8008ef8 <netconn_recv_data+0x1a0>)
 8008eac:	480e      	ldr	r0, [pc, #56]	; (8008ee8 <netconn_recv_data+0x190>)
 8008eae:	f00b fdd3 	bl	8014a58 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	891b      	ldrh	r3, [r3, #8]
 8008eb8:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d005      	beq.n	8008ece <netconn_recv_data+0x176>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008ec8:	2101      	movs	r1, #1
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008ece:	6a3a      	ldr	r2, [r7, #32]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3728      	adds	r7, #40	; 0x28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	08015930 	.word	0x08015930
 8008ee4:	08015b28 	.word	0x08015b28
 8008ee8:	08015988 	.word	0x08015988
 8008eec:	08015b48 	.word	0x08015b48
 8008ef0:	08015b64 	.word	0x08015b64
 8008ef4:	0800a32d 	.word	0x0800a32d
 8008ef8:	08015b84 	.word	0x08015b84

08008efc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d109      	bne.n	8008f24 <netconn_recv+0x28>
 8008f10:	4b31      	ldr	r3, [pc, #196]	; (8008fd8 <netconn_recv+0xdc>)
 8008f12:	f44f 721d 	mov.w	r2, #628	; 0x274
 8008f16:	4931      	ldr	r1, [pc, #196]	; (8008fdc <netconn_recv+0xe0>)
 8008f18:	4831      	ldr	r0, [pc, #196]	; (8008fe0 <netconn_recv+0xe4>)
 8008f1a:	f00b fd9d 	bl	8014a58 <iprintf>
 8008f1e:	f06f 030f 	mvn.w	r3, #15
 8008f22:	e054      	b.n	8008fce <netconn_recv+0xd2>
  *new_buf = NULL;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d109      	bne.n	8008f44 <netconn_recv+0x48>
 8008f30:	4b29      	ldr	r3, [pc, #164]	; (8008fd8 <netconn_recv+0xdc>)
 8008f32:	f240 2276 	movw	r2, #630	; 0x276
 8008f36:	492b      	ldr	r1, [pc, #172]	; (8008fe4 <netconn_recv+0xe8>)
 8008f38:	4829      	ldr	r0, [pc, #164]	; (8008fe0 <netconn_recv+0xe4>)
 8008f3a:	f00b fd8d 	bl	8014a58 <iprintf>
 8008f3e:	f06f 030f 	mvn.w	r3, #15
 8008f42:	e044      	b.n	8008fce <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f4c:	2b10      	cmp	r3, #16
 8008f4e:	d139      	bne.n	8008fc4 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008f50:	2300      	movs	r3, #0
 8008f52:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008f54:	2006      	movs	r0, #6
 8008f56:	f002 fab7 	bl	800b4c8 <memp_malloc>
 8008f5a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d102      	bne.n	8008f68 <netconn_recv+0x6c>
      return ERR_MEM;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295
 8008f66:	e032      	b.n	8008fce <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8008f68:	f107 030c 	add.w	r3, r7, #12
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7ff fef2 	bl	8008d58 <netconn_recv_data>
 8008f74:	4603      	mov	r3, r0
 8008f76:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008f78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d006      	beq.n	8008f8e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 8008f80:	6979      	ldr	r1, [r7, #20]
 8008f82:	2006      	movs	r0, #6
 8008f84:	f002 faf2 	bl	800b56c <memp_free>
      return err;
 8008f88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f8c:	e01f      	b.n	8008fce <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d106      	bne.n	8008fa2 <netconn_recv+0xa6>
 8008f94:	4b10      	ldr	r3, [pc, #64]	; (8008fd8 <netconn_recv+0xdc>)
 8008f96:	f240 228a 	movw	r2, #650	; 0x28a
 8008f9a:	4913      	ldr	r1, [pc, #76]	; (8008fe8 <netconn_recv+0xec>)
 8008f9c:	4810      	ldr	r0, [pc, #64]	; (8008fe0 <netconn_recv+0xe4>)
 8008f9e:	f00b fd5b 	bl	8014a58 <iprintf>

    buf->p = p;
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e004      	b.n	8008fce <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff fec6 	bl	8008d58 <netconn_recv_data>
 8008fcc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	08015930 	.word	0x08015930
 8008fdc:	08015b28 	.word	0x08015b28
 8008fe0:	08015988 	.word	0x08015988
 8008fe4:	08015b48 	.word	0x08015b48
 8008fe8:	08015b90 	.word	0x08015b90

08008fec <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08a      	sub	sp, #40	; 0x28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
 8008ff8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d109      	bne.n	8009014 <netconn_write_partly+0x28>
 8009000:	4b31      	ldr	r3, [pc, #196]	; (80090c8 <netconn_write_partly+0xdc>)
 8009002:	f240 22e6 	movw	r2, #742	; 0x2e6
 8009006:	4931      	ldr	r1, [pc, #196]	; (80090cc <netconn_write_partly+0xe0>)
 8009008:	4831      	ldr	r0, [pc, #196]	; (80090d0 <netconn_write_partly+0xe4>)
 800900a:	f00b fd25 	bl	8014a58 <iprintf>
 800900e:	f06f 030f 	mvn.w	r3, #15
 8009012:	e054      	b.n	80090be <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800901c:	2b10      	cmp	r3, #16
 800901e:	d009      	beq.n	8009034 <netconn_write_partly+0x48>
 8009020:	4b29      	ldr	r3, [pc, #164]	; (80090c8 <netconn_write_partly+0xdc>)
 8009022:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009026:	492b      	ldr	r1, [pc, #172]	; (80090d4 <netconn_write_partly+0xe8>)
 8009028:	4829      	ldr	r0, [pc, #164]	; (80090d0 <netconn_write_partly+0xe4>)
 800902a:	f00b fd15 	bl	8014a58 <iprintf>
 800902e:	f06f 0305 	mvn.w	r3, #5
 8009032:	e044      	b.n	80090be <netconn_write_partly+0xd2>
  if (size == 0) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <netconn_write_partly+0x52>
    return ERR_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	e03f      	b.n	80090be <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	7f1b      	ldrb	r3, [r3, #28]
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <netconn_write_partly+0x68>
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <netconn_write_partly+0x6c>
 8009054:	2301      	movs	r3, #1
 8009056:	e000      	b.n	800905a <netconn_write_partly+0x6e>
 8009058:	2300      	movs	r3, #0
 800905a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800905e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <netconn_write_partly+0x86>
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	2b00      	cmp	r3, #0
 800906a:	d102      	bne.n	8009072 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800906c:	f06f 0305 	mvn.w	r3, #5
 8009070:	e025      	b.n	80090be <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800907a:	78fb      	ldrb	r3, [r7, #3]
 800907c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009084:	f107 0310 	add.w	r3, r7, #16
 8009088:	4619      	mov	r1, r3
 800908a:	4813      	ldr	r0, [pc, #76]	; (80090d8 <netconn_write_partly+0xec>)
 800908c:	f7ff fcc6 	bl	8008a1c <netconn_apimsg>
 8009090:	4603      	mov	r3, r0
 8009092:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8009096:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10d      	bne.n	80090ba <netconn_write_partly+0xce>
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00a      	beq.n	80090ba <netconn_write_partly+0xce>
    if (dontblock) {
 80090a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	e002      	b.n	80090ba <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80090ba:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3728      	adds	r7, #40	; 0x28
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	08015930 	.word	0x08015930
 80090cc:	08015bb8 	.word	0x08015bb8
 80090d0:	08015988 	.word	0x08015988
 80090d4:	08015bd4 	.word	0x08015bd4
 80090d8:	0800a70d 	.word	0x0800a70d

080090dc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d109      	bne.n	8009102 <netconn_close_shutdown+0x26>
 80090ee:	4b0f      	ldr	r3, [pc, #60]	; (800912c <netconn_close_shutdown+0x50>)
 80090f0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80090f4:	490e      	ldr	r1, [pc, #56]	; (8009130 <netconn_close_shutdown+0x54>)
 80090f6:	480f      	ldr	r0, [pc, #60]	; (8009134 <netconn_close_shutdown+0x58>)
 80090f8:	f00b fcae 	bl	8014a58 <iprintf>
 80090fc:	f06f 030f 	mvn.w	r3, #15
 8009100:	e00f      	b.n	8009122 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800910a:	2329      	movs	r3, #41	; 0x29
 800910c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800910e:	f107 0308 	add.w	r3, r7, #8
 8009112:	4619      	mov	r1, r3
 8009114:	4808      	ldr	r0, [pc, #32]	; (8009138 <netconn_close_shutdown+0x5c>)
 8009116:	f7ff fc81 	bl	8008a1c <netconn_apimsg>
 800911a:	4603      	mov	r3, r0
 800911c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800911e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3720      	adds	r7, #32
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	08015930 	.word	0x08015930
 8009130:	08015bf8 	.word	0x08015bf8
 8009134:	08015988 	.word	0x08015988
 8009138:	0800a86d 	.word	0x0800a86d

0800913c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009144:	2103      	movs	r1, #3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7ff ffc8 	bl	80090dc <netconn_close_shutdown>
 800914c:	4603      	mov	r3, r0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d105      	bne.n	8009178 <recv_udp+0x20>
 800916c:	4b34      	ldr	r3, [pc, #208]	; (8009240 <recv_udp+0xe8>)
 800916e:	22b1      	movs	r2, #177	; 0xb1
 8009170:	4934      	ldr	r1, [pc, #208]	; (8009244 <recv_udp+0xec>)
 8009172:	4835      	ldr	r0, [pc, #212]	; (8009248 <recv_udp+0xf0>)
 8009174:	f00b fc70 	bl	8014a58 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d105      	bne.n	800918a <recv_udp+0x32>
 800917e:	4b30      	ldr	r3, [pc, #192]	; (8009240 <recv_udp+0xe8>)
 8009180:	22b2      	movs	r2, #178	; 0xb2
 8009182:	4932      	ldr	r1, [pc, #200]	; (800924c <recv_udp+0xf4>)
 8009184:	4830      	ldr	r0, [pc, #192]	; (8009248 <recv_udp+0xf0>)
 8009186:	f00b fc67 	bl	8014a58 <iprintf>
  conn = (struct netconn *)arg;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <recv_udp+0x44>
    pbuf_free(p);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f002 ff81 	bl	800c09c <pbuf_free>
    return;
 800919a:	e04d      	b.n	8009238 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d005      	beq.n	80091b2 <recv_udp+0x5a>
 80091a6:	4b26      	ldr	r3, [pc, #152]	; (8009240 <recv_udp+0xe8>)
 80091a8:	22ba      	movs	r2, #186	; 0xba
 80091aa:	4929      	ldr	r1, [pc, #164]	; (8009250 <recv_udp+0xf8>)
 80091ac:	4826      	ldr	r0, [pc, #152]	; (8009248 <recv_udp+0xf0>)
 80091ae:	f00b fc53 	bl	8014a58 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	3310      	adds	r3, #16
 80091b6:	4618      	mov	r0, r3
 80091b8:	f00b fa68 	bl	801468c <sys_mbox_valid>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d103      	bne.n	80091ca <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f002 ff6a 	bl	800c09c <pbuf_free>
    return;
 80091c8:	e036      	b.n	8009238 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80091ca:	2006      	movs	r0, #6
 80091cc:	f002 f97c 	bl	800b4c8 <memp_malloc>
 80091d0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d103      	bne.n	80091e0 <recv_udp+0x88>
    pbuf_free(p);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f002 ff5f 	bl	800c09c <pbuf_free>
    return;
 80091de:	e02b      	b.n	8009238 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <recv_udp+0xa0>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	e000      	b.n	80091fa <recv_udp+0xa2>
 80091f8:	2300      	movs	r3, #0
 80091fa:	69ba      	ldr	r2, [r7, #24]
 80091fc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009202:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	891b      	ldrh	r3, [r3, #8]
 8009208:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	3310      	adds	r3, #16
 800920e:	69b9      	ldr	r1, [r7, #24]
 8009210:	4618      	mov	r0, r3
 8009212:	f00b f9d9 	bl	80145c8 <sys_mbox_trypost>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <recv_udp+0xcc>
    netbuf_delete(buf);
 800921c:	69b8      	ldr	r0, [r7, #24]
 800921e:	f001 fbcd 	bl	800a9bc <netbuf_delete>
    return;
 8009222:	e009      	b.n	8009238 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009228:	2b00      	cmp	r3, #0
 800922a:	d005      	beq.n	8009238 <recv_udp+0xe0>
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009230:	8afa      	ldrh	r2, [r7, #22]
 8009232:	2100      	movs	r1, #0
 8009234:	69f8      	ldr	r0, [r7, #28]
 8009236:	4798      	blx	r3
  }
}
 8009238:	3720      	adds	r7, #32
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	08015c14 	.word	0x08015c14
 8009244:	08015c48 	.word	0x08015c48
 8009248:	08015c6c 	.word	0x08015c6c
 800924c:	08015c94 	.word	0x08015c94
 8009250:	08015cb4 	.word	0x08015cb4

08009254 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b088      	sub	sp, #32
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d105      	bne.n	8009274 <recv_tcp+0x20>
 8009268:	4b39      	ldr	r3, [pc, #228]	; (8009350 <recv_tcp+0xfc>)
 800926a:	22f9      	movs	r2, #249	; 0xf9
 800926c:	4939      	ldr	r1, [pc, #228]	; (8009354 <recv_tcp+0x100>)
 800926e:	483a      	ldr	r0, [pc, #232]	; (8009358 <recv_tcp+0x104>)
 8009270:	f00b fbf2 	bl	8014a58 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d105      	bne.n	8009286 <recv_tcp+0x32>
 800927a:	4b35      	ldr	r3, [pc, #212]	; (8009350 <recv_tcp+0xfc>)
 800927c:	22fa      	movs	r2, #250	; 0xfa
 800927e:	4937      	ldr	r1, [pc, #220]	; (800935c <recv_tcp+0x108>)
 8009280:	4835      	ldr	r0, [pc, #212]	; (8009358 <recv_tcp+0x104>)
 8009282:	f00b fbe9 	bl	8014a58 <iprintf>
  conn = (struct netconn *)arg;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d102      	bne.n	8009296 <recv_tcp+0x42>
    return ERR_VAL;
 8009290:	f06f 0305 	mvn.w	r3, #5
 8009294:	e057      	b.n	8009346 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	429a      	cmp	r2, r3
 800929e:	d006      	beq.n	80092ae <recv_tcp+0x5a>
 80092a0:	4b2b      	ldr	r3, [pc, #172]	; (8009350 <recv_tcp+0xfc>)
 80092a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092a6:	492e      	ldr	r1, [pc, #184]	; (8009360 <recv_tcp+0x10c>)
 80092a8:	482b      	ldr	r0, [pc, #172]	; (8009358 <recv_tcp+0x104>)
 80092aa:	f00b fbd5 	bl	8014a58 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	3310      	adds	r3, #16
 80092b2:	4618      	mov	r0, r3
 80092b4:	f00b f9ea 	bl	801468c <sys_mbox_valid>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10d      	bne.n	80092da <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d008      	beq.n	80092d6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	891b      	ldrh	r3, [r3, #8]
 80092c8:	4619      	mov	r1, r3
 80092ca:	68b8      	ldr	r0, [r7, #8]
 80092cc:	f003 fdc4 	bl	800ce58 <tcp_recved>
      pbuf_free(p);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f002 fee3 	bl	800c09c <pbuf_free>
    }
    return ERR_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	e035      	b.n	8009346 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 80092da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d011      	beq.n	8009306 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00e      	beq.n	8009306 <recv_tcp+0xb2>
 80092e8:	f00b fad6 	bl	8014898 <sys_arch_protect>
 80092ec:	6178      	str	r0, [r7, #20]
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80092f4:	f113 0f0c 	cmn.w	r3, #12
 80092f8:	db02      	blt.n	8009300 <recv_tcp+0xac>
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	721a      	strb	r2, [r3, #8]
 8009300:	6978      	ldr	r0, [r7, #20]
 8009302:	f00b fad7 	bl	80148b4 <sys_arch_unprotect>
  }

  if (p != NULL) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <recv_tcp+0xc0>
    len = p->tot_len;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	891b      	ldrh	r3, [r3, #8]
 8009310:	83fb      	strh	r3, [r7, #30]
 8009312:	e001      	b.n	8009318 <recv_tcp+0xc4>
  } else {
    len = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	3310      	adds	r3, #16
 800931c:	6879      	ldr	r1, [r7, #4]
 800931e:	4618      	mov	r0, r3
 8009320:	f00b f952 	bl	80145c8 <sys_mbox_trypost>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800932a:	f04f 33ff 	mov.w	r3, #4294967295
 800932e:	e00a      	b.n	8009346 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <recv_tcp+0xf0>
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933c:	8bfa      	ldrh	r2, [r7, #30]
 800933e:	2100      	movs	r1, #0
 8009340:	69b8      	ldr	r0, [r7, #24]
 8009342:	4798      	blx	r3
  }

  return ERR_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3720      	adds	r7, #32
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	08015c14 	.word	0x08015c14
 8009354:	08015cd4 	.word	0x08015cd4
 8009358:	08015c6c 	.word	0x08015c6c
 800935c:	08015cf8 	.word	0x08015cf8
 8009360:	08015d18 	.word	0x08015d18

08009364 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d106      	bne.n	8009386 <poll_tcp+0x22>
 8009378:	4b29      	ldr	r3, [pc, #164]	; (8009420 <poll_tcp+0xbc>)
 800937a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800937e:	4929      	ldr	r1, [pc, #164]	; (8009424 <poll_tcp+0xc0>)
 8009380:	4829      	ldr	r0, [pc, #164]	; (8009428 <poll_tcp+0xc4>)
 8009382:	f00b fb69 	bl	8014a58 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	785b      	ldrb	r3, [r3, #1]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d104      	bne.n	8009398 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800938e:	2101      	movs	r1, #1
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f001 f817 	bl	800a3c4 <lwip_netconn_do_writemore>
 8009396:	e016      	b.n	80093c6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	785b      	ldrb	r3, [r3, #1]
 800939c:	2b04      	cmp	r3, #4
 800939e:	d112      	bne.n	80093c6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00a      	beq.n	80093be <poll_tcp+0x5a>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	7a5b      	ldrb	r3, [r3, #9]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d005      	beq.n	80093be <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b6:	7a5a      	ldrb	r2, [r3, #9]
 80093b8:	3a01      	subs	r2, #1
 80093ba:	b2d2      	uxtb	r2, r2
 80093bc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80093be:	2101      	movs	r1, #1
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 fc13 	bl	8009bec <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	7f1b      	ldrb	r3, [r3, #28]
 80093ca:	f003 0310 	and.w	r3, r3, #16
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d021      	beq.n	8009416 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d01d      	beq.n	8009416 <poll_tcp+0xb2>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093e2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80093e6:	d316      	bcc.n	8009416 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80093f0:	2b04      	cmp	r3, #4
 80093f2:	d810      	bhi.n	8009416 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	7f1b      	ldrb	r3, [r3, #28]
 80093f8:	f023 0310 	bic.w	r3, r3, #16
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009406:	2b00      	cmp	r3, #0
 8009408:	d005      	beq.n	8009416 <poll_tcp+0xb2>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940e:	2200      	movs	r2, #0
 8009410:	2102      	movs	r1, #2
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	08015c14 	.word	0x08015c14
 8009424:	08015d38 	.word	0x08015d38
 8009428:	08015c6c 	.word	0x08015c6c

0800942c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d106      	bne.n	8009452 <sent_tcp+0x26>
 8009444:	4b20      	ldr	r3, [pc, #128]	; (80094c8 <sent_tcp+0x9c>)
 8009446:	f240 1261 	movw	r2, #353	; 0x161
 800944a:	4920      	ldr	r1, [pc, #128]	; (80094cc <sent_tcp+0xa0>)
 800944c:	4820      	ldr	r0, [pc, #128]	; (80094d0 <sent_tcp+0xa4>)
 800944e:	f00b fb03 	bl	8014a58 <iprintf>

  if (conn) {
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d032      	beq.n	80094be <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	785b      	ldrb	r3, [r3, #1]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d104      	bne.n	800946a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009460:	2101      	movs	r1, #1
 8009462:	6978      	ldr	r0, [r7, #20]
 8009464:	f000 ffae 	bl	800a3c4 <lwip_netconn_do_writemore>
 8009468:	e007      	b.n	800947a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	785b      	ldrb	r3, [r3, #1]
 800946e:	2b04      	cmp	r3, #4
 8009470:	d103      	bne.n	800947a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009472:	2101      	movs	r1, #1
 8009474:	6978      	ldr	r0, [r7, #20]
 8009476:	f000 fbb9 	bl	8009bec <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d01d      	beq.n	80094be <sent_tcp+0x92>
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800948a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800948e:	d316      	bcc.n	80094be <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009498:	2b04      	cmp	r3, #4
 800949a:	d810      	bhi.n	80094be <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	7f1b      	ldrb	r3, [r3, #28]
 80094a0:	f023 0310 	bic.w	r3, r3, #16
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <sent_tcp+0x92>
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b6:	88fa      	ldrh	r2, [r7, #6]
 80094b8:	2102      	movs	r1, #2
 80094ba:	6978      	ldr	r0, [r7, #20]
 80094bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	08015c14 	.word	0x08015c14
 80094cc:	08015d38 	.word	0x08015d38
 80094d0:	08015c6c 	.word	0x08015c6c

080094d4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08a      	sub	sp, #40	; 0x28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d106      	bne.n	80094f8 <err_tcp+0x24>
 80094ea:	4b6c      	ldr	r3, [pc, #432]	; (800969c <err_tcp+0x1c8>)
 80094ec:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80094f0:	496b      	ldr	r1, [pc, #428]	; (80096a0 <err_tcp+0x1cc>)
 80094f2:	486c      	ldr	r0, [pc, #432]	; (80096a4 <err_tcp+0x1d0>)
 80094f4:	f00b fab0 	bl	8014a58 <iprintf>

  conn->pcb.tcp = NULL;
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	2200      	movs	r2, #0
 80094fc:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	785b      	ldrb	r3, [r3, #1]
 8009502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	2200      	movs	r2, #0
 800950a:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800950c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009510:	2b04      	cmp	r3, #4
 8009512:	d114      	bne.n	800953e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	2b00      	cmp	r3, #0
 800951c:	d018      	beq.n	8009550 <err_tcp+0x7c>
 800951e:	f00b f9bb 	bl	8014898 <sys_arch_protect>
 8009522:	61b8      	str	r0, [r7, #24]
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800952a:	f113 0f0c 	cmn.w	r3, #12
 800952e:	db02      	blt.n	8009536 <err_tcp+0x62>
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	2200      	movs	r2, #0
 8009534:	721a      	strb	r2, [r3, #8]
 8009536:	69b8      	ldr	r0, [r7, #24]
 8009538:	f00b f9bc 	bl	80148b4 <sys_arch_unprotect>
 800953c:	e008      	b.n	8009550 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800953e:	f00b f9ab 	bl	8014898 <sys_arch_protect>
 8009542:	61f8      	str	r0, [r7, #28]
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	78fa      	ldrb	r2, [r7, #3]
 8009548:	721a      	strb	r2, [r3, #8]
 800954a:	69f8      	ldr	r0, [r7, #28]
 800954c:	f00b f9b2 	bl	80148b4 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009554:	2b00      	cmp	r3, #0
 8009556:	d005      	beq.n	8009564 <err_tcp+0x90>
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	2200      	movs	r2, #0
 800955e:	2104      	movs	r1, #4
 8009560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009562:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009568:	2b00      	cmp	r3, #0
 800956a:	d005      	beq.n	8009578 <err_tcp+0xa4>
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009570:	2200      	movs	r2, #0
 8009572:	2100      	movs	r1, #0
 8009574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009576:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957c:	2b00      	cmp	r3, #0
 800957e:	d005      	beq.n	800958c <err_tcp+0xb8>
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009584:	2200      	movs	r2, #0
 8009586:	2102      	movs	r1, #2
 8009588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800958a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	3310      	adds	r3, #16
 8009590:	4618      	mov	r0, r3
 8009592:	f00b f87b 	bl	801468c <sys_mbox_valid>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	3310      	adds	r3, #16
 80095a0:	2100      	movs	r1, #0
 80095a2:	4618      	mov	r0, r3
 80095a4:	f00b f810 	bl	80145c8 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	3314      	adds	r3, #20
 80095ac:	4618      	mov	r0, r3
 80095ae:	f00b f86d 	bl	801468c <sys_mbox_valid>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d005      	beq.n	80095c4 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	3314      	adds	r3, #20
 80095bc:	2100      	movs	r1, #0
 80095be:	4618      	mov	r0, r3
 80095c0:	f00b f802 	bl	80145c8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80095c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d007      	beq.n	80095dc <err_tcp+0x108>
 80095cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095d0:	2b04      	cmp	r3, #4
 80095d2:	d003      	beq.n	80095dc <err_tcp+0x108>
 80095d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d14d      	bne.n	8009678 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	7f1b      	ldrb	r3, [r3, #28]
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	bf14      	ite	ne
 80095e8:	2301      	movne	r3, #1
 80095ea:	2300      	moveq	r3, #0
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	7f1b      	ldrb	r3, [r3, #28]
 80095f4:	f023 0304 	bic.w	r3, r3, #4
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d145      	bne.n	8009690 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	2b00      	cmp	r3, #0
 800960a:	d106      	bne.n	800961a <err_tcp+0x146>
 800960c:	4b23      	ldr	r3, [pc, #140]	; (800969c <err_tcp+0x1c8>)
 800960e:	f240 12b3 	movw	r2, #435	; 0x1b3
 8009612:	4925      	ldr	r1, [pc, #148]	; (80096a8 <err_tcp+0x1d4>)
 8009614:	4823      	ldr	r0, [pc, #140]	; (80096a4 <err_tcp+0x1d0>)
 8009616:	f00b fa1f 	bl	8014a58 <iprintf>
      conn->current_msg->err = err;
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	330c      	adds	r3, #12
 800962a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800962c:	6938      	ldr	r0, [r7, #16]
 800962e:	f00b f8b9 	bl	80147a4 <sys_sem_valid>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d106      	bne.n	8009646 <err_tcp+0x172>
 8009638:	4b18      	ldr	r3, [pc, #96]	; (800969c <err_tcp+0x1c8>)
 800963a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800963e:	491b      	ldr	r1, [pc, #108]	; (80096ac <err_tcp+0x1d8>)
 8009640:	4818      	ldr	r0, [pc, #96]	; (80096a4 <err_tcp+0x1d0>)
 8009642:	f00b fa09 	bl	8014a58 <iprintf>
      conn->current_msg = NULL;
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	2200      	movs	r2, #0
 800964a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00e      	beq.n	8009670 <err_tcp+0x19c>
 8009652:	f00b f921 	bl	8014898 <sys_arch_protect>
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800965e:	f113 0f0c 	cmn.w	r3, #12
 8009662:	db02      	blt.n	800966a <err_tcp+0x196>
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	78fa      	ldrb	r2, [r7, #3]
 8009668:	721a      	strb	r2, [r3, #8]
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f00b f922 	bl	80148b4 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8009670:	6938      	ldr	r0, [r7, #16]
 8009672:	f00b f87d 	bl	8014770 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009676:	e00b      	b.n	8009690 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967c:	2b00      	cmp	r3, #0
 800967e:	d008      	beq.n	8009692 <err_tcp+0x1be>
 8009680:	4b06      	ldr	r3, [pc, #24]	; (800969c <err_tcp+0x1c8>)
 8009682:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009686:	490a      	ldr	r1, [pc, #40]	; (80096b0 <err_tcp+0x1dc>)
 8009688:	4806      	ldr	r0, [pc, #24]	; (80096a4 <err_tcp+0x1d0>)
 800968a:	f00b f9e5 	bl	8014a58 <iprintf>
  }
}
 800968e:	e000      	b.n	8009692 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8009690:	bf00      	nop
}
 8009692:	bf00      	nop
 8009694:	3728      	adds	r7, #40	; 0x28
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	08015c14 	.word	0x08015c14
 80096a0:	08015d38 	.word	0x08015d38
 80096a4:	08015c6c 	.word	0x08015c6c
 80096a8:	08015d48 	.word	0x08015d48
 80096ac:	08015d64 	.word	0x08015d64
 80096b0:	08015d80 	.word	0x08015d80

080096b4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f004 f9ab 	bl	800da20 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80096ca:	490a      	ldr	r1, [pc, #40]	; (80096f4 <setup_tcp+0x40>)
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f004 f9b7 	bl	800da40 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80096d2:	4909      	ldr	r1, [pc, #36]	; (80096f8 <setup_tcp+0x44>)
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f004 f9d5 	bl	800da84 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80096da:	2202      	movs	r2, #2
 80096dc:	4907      	ldr	r1, [pc, #28]	; (80096fc <setup_tcp+0x48>)
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f004 fa28 	bl	800db34 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80096e4:	4906      	ldr	r1, [pc, #24]	; (8009700 <setup_tcp+0x4c>)
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f004 f9ec 	bl	800dac4 <tcp_err>
}
 80096ec:	bf00      	nop
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	08009255 	.word	0x08009255
 80096f8:	0800942d 	.word	0x0800942d
 80096fc:	08009365 	.word	0x08009365
 8009700:	080094d5 	.word	0x080094d5

08009704 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d102      	bne.n	8009722 <accept_function+0x1e>
    return ERR_VAL;
 800971c:	f06f 0305 	mvn.w	r3, #5
 8009720:	e08d      	b.n	800983e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	3314      	adds	r3, #20
 8009726:	4618      	mov	r0, r3
 8009728:	f00a ffb0 	bl	801468c <sys_mbox_valid>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009732:	f06f 0305 	mvn.w	r3, #5
 8009736:	e082      	b.n	800983e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d115      	bne.n	800976a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	3314      	adds	r3, #20
 8009742:	4941      	ldr	r1, [pc, #260]	; (8009848 <accept_function+0x144>)
 8009744:	4618      	mov	r0, r3
 8009746:	f00a ff3f 	bl	80145c8 <sys_mbox_trypost>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d109      	bne.n	8009764 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <accept_function+0x60>
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975c:	2200      	movs	r2, #0
 800975e:	2100      	movs	r1, #0
 8009760:	69f8      	ldr	r0, [r7, #28]
 8009762:	4798      	blx	r3
    }
    return ERR_VAL;
 8009764:	f06f 0305 	mvn.w	r3, #5
 8009768:	e069      	b.n	800983e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	781a      	ldrb	r2, [r3, #0]
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009772:	4619      	mov	r1, r3
 8009774:	4610      	mov	r0, r2
 8009776:	f000 f8ff 	bl	8009978 <netconn_alloc>
 800977a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d115      	bne.n	80097ae <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	3314      	adds	r3, #20
 8009786:	4930      	ldr	r1, [pc, #192]	; (8009848 <accept_function+0x144>)
 8009788:	4618      	mov	r0, r3
 800978a:	f00a ff1d 	bl	80145c8 <sys_mbox_trypost>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d109      	bne.n	80097a8 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <accept_function+0xa4>
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	2200      	movs	r2, #0
 80097a2:	2100      	movs	r1, #0
 80097a4:	69f8      	ldr	r0, [r7, #28]
 80097a6:	4798      	blx	r3
    }
    return ERR_MEM;
 80097a8:	f04f 33ff 	mov.w	r3, #4294967295
 80097ac:	e047      	b.n	800983e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80097b4:	69b8      	ldr	r0, [r7, #24]
 80097b6:	f7ff ff7d 	bl	80096b4 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	79fa      	ldrb	r2, [r7, #7]
 80097be:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	3314      	adds	r3, #20
 80097c4:	69b9      	ldr	r1, [r7, #24]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f00a fefe 	bl	80145c8 <sys_mbox_trypost>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d02a      	beq.n	8009828 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80097d8:	2100      	movs	r1, #0
 80097da:	6978      	ldr	r0, [r7, #20]
 80097dc:	f004 f920 	bl	800da20 <tcp_arg>
    tcp_recv(pcb, NULL);
 80097e0:	2100      	movs	r1, #0
 80097e2:	6978      	ldr	r0, [r7, #20]
 80097e4:	f004 f92c 	bl	800da40 <tcp_recv>
    tcp_sent(pcb, NULL);
 80097e8:	2100      	movs	r1, #0
 80097ea:	6978      	ldr	r0, [r7, #20]
 80097ec:	f004 f94a 	bl	800da84 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80097f0:	2200      	movs	r2, #0
 80097f2:	2100      	movs	r1, #0
 80097f4:	6978      	ldr	r0, [r7, #20]
 80097f6:	f004 f99d 	bl	800db34 <tcp_poll>
    tcp_err(pcb, NULL);
 80097fa:	2100      	movs	r1, #0
 80097fc:	6978      	ldr	r0, [r7, #20]
 80097fe:	f004 f961 	bl	800dac4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	2200      	movs	r2, #0
 8009806:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	3310      	adds	r3, #16
 800980c:	4618      	mov	r0, r3
 800980e:	f00a feb3 	bl	8014578 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	3310      	adds	r3, #16
 8009816:	4618      	mov	r0, r3
 8009818:	f00a ff48 	bl	80146ac <sys_mbox_set_invalid>
    netconn_free(newconn);
 800981c:	69b8      	ldr	r0, [r7, #24]
 800981e:	f000 f91b 	bl	8009a58 <netconn_free>
    return ERR_MEM;
 8009822:	f04f 33ff 	mov.w	r3, #4294967295
 8009826:	e00a      	b.n	800983e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982c:	2b00      	cmp	r3, #0
 800982e:	d005      	beq.n	800983c <accept_function+0x138>
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009834:	2200      	movs	r2, #0
 8009836:	2100      	movs	r1, #0
 8009838:	69f8      	ldr	r0, [r7, #28]
 800983a:	4798      	blx	r3
  }

  return ERR_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	200082b0 	.word	0x200082b0

0800984c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800984c:	b590      	push	{r4, r7, lr}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d006      	beq.n	8009870 <pcb_new+0x24>
 8009862:	4b2b      	ldr	r3, [pc, #172]	; (8009910 <pcb_new+0xc4>)
 8009864:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8009868:	492a      	ldr	r1, [pc, #168]	; (8009914 <pcb_new+0xc8>)
 800986a:	482b      	ldr	r0, [pc, #172]	; (8009918 <pcb_new+0xcc>)
 800986c:	f00b f8f4 	bl	8014a58 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800987a:	2b10      	cmp	r3, #16
 800987c:	d022      	beq.n	80098c4 <pcb_new+0x78>
 800987e:	2b20      	cmp	r3, #32
 8009880:	d133      	bne.n	80098ea <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681c      	ldr	r4, [r3, #0]
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	4618      	mov	r0, r3
 800988a:	f008 fc48 	bl	801211e <udp_new_ip_type>
 800988e:	4603      	mov	r3, r0
 8009890:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d02a      	beq.n	80098f2 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	2b22      	cmp	r3, #34	; 0x22
 80098a4:	d104      	bne.n	80098b0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6858      	ldr	r0, [r3, #4]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	4917      	ldr	r1, [pc, #92]	; (800991c <pcb_new+0xd0>)
 80098be:	f008 fbd3 	bl	8012068 <udp_recv>
    }
    break;
 80098c2:	e016      	b.n	80098f2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681c      	ldr	r4, [r3, #0]
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f004 f89a 	bl	800da04 <tcp_new_ip_type>
 80098d0:	4603      	mov	r3, r0
 80098d2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00b      	beq.n	80098f6 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff fee6 	bl	80096b4 <setup_tcp>
    }
    break;
 80098e8:	e005      	b.n	80098f6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	22fa      	movs	r2, #250	; 0xfa
 80098ee:	711a      	strb	r2, [r3, #4]
    return;
 80098f0:	e00a      	b.n	8009908 <pcb_new+0xbc>
    break;
 80098f2:	bf00      	nop
 80098f4:	e000      	b.n	80098f8 <pcb_new+0xac>
    break;
 80098f6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d102      	bne.n	8009908 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	22ff      	movs	r2, #255	; 0xff
 8009906:	711a      	strb	r2, [r3, #4]
  }
}
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	bd90      	pop	{r4, r7, pc}
 800990e:	bf00      	nop
 8009910:	08015c14 	.word	0x08015c14
 8009914:	08015d9c 	.word	0x08015d9c
 8009918:	08015c6c 	.word	0x08015c6c
 800991c:	08009159 	.word	0x08009159

08009920 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d102      	bne.n	8009942 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f7ff ff85 	bl	800984c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d012      	beq.n	8009970 <lwip_netconn_do_newconn+0x50>
 800994a:	f00a ffa5 	bl	8014898 <sys_arch_protect>
 800994e:	60b8      	str	r0, [r7, #8]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009958:	f113 0f0c 	cmn.w	r3, #12
 800995c:	db05      	blt.n	800996a <lwip_netconn_do_newconn+0x4a>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009968:	721a      	strb	r2, [r3, #8]
 800996a:	68b8      	ldr	r0, [r7, #8]
 800996c:	f00a ffa2 	bl	80148b4 <sys_arch_unprotect>
}
 8009970:	bf00      	nop
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	6039      	str	r1, [r7, #0]
 8009982:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009984:	2007      	movs	r0, #7
 8009986:	f001 fd9f 	bl	800b4c8 <memp_malloc>
 800998a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <netconn_alloc+0x1e>
    return NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	e055      	b.n	8009a42 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2200      	movs	r2, #0
 800999a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	79fa      	ldrb	r2, [r7, #7]
 80099a0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2200      	movs	r2, #0
 80099a6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 80099a8:	79fb      	ldrb	r3, [r7, #7]
 80099aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099ae:	2b10      	cmp	r3, #16
 80099b0:	d004      	beq.n	80099bc <netconn_alloc+0x44>
 80099b2:	2b20      	cmp	r3, #32
 80099b4:	d105      	bne.n	80099c2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 80099b6:	2306      	movs	r3, #6
 80099b8:	60fb      	str	r3, [r7, #12]
    break;
 80099ba:	e00a      	b.n	80099d2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 80099bc:	2306      	movs	r3, #6
 80099be:	60fb      	str	r3, [r7, #12]
    break;
 80099c0:	e007      	b.n	80099d2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80099c2:	4b22      	ldr	r3, [pc, #136]	; (8009a4c <netconn_alloc+0xd4>)
 80099c4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80099c8:	4921      	ldr	r1, [pc, #132]	; (8009a50 <netconn_alloc+0xd8>)
 80099ca:	4822      	ldr	r0, [pc, #136]	; (8009a54 <netconn_alloc+0xdc>)
 80099cc:	f00b f844 	bl	8014a58 <iprintf>
    goto free_and_return;
 80099d0:	e032      	b.n	8009a38 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	3310      	adds	r3, #16
 80099d6:	68f9      	ldr	r1, [r7, #12]
 80099d8:	4618      	mov	r0, r3
 80099da:	f00a fdb3 	bl	8014544 <sys_mbox_new>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d128      	bne.n	8009a36 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	330c      	adds	r3, #12
 80099e8:	2100      	movs	r1, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f00a fe6a 	bl	80146c4 <sys_sem_new>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d005      	beq.n	8009a02 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	3310      	adds	r3, #16
 80099fa:	4618      	mov	r0, r3
 80099fc:	f00a fdbc 	bl	8014578 <sys_mbox_free>
    goto free_and_return;
 8009a00:	e01a      	b.n	8009a38 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	3314      	adds	r3, #20
 8009a06:	4618      	mov	r0, r3
 8009a08:	f00a fe50 	bl	80146ac <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f04f 32ff 	mov.w	r2, #4294967295
 8009a18:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	2200      	movs	r2, #0
 8009a24:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	771a      	strb	r2, [r3, #28]
  return conn;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	e005      	b.n	8009a42 <netconn_alloc+0xca>
    goto free_and_return;
 8009a36:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	2007      	movs	r0, #7
 8009a3c:	f001 fd96 	bl	800b56c <memp_free>
  return NULL;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	08015c14 	.word	0x08015c14
 8009a50:	08015dbc 	.word	0x08015dbc
 8009a54:	08015c6c 	.word	0x08015c6c

08009a58 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d006      	beq.n	8009a76 <netconn_free+0x1e>
 8009a68:	4b1b      	ldr	r3, [pc, #108]	; (8009ad8 <netconn_free+0x80>)
 8009a6a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8009a6e:	491b      	ldr	r1, [pc, #108]	; (8009adc <netconn_free+0x84>)
 8009a70:	481b      	ldr	r0, [pc, #108]	; (8009ae0 <netconn_free+0x88>)
 8009a72:	f00a fff1 	bl	8014a58 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	3310      	adds	r3, #16
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f00a fe06 	bl	801468c <sys_mbox_valid>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d006      	beq.n	8009a94 <netconn_free+0x3c>
 8009a86:	4b14      	ldr	r3, [pc, #80]	; (8009ad8 <netconn_free+0x80>)
 8009a88:	f240 22e1 	movw	r2, #737	; 0x2e1
 8009a8c:	4915      	ldr	r1, [pc, #84]	; (8009ae4 <netconn_free+0x8c>)
 8009a8e:	4814      	ldr	r0, [pc, #80]	; (8009ae0 <netconn_free+0x88>)
 8009a90:	f00a ffe2 	bl	8014a58 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3314      	adds	r3, #20
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f00a fdf7 	bl	801468c <sys_mbox_valid>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d006      	beq.n	8009ab2 <netconn_free+0x5a>
 8009aa4:	4b0c      	ldr	r3, [pc, #48]	; (8009ad8 <netconn_free+0x80>)
 8009aa6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009aaa:	490f      	ldr	r1, [pc, #60]	; (8009ae8 <netconn_free+0x90>)
 8009aac:	480c      	ldr	r0, [pc, #48]	; (8009ae0 <netconn_free+0x88>)
 8009aae:	f00a ffd3 	bl	8014a58 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	330c      	adds	r3, #12
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f00a fe67 	bl	801478a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	330c      	adds	r3, #12
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f00a fe7f 	bl	80147c4 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	2007      	movs	r0, #7
 8009aca:	f001 fd4f 	bl	800b56c <memp_free>
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	08015c14 	.word	0x08015c14
 8009adc:	08015de4 	.word	0x08015de4
 8009ae0:	08015c6c 	.word	0x08015c6c
 8009ae4:	08015e14 	.word	0x08015e14
 8009ae8:	08015e50 	.word	0x08015e50

08009aec <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3310      	adds	r3, #16
 8009af8:	4618      	mov	r0, r3
 8009afa:	f00a fdc7 	bl	801468c <sys_mbox_valid>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d035      	beq.n	8009b70 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009b04:	e01e      	b.n	8009b44 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b0e:	2b10      	cmp	r3, #16
 8009b10:	d114      	bne.n	8009b3c <netconn_drain+0x50>
        if (mem != NULL) {
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d015      	beq.n	8009b44 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d007      	beq.n	8009b34 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	891b      	ldrh	r3, [r3, #8]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	4610      	mov	r0, r2
 8009b30:	f003 f992 	bl	800ce58 <tcp_recved>
          }
          pbuf_free(p);
 8009b34:	6978      	ldr	r0, [r7, #20]
 8009b36:	f002 fab1 	bl	800c09c <pbuf_free>
 8009b3a:	e003      	b.n	8009b44 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 ff3c 	bl	800a9bc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3310      	adds	r3, #16
 8009b48:	f107 020c 	add.w	r2, r7, #12
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f00a fd85 	bl	801465e <sys_arch_mbox_tryfetch>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5a:	d1d4      	bne.n	8009b06 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3310      	adds	r3, #16
 8009b60:	4618      	mov	r0, r3
 8009b62:	f00a fd09 	bl	8014578 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3310      	adds	r3, #16
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f00a fd9e 	bl	80146ac <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3314      	adds	r3, #20
 8009b74:	4618      	mov	r0, r3
 8009b76:	f00a fd89 	bl	801468c <sys_mbox_valid>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d02e      	beq.n	8009bde <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009b80:	e017      	b.n	8009bb2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	4a18      	ldr	r2, [pc, #96]	; (8009be8 <netconn_drain+0xfc>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d013      	beq.n	8009bb2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8009b8e:	6938      	ldr	r0, [r7, #16]
 8009b90:	f7ff ffac 	bl	8009aec <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d007      	beq.n	8009bac <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f002 ffc5 	bl	800cb30 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8009bac:	6938      	ldr	r0, [r7, #16]
 8009bae:	f7ff ff53 	bl	8009a58 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3314      	adds	r3, #20
 8009bb6:	f107 020c 	add.w	r2, r7, #12
 8009bba:	4611      	mov	r1, r2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f00a fd4e 	bl	801465e <sys_arch_mbox_tryfetch>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc8:	d1db      	bne.n	8009b82 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	3314      	adds	r3, #20
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f00a fcd2 	bl	8014578 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3314      	adds	r3, #20
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f00a fd67 	bl	80146ac <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009bde:	bf00      	nop
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	200082b0 	.word	0x200082b0

08009bec <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <lwip_netconn_do_close_internal+0x24>
 8009c02:	4b90      	ldr	r3, [pc, #576]	; (8009e44 <lwip_netconn_do_close_internal+0x258>)
 8009c04:	f240 3243 	movw	r2, #835	; 0x343
 8009c08:	498f      	ldr	r1, [pc, #572]	; (8009e48 <lwip_netconn_do_close_internal+0x25c>)
 8009c0a:	4890      	ldr	r0, [pc, #576]	; (8009e4c <lwip_netconn_do_close_internal+0x260>)
 8009c0c:	f00a ff24 	bl	8014a58 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c18:	2b10      	cmp	r3, #16
 8009c1a:	d006      	beq.n	8009c2a <lwip_netconn_do_close_internal+0x3e>
 8009c1c:	4b89      	ldr	r3, [pc, #548]	; (8009e44 <lwip_netconn_do_close_internal+0x258>)
 8009c1e:	f44f 7251 	mov.w	r2, #836	; 0x344
 8009c22:	498b      	ldr	r1, [pc, #556]	; (8009e50 <lwip_netconn_do_close_internal+0x264>)
 8009c24:	4889      	ldr	r0, [pc, #548]	; (8009e4c <lwip_netconn_do_close_internal+0x260>)
 8009c26:	f00a ff17 	bl	8014a58 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	785b      	ldrb	r3, [r3, #1]
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d006      	beq.n	8009c40 <lwip_netconn_do_close_internal+0x54>
 8009c32:	4b84      	ldr	r3, [pc, #528]	; (8009e44 <lwip_netconn_do_close_internal+0x258>)
 8009c34:	f240 3245 	movw	r2, #837	; 0x345
 8009c38:	4986      	ldr	r1, [pc, #536]	; (8009e54 <lwip_netconn_do_close_internal+0x268>)
 8009c3a:	4884      	ldr	r0, [pc, #528]	; (8009e4c <lwip_netconn_do_close_internal+0x260>)
 8009c3c:	f00a ff0c 	bl	8014a58 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d106      	bne.n	8009c56 <lwip_netconn_do_close_internal+0x6a>
 8009c48:	4b7e      	ldr	r3, [pc, #504]	; (8009e44 <lwip_netconn_do_close_internal+0x258>)
 8009c4a:	f240 3246 	movw	r2, #838	; 0x346
 8009c4e:	4982      	ldr	r1, [pc, #520]	; (8009e58 <lwip_netconn_do_close_internal+0x26c>)
 8009c50:	487e      	ldr	r0, [pc, #504]	; (8009e4c <lwip_netconn_do_close_internal+0x260>)
 8009c52:	f00a ff01 	bl	8014a58 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d106      	bne.n	8009c6c <lwip_netconn_do_close_internal+0x80>
 8009c5e:	4b79      	ldr	r3, [pc, #484]	; (8009e44 <lwip_netconn_do_close_internal+0x258>)
 8009c60:	f240 3247 	movw	r2, #839	; 0x347
 8009c64:	497d      	ldr	r1, [pc, #500]	; (8009e5c <lwip_netconn_do_close_internal+0x270>)
 8009c66:	4879      	ldr	r0, [pc, #484]	; (8009e4c <lwip_netconn_do_close_internal+0x260>)
 8009c68:	f00a fef6 	bl	8014a58 <iprintf>

  tpcb = conn->pcb.tcp;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	7a1b      	ldrb	r3, [r3, #8]
 8009c78:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009c7a:	7dfb      	ldrb	r3, [r7, #23]
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	f003 0302 	and.w	r3, r3, #2
 8009c88:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d102      	bne.n	8009c96 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8009c90:	2301      	movs	r3, #1
 8009c92:	77bb      	strb	r3, [r7, #30]
 8009c94:	e01f      	b.n	8009cd6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009c96:	7dbb      	ldrb	r3, [r7, #22]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00e      	beq.n	8009cba <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009ca0:	2b05      	cmp	r3, #5
 8009ca2:	d007      	beq.n	8009cb4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009ca8:	2b06      	cmp	r3, #6
 8009caa:	d003      	beq.n	8009cb4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	d102      	bne.n	8009cba <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	77bb      	strb	r3, [r7, #30]
 8009cb8:	e00d      	b.n	8009cd6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009cba:	7d7b      	ldrb	r3, [r7, #21]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d008      	beq.n	8009cd2 <lwip_netconn_do_close_internal+0xe6>
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	7e9b      	ldrb	r3, [r3, #26]
 8009cc4:	f003 0310 	and.w	r3, r3, #16
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	77bb      	strb	r3, [r7, #30]
 8009cd0:	e001      	b.n	8009cd6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8009cd6:	7fbb      	ldrb	r3, [r7, #30]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009cdc:	2100      	movs	r1, #0
 8009cde:	69b8      	ldr	r0, [r7, #24]
 8009ce0:	f003 fe9e 	bl	800da20 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	7d1b      	ldrb	r3, [r3, #20]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d104      	bne.n	8009cf6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009cec:	2100      	movs	r1, #0
 8009cee:	69b8      	ldr	r0, [r7, #24]
 8009cf0:	f003 ff0a 	bl	800db08 <tcp_accept>
 8009cf4:	e01d      	b.n	8009d32 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009cf6:	7dbb      	ldrb	r3, [r7, #22]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d007      	beq.n	8009d0c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	69b8      	ldr	r0, [r7, #24]
 8009d00:	f003 fe9e 	bl	800da40 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009d04:	2100      	movs	r1, #0
 8009d06:	69b8      	ldr	r0, [r7, #24]
 8009d08:	f003 fefe 	bl	800db08 <tcp_accept>
    }
    if (shut_tx) {
 8009d0c:	7d7b      	ldrb	r3, [r7, #21]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009d12:	2100      	movs	r1, #0
 8009d14:	69b8      	ldr	r0, [r7, #24]
 8009d16:	f003 feb5 	bl	800da84 <tcp_sent>
    }
    if (close) {
 8009d1a:	7fbb      	ldrb	r3, [r7, #30]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d008      	beq.n	8009d32 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009d20:	2200      	movs	r2, #0
 8009d22:	2100      	movs	r1, #0
 8009d24:	69b8      	ldr	r0, [r7, #24]
 8009d26:	f003 ff05 	bl	800db34 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	69b8      	ldr	r0, [r7, #24]
 8009d2e:	f003 fec9 	bl	800dac4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8009d32:	7fbb      	ldrb	r3, [r7, #30]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d005      	beq.n	8009d44 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009d38:	69b8      	ldr	r0, [r7, #24]
 8009d3a:	f002 fde7 	bl	800c90c <tcp_close>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	77fb      	strb	r3, [r7, #31]
 8009d42:	e007      	b.n	8009d54 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009d44:	7dbb      	ldrb	r3, [r7, #22]
 8009d46:	7d7a      	ldrb	r2, [r7, #21]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	69b8      	ldr	r0, [r7, #24]
 8009d4c:	f002 fdf6 	bl	800c93c <tcp_shutdown>
 8009d50:	4603      	mov	r3, r0
 8009d52:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8009d54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	777b      	strb	r3, [r7, #29]
 8009d60:	e016      	b.n	8009d90 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009d62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6a:	d10f      	bne.n	8009d8c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	7a5b      	ldrb	r3, [r3, #9]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10c      	bne.n	8009d90 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009d76:	2301      	movs	r3, #1
 8009d78:	777b      	strb	r3, [r7, #29]
        if (close) {
 8009d7a:	7fbb      	ldrb	r3, [r7, #30]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d007      	beq.n	8009d90 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009d80:	69b8      	ldr	r0, [r7, #24]
 8009d82:	f002 fed5 	bl	800cb30 <tcp_abort>
          err = ERR_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	77fb      	strb	r3, [r7, #31]
 8009d8a:	e001      	b.n	8009d90 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8009d90:	7f7b      	ldrb	r3, [r7, #29]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d064      	beq.n	8009e60 <lwip_netconn_do_close_internal+0x274>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	330c      	adds	r3, #12
 8009d9e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da4:	7ffa      	ldrb	r2, [r7, #31]
 8009da6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009db4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d129      	bne.n	8009e10 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8009dbc:	7fbb      	ldrb	r3, [r7, #30]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00c      	beq.n	8009ddc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d005      	beq.n	8009ddc <lwip_netconn_do_close_internal+0x1f0>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2104      	movs	r1, #4
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	4798      	blx	r3
      }
      if (shut_rx) {
 8009ddc:	7dbb      	ldrb	r3, [r7, #22]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d009      	beq.n	8009df6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d005      	beq.n	8009df6 <lwip_netconn_do_close_internal+0x20a>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dee:	2200      	movs	r2, #0
 8009df0:	2100      	movs	r1, #0
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
      }
      if (shut_tx) {
 8009df6:	7d7b      	ldrb	r3, [r7, #21]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d009      	beq.n	8009e10 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d005      	beq.n	8009e10 <lwip_netconn_do_close_internal+0x224>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2102      	movs	r1, #2
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00e      	beq.n	8009e34 <lwip_netconn_do_close_internal+0x248>
 8009e16:	f00a fd3f 	bl	8014898 <sys_arch_protect>
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009e22:	f113 0f0c 	cmn.w	r3, #12
 8009e26:	db02      	blt.n	8009e2e <lwip_netconn_do_close_internal+0x242>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	7ffa      	ldrb	r2, [r7, #31]
 8009e2c:	721a      	strb	r2, [r3, #8]
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f00a fd40 	bl	80148b4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009e3a:	6938      	ldr	r0, [r7, #16]
 8009e3c:	f00a fc98 	bl	8014770 <sys_sem_signal>
    }
    return ERR_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	e03c      	b.n	8009ebe <lwip_netconn_do_close_internal+0x2d2>
 8009e44:	08015c14 	.word	0x08015c14
 8009e48:	08015e8c 	.word	0x08015e8c
 8009e4c:	08015c6c 	.word	0x08015c6c
 8009e50:	08015e9c 	.word	0x08015e9c
 8009e54:	08015ebc 	.word	0x08015ebc
 8009e58:	08015ee0 	.word	0x08015ee0
 8009e5c:	08015d48 	.word	0x08015d48
  }
  if (!close_finished) {
 8009e60:	7f7b      	ldrb	r3, [r7, #29]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d11e      	bne.n	8009ea4 <lwip_netconn_do_close_internal+0x2b8>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	7d1b      	ldrb	r3, [r3, #20]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d106      	bne.n	8009e7c <lwip_netconn_do_close_internal+0x290>
 8009e6e:	4b16      	ldr	r3, [pc, #88]	; (8009ec8 <lwip_netconn_do_close_internal+0x2dc>)
 8009e70:	f240 32e3 	movw	r2, #995	; 0x3e3
 8009e74:	4915      	ldr	r1, [pc, #84]	; (8009ecc <lwip_netconn_do_close_internal+0x2e0>)
 8009e76:	4816      	ldr	r0, [pc, #88]	; (8009ed0 <lwip_netconn_do_close_internal+0x2e4>)
 8009e78:	f00a fdee 	bl	8014a58 <iprintf>
    if (shut_tx) {
 8009e7c:	7d7b      	ldrb	r3, [r7, #21]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <lwip_netconn_do_close_internal+0x29e>
      tcp_sent(tpcb, sent_tcp);
 8009e82:	4914      	ldr	r1, [pc, #80]	; (8009ed4 <lwip_netconn_do_close_internal+0x2e8>)
 8009e84:	69b8      	ldr	r0, [r7, #24]
 8009e86:	f003 fdfd 	bl	800da84 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	4912      	ldr	r1, [pc, #72]	; (8009ed8 <lwip_netconn_do_close_internal+0x2ec>)
 8009e8e:	69b8      	ldr	r0, [r7, #24]
 8009e90:	f003 fe50 	bl	800db34 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009e94:	4911      	ldr	r1, [pc, #68]	; (8009edc <lwip_netconn_do_close_internal+0x2f0>)
 8009e96:	69b8      	ldr	r0, [r7, #24]
 8009e98:	f003 fe14 	bl	800dac4 <tcp_err>
    tcp_arg(tpcb, conn);
 8009e9c:	6879      	ldr	r1, [r7, #4]
 8009e9e:	69b8      	ldr	r0, [r7, #24]
 8009ea0:	f003 fdbe 	bl	800da20 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009ea4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d106      	bne.n	8009eba <lwip_netconn_do_close_internal+0x2ce>
 8009eac:	4b06      	ldr	r3, [pc, #24]	; (8009ec8 <lwip_netconn_do_close_internal+0x2dc>)
 8009eae:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009eb2:	490b      	ldr	r1, [pc, #44]	; (8009ee0 <lwip_netconn_do_close_internal+0x2f4>)
 8009eb4:	4806      	ldr	r0, [pc, #24]	; (8009ed0 <lwip_netconn_do_close_internal+0x2e4>)
 8009eb6:	f00a fdcf 	bl	8014a58 <iprintf>
  return err;
 8009eba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3720      	adds	r7, #32
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	08015c14 	.word	0x08015c14
 8009ecc:	08015ef4 	.word	0x08015ef4
 8009ed0:	08015c6c 	.word	0x08015c6c
 8009ed4:	0800942d 	.word	0x0800942d
 8009ed8:	08009365 	.word	0x08009365
 8009edc:	080094d5 	.word	0x080094d5
 8009ee0:	08015f18 	.word	0x08015f18

08009ee4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009ef8:	7cfb      	ldrb	r3, [r7, #19]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00d      	beq.n	8009f1a <lwip_netconn_do_delconn+0x36>
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f08:	2b10      	cmp	r3, #16
 8009f0a:	d006      	beq.n	8009f1a <lwip_netconn_do_delconn+0x36>
 8009f0c:	4b6f      	ldr	r3, [pc, #444]	; (800a0cc <lwip_netconn_do_delconn+0x1e8>)
 8009f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f12:	496f      	ldr	r1, [pc, #444]	; (800a0d0 <lwip_netconn_do_delconn+0x1ec>)
 8009f14:	486f      	ldr	r0, [pc, #444]	; (800a0d4 <lwip_netconn_do_delconn+0x1f0>)
 8009f16:	f00a fd9f 	bl	8014a58 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009f1a:	7cfb      	ldrb	r3, [r7, #19]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d005      	beq.n	8009f2c <lwip_netconn_do_delconn+0x48>
 8009f20:	7cfb      	ldrb	r3, [r7, #19]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d002      	beq.n	8009f2c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009f26:	7cfb      	ldrb	r3, [r7, #19]
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d109      	bne.n	8009f40 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009f2c:	7cfb      	ldrb	r3, [r7, #19]
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d10a      	bne.n	8009f48 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	7f1b      	ldrb	r3, [r3, #28]
 8009f38:	f003 0304 	and.w	r3, r3, #4
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d103      	bne.n	8009f48 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	22fb      	movs	r2, #251	; 0xfb
 8009f44:	711a      	strb	r2, [r3, #4]
 8009f46:	e09c      	b.n	800a082 <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009f48:	7cfb      	ldrb	r3, [r7, #19]
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d10d      	bne.n	8009f6a <lwip_netconn_do_delconn+0x86>
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	7f1b      	ldrb	r3, [r3, #28]
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d106      	bne.n	8009f6a <lwip_netconn_do_delconn+0x86>
 8009f5c:	4b5b      	ldr	r3, [pc, #364]	; (800a0cc <lwip_netconn_do_delconn+0x1e8>)
 8009f5e:	f240 421e 	movw	r2, #1054	; 0x41e
 8009f62:	495d      	ldr	r1, [pc, #372]	; (800a0d8 <lwip_netconn_do_delconn+0x1f4>)
 8009f64:	485b      	ldr	r0, [pc, #364]	; (800a0d4 <lwip_netconn_do_delconn+0x1f0>)
 8009f66:	f00a fd77 	bl	8014a58 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7ff fdb9 	bl	8009aec <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d064      	beq.n	800a04e <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f8e:	2b10      	cmp	r3, #16
 8009f90:	d00d      	beq.n	8009fae <lwip_netconn_do_delconn+0xca>
 8009f92:	2b20      	cmp	r3, #32
 8009f94:	d156      	bne.n	800a044 <lwip_netconn_do_delconn+0x160>
        raw_remove(msg->conn->pcb.raw);
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->pcb.udp->recv_arg = NULL;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f008 f870 	bl	801208c <udp_remove>
        break;
 8009fac:	e04b      	b.n	800a046 <lwip_netconn_do_delconn+0x162>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d104      	bne.n	8009fc2 <lwip_netconn_do_delconn+0xde>
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d006      	beq.n	8009fd0 <lwip_netconn_do_delconn+0xec>
 8009fc2:	4b42      	ldr	r3, [pc, #264]	; (800a0cc <lwip_netconn_do_delconn+0x1e8>)
 8009fc4:	f240 4234 	movw	r2, #1076	; 0x434
 8009fc8:	4944      	ldr	r1, [pc, #272]	; (800a0dc <lwip_netconn_do_delconn+0x1f8>)
 8009fca:	4842      	ldr	r0, [pc, #264]	; (800a0d4 <lwip_netconn_do_delconn+0x1f0>)
 8009fcc:	f00a fd44 	bl	8014a58 <iprintf>
          msg->conn->write_offset == 0);
        msg->conn->state = NETCONN_CLOSE;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2204      	movs	r2, #4
 8009fd6:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	2203      	movs	r2, #3
 8009fdc:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2100      	movs	r1, #0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7ff fdfd 	bl	8009bec <lwip_netconn_do_close_internal>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d065      	beq.n	800a0c4 <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	785b      	ldrb	r3, [r3, #1]
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d006      	beq.n	800a010 <lwip_netconn_do_delconn+0x12c>
 800a002:	4b32      	ldr	r3, [pc, #200]	; (800a0cc <lwip_netconn_do_delconn+0x1e8>)
 800a004:	f240 423b 	movw	r2, #1083	; 0x43b
 800a008:	4935      	ldr	r1, [pc, #212]	; (800a0e0 <lwip_netconn_do_delconn+0x1fc>)
 800a00a:	4832      	ldr	r0, [pc, #200]	; (800a0d4 <lwip_netconn_do_delconn+0x1f0>)
 800a00c:	f00a fd24 	bl	8014a58 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a010:	4834      	ldr	r0, [pc, #208]	; (800a0e4 <lwip_netconn_do_delconn+0x200>)
 800a012:	f00a fc14 	bl	801483e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	330c      	adds	r3, #12
 800a01c:	2100      	movs	r1, #0
 800a01e:	4618      	mov	r0, r3
 800a020:	f00a fb75 	bl	801470e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a024:	482f      	ldr	r0, [pc, #188]	; (800a0e4 <lwip_netconn_do_delconn+0x200>)
 800a026:	f00a fbfb 	bl	8014820 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	785b      	ldrb	r3, [r3, #1]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d047      	beq.n	800a0c4 <lwip_netconn_do_delconn+0x1e0>
 800a034:	4b25      	ldr	r3, [pc, #148]	; (800a0cc <lwip_netconn_do_delconn+0x1e8>)
 800a036:	f240 423f 	movw	r2, #1087	; 0x43f
 800a03a:	4929      	ldr	r1, [pc, #164]	; (800a0e0 <lwip_netconn_do_delconn+0x1fc>)
 800a03c:	4825      	ldr	r0, [pc, #148]	; (800a0d4 <lwip_netconn_do_delconn+0x1f0>)
 800a03e:	f00a fd0b 	bl	8014a58 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
 800a042:	e03f      	b.n	800a0c4 <lwip_netconn_do_delconn+0x1e0>
#endif /* LWIP_TCP */
      default:
        break;
 800a044:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2200      	movs	r2, #0
 800a04c:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a054:	2b00      	cmp	r3, #0
 800a056:	d007      	beq.n	800a068 <lwip_netconn_do_delconn+0x184>
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	6810      	ldr	r0, [r2, #0]
 800a062:	2200      	movs	r2, #0
 800a064:	2100      	movs	r1, #0
 800a066:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d007      	beq.n	800a082 <lwip_netconn_do_delconn+0x19e>
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	6810      	ldr	r0, [r2, #0]
 800a07c:	2200      	movs	r2, #0
 800a07e:	2102      	movs	r1, #2
 800a080:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	330c      	adds	r3, #12
 800a088:	4618      	mov	r0, r3
 800a08a:	f00a fb8b 	bl	80147a4 <sys_sem_valid>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d018      	beq.n	800a0c6 <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d014      	beq.n	800a0c6 <lwip_netconn_do_delconn+0x1e2>
 800a09c:	f00a fbfc 	bl	8014898 <sys_arch_protect>
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a0aa:	f113 0f0c 	cmn.w	r3, #12
 800a0ae:	db05      	blt.n	800a0bc <lwip_netconn_do_delconn+0x1d8>
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a0ba:	721a      	strb	r2, [r3, #8]
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f00a fbf9 	bl	80148b4 <sys_arch_unprotect>
 800a0c2:	e000      	b.n	800a0c6 <lwip_netconn_do_delconn+0x1e2>
        return;
 800a0c4:	bf00      	nop
  }
}
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	08015c14 	.word	0x08015c14
 800a0d0:	08015f28 	.word	0x08015f28
 800a0d4:	08015c6c 	.word	0x08015c6c
 800a0d8:	08015f3c 	.word	0x08015f3c
 800a0dc:	08015f5c 	.word	0x08015f5c
 800a0e0:	08015f78 	.word	0x08015f78
 800a0e4:	200082c0 	.word	0x200082c0

0800a0e8 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a0fc:	f113 0f0c 	cmn.w	r3, #12
 800a100:	da06      	bge.n	800a110 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	711a      	strb	r2, [r3, #4]
 800a10e:	e02f      	b.n	800a170 <lwip_netconn_do_bind+0x88>
  } else {
    msg->err = ERR_VAL;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	22fa      	movs	r2, #250	; 0xfa
 800a114:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d027      	beq.n	800a170 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a12a:	2b10      	cmp	r3, #16
 800a12c:	d010      	beq.n	800a150 <lwip_netconn_do_bind+0x68>
 800a12e:	2b20      	cmp	r3, #32
 800a130:	d11d      	bne.n	800a16e <lwip_netconn_do_bind+0x86>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6858      	ldr	r0, [r3, #4]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6899      	ldr	r1, [r3, #8]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	899b      	ldrh	r3, [r3, #12]
 800a140:	461a      	mov	r2, r3
 800a142:	f007 ff21 	bl	8011f88 <udp_bind>
 800a146:	4603      	mov	r3, r0
 800a148:	461a      	mov	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	711a      	strb	r2, [r3, #4]
        break;
 800a14e:	e00f      	b.n	800a170 <lwip_netconn_do_bind+0x88>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6858      	ldr	r0, [r3, #4]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6899      	ldr	r1, [r3, #8]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	899b      	ldrh	r3, [r3, #12]
 800a15e:	461a      	mov	r2, r3
 800a160:	f002 fcf2 	bl	800cb48 <tcp_bind>
 800a164:	4603      	mov	r3, r0
 800a166:	461a      	mov	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	711a      	strb	r2, [r3, #4]
        break;
 800a16c:	e000      	b.n	800a170 <lwip_netconn_do_bind+0x88>
#endif /* LWIP_TCP */
      default:
        break;
 800a16e:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d012      	beq.n	800a19e <lwip_netconn_do_bind+0xb6>
 800a178:	f00a fb8e 	bl	8014898 <sys_arch_protect>
 800a17c:	60b8      	str	r0, [r7, #8]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a186:	f113 0f0c 	cmn.w	r3, #12
 800a18a:	db05      	blt.n	800a198 <lwip_netconn_do_bind+0xb0>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a196:	721a      	strb	r2, [r3, #8]
 800a198:	68b8      	ldr	r0, [r7, #8]
 800a19a:	f00a fb8b 	bl	80148b4 <sys_arch_unprotect>
}
 800a19e:	bf00      	nop
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b088      	sub	sp, #32
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a1bc:	f113 0f0c 	cmn.w	r3, #12
 800a1c0:	da06      	bge.n	800a1d0 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	711a      	strb	r2, [r3, #4]
 800a1ce:	e090      	b.n	800a2f2 <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	22f5      	movs	r2, #245	; 0xf5
 800a1d4:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f000 8088 	beq.w	800a2f2 <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1ec:	2b10      	cmp	r3, #16
 800a1ee:	d17d      	bne.n	800a2ec <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	785b      	ldrb	r3, [r3, #1]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d16f      	bne.n	800a2da <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	7d1b      	ldrb	r3, [r3, #20]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	22fa      	movs	r2, #250	; 0xfa
 800a20a:	711a      	strb	r2, [r3, #4]
 800a20c:	e071      	b.n	800a2f2 <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a20e:	23ff      	movs	r3, #255	; 0xff
 800a210:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f107 020f 	add.w	r2, r7, #15
 800a21c:	7ef9      	ldrb	r1, [r7, #27]
 800a21e:	4618      	mov	r0, r3
 800a220:	f002 fd34 	bl	800cc8c <tcp_listen_with_backlog_and_err>
 800a224:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d104      	bne.n	800a236 <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800a22c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	711a      	strb	r2, [r3, #4]
 800a234:	e05d      	b.n	800a2f2 <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3310      	adds	r3, #16
 800a23c:	4618      	mov	r0, r3
 800a23e:	f00a fa25 	bl	801468c <sys_mbox_valid>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00b      	beq.n	800a260 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3310      	adds	r3, #16
 800a24e:	4618      	mov	r0, r3
 800a250:	f00a f992 	bl	8014578 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	3310      	adds	r3, #16
 800a25a:	4618      	mov	r0, r3
 800a25c:	f00a fa26 	bl	80146ac <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	2200      	movs	r2, #0
 800a264:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3314      	adds	r3, #20
 800a26c:	4618      	mov	r0, r3
 800a26e:	f00a fa0d 	bl	801468c <sys_mbox_valid>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10a      	bne.n	800a28e <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3314      	adds	r3, #20
 800a27e:	2106      	movs	r1, #6
 800a280:	4618      	mov	r0, r3
 800a282:	f00a f95f 	bl	8014544 <sys_mbox_new>
 800a286:	4603      	mov	r3, r0
 800a288:	461a      	mov	r2, r3
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d118      	bne.n	800a2ca <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2202      	movs	r2, #2
 800a29e:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	f003 fbb3 	bl	800da20 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	4919      	ldr	r1, [pc, #100]	; (800a328 <lwip_netconn_do_listen+0x180>)
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f003 fc20 	bl	800db08 <tcp_accept>
 800a2c8:	e013      	b.n	800a2f2 <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800a2ca:	6978      	ldr	r0, [r7, #20]
 800a2cc:	f002 fb1e 	bl	800c90c <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	605a      	str	r2, [r3, #4]
 800a2d8:	e00b      	b.n	800a2f2 <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	785b      	ldrb	r3, [r3, #1]
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d106      	bne.n	800a2f2 <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	711a      	strb	r2, [r3, #4]
 800a2ea:	e002      	b.n	800a2f2 <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	22f0      	movs	r2, #240	; 0xf0
 800a2f0:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d012      	beq.n	800a320 <lwip_netconn_do_listen+0x178>
 800a2fa:	f00a facd 	bl	8014898 <sys_arch_protect>
 800a2fe:	6138      	str	r0, [r7, #16]
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a308:	f113 0f0c 	cmn.w	r3, #12
 800a30c:	db05      	blt.n	800a31a <lwip_netconn_do_listen+0x172>
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	69fa      	ldr	r2, [r7, #28]
 800a314:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a318:	721a      	strb	r2, [r3, #8]
 800a31a:	6938      	ldr	r0, [r7, #16]
 800a31c:	f00a faca 	bl	80148b4 <sys_arch_unprotect>
}
 800a320:	bf00      	nop
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	08009705 	.word	0x08009705

0800a32c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	2200      	movs	r2, #0
 800a33c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d022      	beq.n	800a38e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a352:	2b10      	cmp	r3, #16
 800a354:	d11b      	bne.n	800a38e <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a362:	d202      	bcs.n	800a36a <lwip_netconn_do_recv+0x3e>
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	b29b      	uxth	r3, r3
 800a368:	e001      	b.n	800a36e <lwip_netconn_do_recv+0x42>
 800a36a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a36e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	89fa      	ldrh	r2, [r7, #14]
 800a378:	4611      	mov	r1, r2
 800a37a:	4618      	mov	r0, r3
 800a37c:	f002 fd6c 	bl	800ce58 <tcp_recved>
        remaining -= recved;
 800a380:	89fb      	ldrh	r3, [r7, #14]
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1e6      	bne.n	800a35c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d012      	beq.n	800a3bc <lwip_netconn_do_recv+0x90>
 800a396:	f00a fa7f 	bl	8014898 <sys_arch_protect>
 800a39a:	60b8      	str	r0, [r7, #8]
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a3a4:	f113 0f0c 	cmn.w	r3, #12
 800a3a8:	db05      	blt.n	800a3b6 <lwip_netconn_do_recv+0x8a>
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a3b4:	721a      	strb	r2, [r3, #8]
 800a3b6:	68b8      	ldr	r0, [r7, #8]
 800a3b8:	f00a fa7c 	bl	80148b4 <sys_arch_unprotect>
}
 800a3bc:	bf00      	nop
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08a      	sub	sp, #40	; 0x28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d106      	bne.n	800a3ea <lwip_netconn_do_writemore+0x26>
 800a3dc:	4b9b      	ldr	r3, [pc, #620]	; (800a64c <lwip_netconn_do_writemore+0x288>)
 800a3de:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800a3e2:	499b      	ldr	r1, [pc, #620]	; (800a650 <lwip_netconn_do_writemore+0x28c>)
 800a3e4:	489b      	ldr	r0, [pc, #620]	; (800a654 <lwip_netconn_do_writemore+0x290>)
 800a3e6:	f00a fb37 	bl	8014a58 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	785b      	ldrb	r3, [r3, #1]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d006      	beq.n	800a400 <lwip_netconn_do_writemore+0x3c>
 800a3f2:	4b96      	ldr	r3, [pc, #600]	; (800a64c <lwip_netconn_do_writemore+0x288>)
 800a3f4:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800a3f8:	4997      	ldr	r1, [pc, #604]	; (800a658 <lwip_netconn_do_writemore+0x294>)
 800a3fa:	4896      	ldr	r0, [pc, #600]	; (800a654 <lwip_netconn_do_writemore+0x290>)
 800a3fc:	f00a fb2c 	bl	8014a58 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	d106      	bne.n	800a416 <lwip_netconn_do_writemore+0x52>
 800a408:	4b90      	ldr	r3, [pc, #576]	; (800a64c <lwip_netconn_do_writemore+0x288>)
 800a40a:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800a40e:	4993      	ldr	r1, [pc, #588]	; (800a65c <lwip_netconn_do_writemore+0x298>)
 800a410:	4890      	ldr	r0, [pc, #576]	; (800a654 <lwip_netconn_do_writemore+0x290>)
 800a412:	f00a fb21 	bl	8014a58 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d106      	bne.n	800a42c <lwip_netconn_do_writemore+0x68>
 800a41e:	4b8b      	ldr	r3, [pc, #556]	; (800a64c <lwip_netconn_do_writemore+0x288>)
 800a420:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800a424:	498e      	ldr	r1, [pc, #568]	; (800a660 <lwip_netconn_do_writemore+0x29c>)
 800a426:	488b      	ldr	r0, [pc, #556]	; (800a654 <lwip_netconn_do_writemore+0x290>)
 800a428:	f00a fb16 	bl	8014a58 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a1a      	ldr	r2, [r3, #32]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	429a      	cmp	r2, r3
 800a438:	d306      	bcc.n	800a448 <lwip_netconn_do_writemore+0x84>
 800a43a:	4b84      	ldr	r3, [pc, #528]	; (800a64c <lwip_netconn_do_writemore+0x288>)
 800a43c:	f240 52e7 	movw	r2, #1511	; 0x5e7
 800a440:	4988      	ldr	r1, [pc, #544]	; (800a664 <lwip_netconn_do_writemore+0x2a0>)
 800a442:	4884      	ldr	r0, [pc, #528]	; (800a654 <lwip_netconn_do_writemore+0x290>)
 800a444:	f00a fb08 	bl	8014a58 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44c:	7c1b      	ldrb	r3, [r3, #16]
 800a44e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	7f1b      	ldrb	r3, [r3, #28]
 800a456:	f003 0302 	and.w	r3, r3, #2
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d105      	bne.n	800a46a <lwip_netconn_do_writemore+0xa6>
 800a45e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a462:	f003 0304 	and.w	r3, r3, #4
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <lwip_netconn_do_writemore+0xaa>
 800a46a:	2301      	movs	r3, #1
 800a46c:	e000      	b.n	800a470 <lwip_netconn_do_writemore+0xac>
 800a46e:	2300      	movs	r3, #0
 800a470:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	4413      	add	r3, r2
 800a480:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	68da      	ldr	r2, [r3, #12]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a1b      	ldr	r3, [r3, #32]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a496:	d309      	bcc.n	800a4ac <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800a498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a49c:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800a49e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a4a2:	f043 0302 	orr.w	r3, r3, #2
 800a4a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a4aa:	e001      	b.n	800a4b0 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a4b8:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800a4ba:	8afa      	ldrh	r2, [r7, #22]
 800a4bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d212      	bcs.n	800a4e8 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800a4c2:	8afb      	ldrh	r3, [r7, #22]
 800a4c4:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800a4c6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d006      	beq.n	800a4dc <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800a4ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d109      	bne.n	800a4e8 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800a4d4:	23f9      	movs	r3, #249	; 0xf9
 800a4d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800a4da:	e02a      	b.n	800a532 <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a4dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a4e0:	f043 0302 	orr.w	r3, r3, #2
 800a4e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a1a      	ldr	r2, [r3, #32]
 800a4ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4ee:	441a      	add	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d906      	bls.n	800a508 <lwip_netconn_do_writemore+0x144>
 800a4fa:	4b54      	ldr	r3, [pc, #336]	; (800a64c <lwip_netconn_do_writemore+0x288>)
 800a4fc:	f240 6213 	movw	r2, #1555	; 0x613
 800a500:	4959      	ldr	r1, [pc, #356]	; (800a668 <lwip_netconn_do_writemore+0x2a4>)
 800a502:	4854      	ldr	r0, [pc, #336]	; (800a654 <lwip_netconn_do_writemore+0x290>)
 800a504:	f00a faa8 	bl	8014a58 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6858      	ldr	r0, [r3, #4]
 800a50c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a510:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a512:	69f9      	ldr	r1, [r7, #28]
 800a514:	f006 f8bc 	bl	8010690 <tcp_write>
 800a518:	4603      	mov	r3, r0
 800a51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a51e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a522:	2b00      	cmp	r3, #0
 800a524:	d004      	beq.n	800a530 <lwip_netconn_do_writemore+0x16c>
 800a526:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52e:	d133      	bne.n	800a598 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800a530:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800a532:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a536:	2b00      	cmp	r3, #0
 800a538:	d017      	beq.n	800a56a <lwip_netconn_do_writemore+0x1a6>
 800a53a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	429a      	cmp	r2, r3
 800a544:	d211      	bcs.n	800a56a <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d005      	beq.n	800a55a <lwip_netconn_do_writemore+0x196>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a552:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a554:	2103      	movs	r1, #3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	7f1b      	ldrb	r3, [r3, #28]
 800a55e:	f043 0310 	orr.w	r3, r3, #16
 800a562:	b2da      	uxtb	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	771a      	strb	r2, [r3, #28]
 800a568:	e016      	b.n	800a598 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a572:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a576:	d305      	bcc.n	800a584 <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a580:	2b04      	cmp	r3, #4
 800a582:	d909      	bls.n	800a598 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d005      	beq.n	800a598 <lwip_netconn_do_writemore+0x1d4>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a590:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a592:	2103      	movs	r1, #3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d134      	bne.n	800a60a <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a1a      	ldr	r2, [r3, #32]
 800a5a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5a6:	441a      	add	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a1a      	ldr	r2, [r3, #32]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d003      	beq.n	800a5c2 <lwip_netconn_do_writemore+0x1fe>
 800a5ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d007      	beq.n	800a5d2 <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	6a12      	ldr	r2, [r2, #32]
 800a5ca:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f006 fd0c 	bl	8010ff4 <tcp_output>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800a5e0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800a5e4:	f113 0f0c 	cmn.w	r3, #12
 800a5e8:	db04      	blt.n	800a5f4 <lwip_netconn_do_writemore+0x230>
 800a5ea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800a5ee:	f113 0f04 	cmn.w	r3, #4
 800a5f2:	d151      	bne.n	800a698 <lwip_netconn_do_writemore+0x2d4>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a5f4:	7d3b      	ldrb	r3, [r7, #20]
 800a5f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a604:	2200      	movs	r2, #0
 800a606:	60da      	str	r2, [r3, #12]
 800a608:	e046      	b.n	800a698 <lwip_netconn_do_writemore+0x2d4>
      }
    } else if (err == ERR_MEM) {
 800a60a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a612:	d13a      	bne.n	800a68a <lwip_netconn_do_writemore+0x2c6>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	4618      	mov	r0, r3
 800a61a:	f006 fceb 	bl	8010ff4 <tcp_output>
 800a61e:	4603      	mov	r3, r0
 800a620:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800a622:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800a626:	f113 0f0c 	cmn.w	r3, #12
 800a62a:	db04      	blt.n	800a636 <lwip_netconn_do_writemore+0x272>
 800a62c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800a630:	f113 0f04 	cmn.w	r3, #4
 800a634:	d11a      	bne.n	800a66c <lwip_netconn_do_writemore+0x2a8>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a636:	7d7b      	ldrb	r3, [r7, #21]
 800a638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800a63c:	2301      	movs	r3, #1
 800a63e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	2200      	movs	r2, #0
 800a648:	60da      	str	r2, [r3, #12]
 800a64a:	e025      	b.n	800a698 <lwip_netconn_do_writemore+0x2d4>
 800a64c:	08015c14 	.word	0x08015c14
 800a650:	08015d38 	.word	0x08015d38
 800a654:	08015c6c 	.word	0x08015c6c
 800a658:	08016018 	.word	0x08016018
 800a65c:	08015d48 	.word	0x08015d48
 800a660:	08016038 	.word	0x08016038
 800a664:	08016050 	.word	0x08016050
 800a668:	08016084 	.word	0x08016084
      } else if (dontblock) {
 800a66c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a670:	2b00      	cmp	r3, #0
 800a672:	d011      	beq.n	800a698 <lwip_netconn_do_writemore+0x2d4>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800a674:	23f9      	movs	r3, #249	; 0xf9
 800a676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800a67a:	2301      	movs	r3, #1
 800a67c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	2200      	movs	r2, #0
 800a686:	60da      	str	r2, [r3, #12]
 800a688:	e006      	b.n	800a698 <lwip_netconn_do_writemore+0x2d4>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a68a:	2301      	movs	r3, #1
 800a68c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	2200      	movs	r2, #0
 800a696:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800a698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d02c      	beq.n	800a6fa <lwip_netconn_do_writemore+0x336>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	330c      	adds	r3, #12
 800a6a8:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a6b2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00f      	beq.n	800a6ec <lwip_netconn_do_writemore+0x328>
 800a6cc:	f00a f8e4 	bl	8014898 <sys_arch_protect>
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a6d8:	f113 0f0c 	cmn.w	r3, #12
 800a6dc:	db03      	blt.n	800a6e6 <lwip_netconn_do_writemore+0x322>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a6e4:	721a      	strb	r2, [r3, #8]
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f00a f8e4 	bl	80148b4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d006      	beq.n	800a700 <lwip_netconn_do_writemore+0x33c>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a6f2:	6938      	ldr	r0, [r7, #16]
 800a6f4:	f00a f83c 	bl	8014770 <sys_sem_signal>
 800a6f8:	e002      	b.n	800a700 <lwip_netconn_do_writemore+0x33c>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fe:	e000      	b.n	800a702 <lwip_netconn_do_writemore+0x33e>
  }
#endif
  return ERR_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3728      	adds	r7, #40	; 0x28
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop

0800a70c <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a720:	f113 0f0c 	cmn.w	r3, #12
 800a724:	da06      	bge.n	800a734 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	711a      	strb	r2, [r3, #4]
 800a732:	e072      	b.n	800a81a <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a73e:	2b10      	cmp	r3, #16
 800a740:	d168      	bne.n	800a814 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	785b      	ldrb	r3, [r3, #1]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	22fb      	movs	r2, #251	; 0xfb
 800a750:	711a      	strb	r2, [r3, #4]
 800a752:	e062      	b.n	800a81a <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d056      	beq.n	800a80c <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2201      	movs	r2, #1
 800a764:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d104      	bne.n	800a77a <lwip_netconn_do_write+0x6e>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d006      	beq.n	800a788 <lwip_netconn_do_write+0x7c>
 800a77a:	4b36      	ldr	r3, [pc, #216]	; (800a854 <lwip_netconn_do_write+0x148>)
 800a77c:	f240 6282 	movw	r2, #1666	; 0x682
 800a780:	4935      	ldr	r1, [pc, #212]	; (800a858 <lwip_netconn_do_write+0x14c>)
 800a782:	4836      	ldr	r0, [pc, #216]	; (800a85c <lwip_netconn_do_write+0x150>)
 800a784:	f00a f968 	bl	8014a58 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d106      	bne.n	800a79e <lwip_netconn_do_write+0x92>
 800a790:	4b30      	ldr	r3, [pc, #192]	; (800a854 <lwip_netconn_do_write+0x148>)
 800a792:	f240 6284 	movw	r2, #1668	; 0x684
 800a796:	4932      	ldr	r1, [pc, #200]	; (800a860 <lwip_netconn_do_write+0x154>)
 800a798:	4830      	ldr	r0, [pc, #192]	; (800a85c <lwip_netconn_do_write+0x150>)
 800a79a:	f00a f95d 	bl	8014a58 <iprintf>
        msg->conn->current_msg = msg;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff fe05 	bl	800a3c4 <lwip_netconn_do_writemore>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d044      	beq.n	800a84a <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	785b      	ldrb	r3, [r3, #1]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d006      	beq.n	800a7d8 <lwip_netconn_do_write+0xcc>
 800a7ca:	4b22      	ldr	r3, [pc, #136]	; (800a854 <lwip_netconn_do_write+0x148>)
 800a7cc:	f240 6289 	movw	r2, #1673	; 0x689
 800a7d0:	4924      	ldr	r1, [pc, #144]	; (800a864 <lwip_netconn_do_write+0x158>)
 800a7d2:	4822      	ldr	r0, [pc, #136]	; (800a85c <lwip_netconn_do_write+0x150>)
 800a7d4:	f00a f940 	bl	8014a58 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a7d8:	4823      	ldr	r0, [pc, #140]	; (800a868 <lwip_netconn_do_write+0x15c>)
 800a7da:	f00a f830 	bl	801483e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	330c      	adds	r3, #12
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f009 ff91 	bl	801470e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a7ec:	481e      	ldr	r0, [pc, #120]	; (800a868 <lwip_netconn_do_write+0x15c>)
 800a7ee:	f00a f817 	bl	8014820 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	785b      	ldrb	r3, [r3, #1]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d126      	bne.n	800a84a <lwip_netconn_do_write+0x13e>
 800a7fc:	4b15      	ldr	r3, [pc, #84]	; (800a854 <lwip_netconn_do_write+0x148>)
 800a7fe:	f240 628d 	movw	r2, #1677	; 0x68d
 800a802:	4918      	ldr	r1, [pc, #96]	; (800a864 <lwip_netconn_do_write+0x158>)
 800a804:	4815      	ldr	r0, [pc, #84]	; (800a85c <lwip_netconn_do_write+0x150>)
 800a806:	f00a f927 	bl	8014a58 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a80a:	e01e      	b.n	800a84a <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	22f5      	movs	r2, #245	; 0xf5
 800a810:	711a      	strb	r2, [r3, #4]
 800a812:	e002      	b.n	800a81a <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	22fa      	movs	r2, #250	; 0xfa
 800a818:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d014      	beq.n	800a84c <lwip_netconn_do_write+0x140>
 800a822:	f00a f839 	bl	8014898 <sys_arch_protect>
 800a826:	60b8      	str	r0, [r7, #8]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a830:	f113 0f0c 	cmn.w	r3, #12
 800a834:	db05      	blt.n	800a842 <lwip_netconn_do_write+0x136>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a840:	721a      	strb	r2, [r3, #8]
 800a842:	68b8      	ldr	r0, [r7, #8]
 800a844:	f00a f836 	bl	80148b4 <sys_arch_unprotect>
 800a848:	e000      	b.n	800a84c <lwip_netconn_do_write+0x140>
        return;
 800a84a:	bf00      	nop
}
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	08015c14 	.word	0x08015c14
 800a858:	08015f5c 	.word	0x08015f5c
 800a85c:	08015c6c 	.word	0x08015c6c
 800a860:	080160b0 	.word	0x080160b0
 800a864:	08015f78 	.word	0x08015f78
 800a868:	200082c0 	.word	0x200082c0

0800a86c <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	785b      	ldrb	r3, [r3, #1]
 800a87e:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d06e      	beq.n	800a968 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a894:	2b10      	cmp	r3, #16
 800a896:	d167      	bne.n	800a968 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d002      	beq.n	800a8a6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a8a0:	7cfb      	ldrb	r3, [r7, #19]
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d060      	beq.n	800a968 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a8a6:	7cfb      	ldrb	r3, [r7, #19]
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d103      	bne.n	800a8b4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	22f5      	movs	r2, #245	; 0xf5
 800a8b0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a8b2:	e05c      	b.n	800a96e <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800a8b4:	7cfb      	ldrb	r3, [r7, #19]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d103      	bne.n	800a8c2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	22fb      	movs	r2, #251	; 0xfb
 800a8be:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a8c0:	e055      	b.n	800a96e <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	7a1b      	ldrb	r3, [r3, #8]
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d004      	beq.n	800a8d8 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff f90a 	bl	8009aec <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d104      	bne.n	800a8ec <lwip_netconn_do_close+0x80>
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6a1b      	ldr	r3, [r3, #32]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d006      	beq.n	800a8fa <lwip_netconn_do_close+0x8e>
 800a8ec:	4b2e      	ldr	r3, [pc, #184]	; (800a9a8 <lwip_netconn_do_close+0x13c>)
 800a8ee:	f240 721b 	movw	r2, #1819	; 0x71b
 800a8f2:	492e      	ldr	r1, [pc, #184]	; (800a9ac <lwip_netconn_do_close+0x140>)
 800a8f4:	482e      	ldr	r0, [pc, #184]	; (800a9b0 <lwip_netconn_do_close+0x144>)
 800a8f6:	f00a f8af 	bl	8014a58 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2204      	movs	r2, #4
 800a900:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2100      	movs	r1, #0
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff f96b 	bl	8009bec <lwip_netconn_do_close_internal>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d040      	beq.n	800a99e <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	785b      	ldrb	r3, [r3, #1]
 800a922:	2b04      	cmp	r3, #4
 800a924:	d006      	beq.n	800a934 <lwip_netconn_do_close+0xc8>
 800a926:	4b20      	ldr	r3, [pc, #128]	; (800a9a8 <lwip_netconn_do_close+0x13c>)
 800a928:	f240 7221 	movw	r2, #1825	; 0x721
 800a92c:	4921      	ldr	r1, [pc, #132]	; (800a9b4 <lwip_netconn_do_close+0x148>)
 800a92e:	4820      	ldr	r0, [pc, #128]	; (800a9b0 <lwip_netconn_do_close+0x144>)
 800a930:	f00a f892 	bl	8014a58 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a934:	4820      	ldr	r0, [pc, #128]	; (800a9b8 <lwip_netconn_do_close+0x14c>)
 800a936:	f009 ff82 	bl	801483e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	330c      	adds	r3, #12
 800a940:	2100      	movs	r1, #0
 800a942:	4618      	mov	r0, r3
 800a944:	f009 fee3 	bl	801470e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a948:	481b      	ldr	r0, [pc, #108]	; (800a9b8 <lwip_netconn_do_close+0x14c>)
 800a94a:	f009 ff69 	bl	8014820 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	785b      	ldrb	r3, [r3, #1]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d022      	beq.n	800a99e <lwip_netconn_do_close+0x132>
 800a958:	4b13      	ldr	r3, [pc, #76]	; (800a9a8 <lwip_netconn_do_close+0x13c>)
 800a95a:	f240 7225 	movw	r2, #1829	; 0x725
 800a95e:	4915      	ldr	r1, [pc, #84]	; (800a9b4 <lwip_netconn_do_close+0x148>)
 800a960:	4813      	ldr	r0, [pc, #76]	; (800a9b0 <lwip_netconn_do_close+0x144>)
 800a962:	f00a f879 	bl	8014a58 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a966:	e01a      	b.n	800a99e <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	22f5      	movs	r2, #245	; 0xf5
 800a96c:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d014      	beq.n	800a9a0 <lwip_netconn_do_close+0x134>
 800a976:	f009 ff8f 	bl	8014898 <sys_arch_protect>
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a984:	f113 0f0c 	cmn.w	r3, #12
 800a988:	db05      	blt.n	800a996 <lwip_netconn_do_close+0x12a>
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a994:	721a      	strb	r2, [r3, #8]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f009 ff8c 	bl	80148b4 <sys_arch_unprotect>
 800a99c:	e000      	b.n	800a9a0 <lwip_netconn_do_close+0x134>
      return;
 800a99e:	bf00      	nop
}
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	08015c14 	.word	0x08015c14
 800a9ac:	08015f5c 	.word	0x08015f5c
 800a9b0:	08015c6c 	.word	0x08015c6c
 800a9b4:	08015f78 	.word	0x08015f78
 800a9b8:	200082c0 	.word	0x200082c0

0800a9bc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d013      	beq.n	800a9f2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00b      	beq.n	800a9ea <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f001 fb60 	bl	800c09c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	605a      	str	r2, [r3, #4]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a9ea:	6879      	ldr	r1, [r7, #4]
 800a9ec:	2006      	movs	r0, #6
 800a9ee:	f000 fdbd 	bl	800b56c <memp_free>
  }
}
 800a9f2:	bf00      	nop
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
	...

0800a9fc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800aa04:	4b2b      	ldr	r3, [pc, #172]	; (800aab4 <tcpip_thread+0xb8>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d005      	beq.n	800aa18 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800aa0c:	4b29      	ldr	r3, [pc, #164]	; (800aab4 <tcpip_thread+0xb8>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a29      	ldr	r2, [pc, #164]	; (800aab8 <tcpip_thread+0xbc>)
 800aa12:	6812      	ldr	r2, [r2, #0]
 800aa14:	4610      	mov	r0, r2
 800aa16:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800aa18:	4828      	ldr	r0, [pc, #160]	; (800aabc <tcpip_thread+0xc0>)
 800aa1a:	f009 ff01 	bl	8014820 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800aa1e:	4827      	ldr	r0, [pc, #156]	; (800aabc <tcpip_thread+0xc0>)
 800aa20:	f009 ff0d 	bl	801483e <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800aa24:	f107 030c 	add.w	r3, r7, #12
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4825      	ldr	r0, [pc, #148]	; (800aac0 <tcpip_thread+0xc4>)
 800aa2c:	f007 f928 	bl	8011c80 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800aa30:	4822      	ldr	r0, [pc, #136]	; (800aabc <tcpip_thread+0xc0>)
 800aa32:	f009 fef5 	bl	8014820 <sys_mutex_lock>
    if (msg == NULL) {
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d106      	bne.n	800aa4a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aa3c:	4b21      	ldr	r3, [pc, #132]	; (800aac4 <tcpip_thread+0xc8>)
 800aa3e:	2269      	movs	r2, #105	; 0x69
 800aa40:	4921      	ldr	r1, [pc, #132]	; (800aac8 <tcpip_thread+0xcc>)
 800aa42:	4822      	ldr	r0, [pc, #136]	; (800aacc <tcpip_thread+0xd0>)
 800aa44:	f00a f808 	bl	8014a58 <iprintf>
      continue;
 800aa48:	e032      	b.n	800aab0 <tcpip_thread+0xb4>
    }
    switch (msg->type) {
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	d020      	beq.n	800aa94 <tcpip_thread+0x98>
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	dc25      	bgt.n	800aaa2 <tcpip_thread+0xa6>
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d002      	beq.n	800aa60 <tcpip_thread+0x64>
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d00e      	beq.n	800aa7c <tcpip_thread+0x80>
 800aa5e:	e020      	b.n	800aaa2 <tcpip_thread+0xa6>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	6850      	ldr	r0, [r2, #4]
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	6892      	ldr	r2, [r2, #8]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4619      	mov	r1, r3
 800aa74:	2009      	movs	r0, #9
 800aa76:	f000 fd79 	bl	800b56c <memp_free>
      break;
 800aa7a:	e019      	b.n	800aab0 <tcpip_thread+0xb4>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	6892      	ldr	r2, [r2, #8]
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	2008      	movs	r0, #8
 800aa8e:	f000 fd6d 	bl	800b56c <memp_free>
      break;
 800aa92:	e00d      	b.n	800aab0 <tcpip_thread+0xb4>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	6892      	ldr	r2, [r2, #8]
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	4798      	blx	r3
      break;
 800aaa0:	e006      	b.n	800aab0 <tcpip_thread+0xb4>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aaa2:	4b08      	ldr	r3, [pc, #32]	; (800aac4 <tcpip_thread+0xc8>)
 800aaa4:	229b      	movs	r2, #155	; 0x9b
 800aaa6:	4908      	ldr	r1, [pc, #32]	; (800aac8 <tcpip_thread+0xcc>)
 800aaa8:	4808      	ldr	r0, [pc, #32]	; (800aacc <tcpip_thread+0xd0>)
 800aaaa:	f009 ffd5 	bl	8014a58 <iprintf>
      break;
 800aaae:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800aab0:	e7b5      	b.n	800aa1e <tcpip_thread+0x22>
 800aab2:	bf00      	nop
 800aab4:	200082b4 	.word	0x200082b4
 800aab8:	200082b8 	.word	0x200082b8
 800aabc:	200082c0 	.word	0x200082c0
 800aac0:	200082bc 	.word	0x200082bc
 800aac4:	080160dc 	.word	0x080160dc
 800aac8:	0801610c 	.word	0x0801610c
 800aacc:	0801612c 	.word	0x0801612c

0800aad0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800aadc:	481a      	ldr	r0, [pc, #104]	; (800ab48 <tcpip_inpkt+0x78>)
 800aade:	f009 fdd5 	bl	801468c <sys_mbox_valid>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d105      	bne.n	800aaf4 <tcpip_inpkt+0x24>
 800aae8:	4b18      	ldr	r3, [pc, #96]	; (800ab4c <tcpip_inpkt+0x7c>)
 800aaea:	22b5      	movs	r2, #181	; 0xb5
 800aaec:	4918      	ldr	r1, [pc, #96]	; (800ab50 <tcpip_inpkt+0x80>)
 800aaee:	4819      	ldr	r0, [pc, #100]	; (800ab54 <tcpip_inpkt+0x84>)
 800aaf0:	f009 ffb2 	bl	8014a58 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800aaf4:	2009      	movs	r0, #9
 800aaf6:	f000 fce7 	bl	800b4c8 <memp_malloc>
 800aafa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d102      	bne.n	800ab08 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ab02:	f04f 33ff 	mov.w	r3, #4294967295
 800ab06:	e01a      	b.n	800ab3e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800ab20:	6979      	ldr	r1, [r7, #20]
 800ab22:	4809      	ldr	r0, [pc, #36]	; (800ab48 <tcpip_inpkt+0x78>)
 800ab24:	f009 fd50 	bl	80145c8 <sys_mbox_trypost>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d006      	beq.n	800ab3c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ab2e:	6979      	ldr	r1, [r7, #20]
 800ab30:	2009      	movs	r0, #9
 800ab32:	f000 fd1b 	bl	800b56c <memp_free>
    return ERR_MEM;
 800ab36:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3a:	e000      	b.n	800ab3e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ab3c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3718      	adds	r7, #24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	200082bc 	.word	0x200082bc
 800ab4c:	080160dc 	.word	0x080160dc
 800ab50:	08016154 	.word	0x08016154
 800ab54:	0801612c 	.word	0x0801612c

0800ab58 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ab68:	f003 0318 	and.w	r3, r3, #24
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d006      	beq.n	800ab7e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ab70:	4a08      	ldr	r2, [pc, #32]	; (800ab94 <tcpip_input+0x3c>)
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7ff ffab 	bl	800aad0 <tcpip_inpkt>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	e005      	b.n	800ab8a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800ab7e:	4a06      	ldr	r2, [pc, #24]	; (800ab98 <tcpip_input+0x40>)
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7ff ffa4 	bl	800aad0 <tcpip_inpkt>
 800ab88:	4603      	mov	r3, r0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3708      	adds	r7, #8
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	08014389 	.word	0x08014389
 800ab98:	0801334d 	.word	0x0801334d

0800ab9c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b086      	sub	sp, #24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	4613      	mov	r3, r2
 800aba8:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800abaa:	481d      	ldr	r0, [pc, #116]	; (800ac20 <tcpip_callback_with_block+0x84>)
 800abac:	f009 fd6e 	bl	801468c <sys_mbox_valid>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d105      	bne.n	800abc2 <tcpip_callback_with_block+0x26>
 800abb6:	4b1b      	ldr	r3, [pc, #108]	; (800ac24 <tcpip_callback_with_block+0x88>)
 800abb8:	22ee      	movs	r2, #238	; 0xee
 800abba:	491b      	ldr	r1, [pc, #108]	; (800ac28 <tcpip_callback_with_block+0x8c>)
 800abbc:	481b      	ldr	r0, [pc, #108]	; (800ac2c <tcpip_callback_with_block+0x90>)
 800abbe:	f009 ff4b 	bl	8014a58 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800abc2:	2008      	movs	r0, #8
 800abc4:	f000 fc80 	bl	800b4c8 <memp_malloc>
 800abc8:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d102      	bne.n	800abd6 <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800abd0:	f04f 33ff 	mov.w	r3, #4294967295
 800abd4:	e01f      	b.n	800ac16 <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2203      	movs	r2, #3
 800abda:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	609a      	str	r2, [r3, #8]
  if (block) {
 800abe8:	79fb      	ldrb	r3, [r7, #7]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d004      	beq.n	800abf8 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800abee:	6979      	ldr	r1, [r7, #20]
 800abf0:	480b      	ldr	r0, [pc, #44]	; (800ac20 <tcpip_callback_with_block+0x84>)
 800abf2:	f009 fcd3 	bl	801459c <sys_mbox_post>
 800abf6:	e00d      	b.n	800ac14 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800abf8:	6979      	ldr	r1, [r7, #20]
 800abfa:	4809      	ldr	r0, [pc, #36]	; (800ac20 <tcpip_callback_with_block+0x84>)
 800abfc:	f009 fce4 	bl	80145c8 <sys_mbox_trypost>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d006      	beq.n	800ac14 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ac06:	6979      	ldr	r1, [r7, #20]
 800ac08:	2008      	movs	r0, #8
 800ac0a:	f000 fcaf 	bl	800b56c <memp_free>
      return ERR_MEM;
 800ac0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac12:	e000      	b.n	800ac16 <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	200082bc 	.word	0x200082bc
 800ac24:	080160dc 	.word	0x080160dc
 800ac28:	08016154 	.word	0x08016154
 800ac2c:	0801612c 	.word	0x0801612c

0800ac30 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ac3c:	4806      	ldr	r0, [pc, #24]	; (800ac58 <tcpip_send_msg_wait_sem+0x28>)
 800ac3e:	f009 fdef 	bl	8014820 <sys_mutex_lock>
  fn(apimsg);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	68b8      	ldr	r0, [r7, #8]
 800ac46:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ac48:	4803      	ldr	r0, [pc, #12]	; (800ac58 <tcpip_send_msg_wait_sem+0x28>)
 800ac4a:	f009 fdf8 	bl	801483e <sys_mutex_unlock>
  return ERR_OK;
 800ac4e:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	200082c0 	.word	0x200082c0

0800ac5c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af02      	add	r7, sp, #8
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ac66:	f000 f868 	bl	800ad3a <lwip_init>

  tcpip_init_done = initfunc;
 800ac6a:	4a17      	ldr	r2, [pc, #92]	; (800acc8 <tcpip_init+0x6c>)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ac70:	4a16      	ldr	r2, [pc, #88]	; (800accc <tcpip_init+0x70>)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ac76:	2106      	movs	r1, #6
 800ac78:	4815      	ldr	r0, [pc, #84]	; (800acd0 <tcpip_init+0x74>)
 800ac7a:	f009 fc63 	bl	8014544 <sys_mbox_new>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d006      	beq.n	800ac92 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ac84:	4b13      	ldr	r3, [pc, #76]	; (800acd4 <tcpip_init+0x78>)
 800ac86:	f240 12d5 	movw	r2, #469	; 0x1d5
 800ac8a:	4913      	ldr	r1, [pc, #76]	; (800acd8 <tcpip_init+0x7c>)
 800ac8c:	4813      	ldr	r0, [pc, #76]	; (800acdc <tcpip_init+0x80>)
 800ac8e:	f009 fee3 	bl	8014a58 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ac92:	4813      	ldr	r0, [pc, #76]	; (800ace0 <tcpip_init+0x84>)
 800ac94:	f009 fdae 	bl	80147f4 <sys_mutex_new>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d006      	beq.n	800acac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ac9e:	4b0d      	ldr	r3, [pc, #52]	; (800acd4 <tcpip_init+0x78>)
 800aca0:	f240 12d9 	movw	r2, #473	; 0x1d9
 800aca4:	490f      	ldr	r1, [pc, #60]	; (800ace4 <tcpip_init+0x88>)
 800aca6:	480d      	ldr	r0, [pc, #52]	; (800acdc <tcpip_init+0x80>)
 800aca8:	f009 fed6 	bl	8014a58 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800acac:	2318      	movs	r3, #24
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acb4:	2200      	movs	r2, #0
 800acb6:	490c      	ldr	r1, [pc, #48]	; (800ace8 <tcpip_init+0x8c>)
 800acb8:	480c      	ldr	r0, [pc, #48]	; (800acec <tcpip_init+0x90>)
 800acba:	f009 fdcd 	bl	8014858 <sys_thread_new>
}
 800acbe:	bf00      	nop
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	200082b4 	.word	0x200082b4
 800accc:	200082b8 	.word	0x200082b8
 800acd0:	200082bc 	.word	0x200082bc
 800acd4:	080160dc 	.word	0x080160dc
 800acd8:	08016164 	.word	0x08016164
 800acdc:	0801612c 	.word	0x0801612c
 800ace0:	200082c0 	.word	0x200082c0
 800ace4:	08016188 	.word	0x08016188
 800ace8:	0800a9fd 	.word	0x0800a9fd
 800acec:	080161ac 	.word	0x080161ac

0800acf0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800acfa:	88fb      	ldrh	r3, [r7, #6]
 800acfc:	ba5b      	rev16	r3, r3
 800acfe:	b29b      	uxth	r3, r3
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bc80      	pop	{r7}
 800ad08:	4770      	bx	lr

0800ad0a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b083      	sub	sp, #12
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	061a      	lsls	r2, r3, #24
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	021b      	lsls	r3, r3, #8
 800ad1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad1e:	431a      	orrs	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	0a1b      	lsrs	r3, r3, #8
 800ad24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ad28:	431a      	orrs	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	0e1b      	lsrs	r3, r3, #24
 800ad2e:	4313      	orrs	r3, r2
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bc80      	pop	{r7}
 800ad38:	4770      	bx	lr

0800ad3a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ad44:	f009 fd4a 	bl	80147dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ad48:	f000 f8a6 	bl	800ae98 <mem_init>
  memp_init();
 800ad4c:	f000 fb70 	bl	800b430 <memp_init>
  pbuf_init();
  netif_init();
 800ad50:	f000 fc36 	bl	800b5c0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ad54:	f006 ffba 	bl	8011ccc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ad58:	f001 fc14 	bl	800c584 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800ad5c:	f006 fe4c 	bl	80119f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ad60:	bf00      	nop
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ad70:	4b40      	ldr	r3, [pc, #256]	; (800ae74 <plug_holes+0x10c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d206      	bcs.n	800ad88 <plug_holes+0x20>
 800ad7a:	4b3f      	ldr	r3, [pc, #252]	; (800ae78 <plug_holes+0x110>)
 800ad7c:	f240 125d 	movw	r2, #349	; 0x15d
 800ad80:	493e      	ldr	r1, [pc, #248]	; (800ae7c <plug_holes+0x114>)
 800ad82:	483f      	ldr	r0, [pc, #252]	; (800ae80 <plug_holes+0x118>)
 800ad84:	f009 fe68 	bl	8014a58 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ad88:	4b3e      	ldr	r3, [pc, #248]	; (800ae84 <plug_holes+0x11c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d306      	bcc.n	800ada0 <plug_holes+0x38>
 800ad92:	4b39      	ldr	r3, [pc, #228]	; (800ae78 <plug_holes+0x110>)
 800ad94:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ad98:	493b      	ldr	r1, [pc, #236]	; (800ae88 <plug_holes+0x120>)
 800ad9a:	4839      	ldr	r0, [pc, #228]	; (800ae80 <plug_holes+0x118>)
 800ad9c:	f009 fe5c 	bl	8014a58 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	791b      	ldrb	r3, [r3, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d006      	beq.n	800adb6 <plug_holes+0x4e>
 800ada8:	4b33      	ldr	r3, [pc, #204]	; (800ae78 <plug_holes+0x110>)
 800adaa:	f240 125f 	movw	r2, #351	; 0x15f
 800adae:	4937      	ldr	r1, [pc, #220]	; (800ae8c <plug_holes+0x124>)
 800adb0:	4833      	ldr	r0, [pc, #204]	; (800ae80 <plug_holes+0x118>)
 800adb2:	f009 fe51 	bl	8014a58 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800adbe:	d906      	bls.n	800adce <plug_holes+0x66>
 800adc0:	4b2d      	ldr	r3, [pc, #180]	; (800ae78 <plug_holes+0x110>)
 800adc2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800adc6:	4932      	ldr	r1, [pc, #200]	; (800ae90 <plug_holes+0x128>)
 800adc8:	482d      	ldr	r0, [pc, #180]	; (800ae80 <plug_holes+0x118>)
 800adca:	f009 fe45 	bl	8014a58 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800adce:	4b29      	ldr	r3, [pc, #164]	; (800ae74 <plug_holes+0x10c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	8812      	ldrh	r2, [r2, #0]
 800add6:	4413      	add	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d01f      	beq.n	800ae22 <plug_holes+0xba>
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	791b      	ldrb	r3, [r3, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d11b      	bne.n	800ae22 <plug_holes+0xba>
 800adea:	4b26      	ldr	r3, [pc, #152]	; (800ae84 <plug_holes+0x11c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d016      	beq.n	800ae22 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800adf4:	4b27      	ldr	r3, [pc, #156]	; (800ae94 <plug_holes+0x12c>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d102      	bne.n	800ae04 <plug_holes+0x9c>
      lfree = mem;
 800adfe:	4a25      	ldr	r2, [pc, #148]	; (800ae94 <plug_holes+0x12c>)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	881a      	ldrh	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800ae0c:	4b19      	ldr	r3, [pc, #100]	; (800ae74 <plug_holes+0x10c>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	1ad1      	subs	r1, r2, r3
 800ae14:	4b17      	ldr	r3, [pc, #92]	; (800ae74 <plug_holes+0x10c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	8812      	ldrh	r2, [r2, #0]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	b28a      	uxth	r2, r1
 800ae20:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800ae22:	4b14      	ldr	r3, [pc, #80]	; (800ae74 <plug_holes+0x10c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	8852      	ldrh	r2, [r2, #2]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d01a      	beq.n	800ae6c <plug_holes+0x104>
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	791b      	ldrb	r3, [r3, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d116      	bne.n	800ae6c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae3e:	4b15      	ldr	r3, [pc, #84]	; (800ae94 <plug_holes+0x12c>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d102      	bne.n	800ae4e <plug_holes+0xe6>
      lfree = pmem;
 800ae48:	4a12      	ldr	r2, [pc, #72]	; (800ae94 <plug_holes+0x12c>)
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	881a      	ldrh	r2, [r3, #0]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800ae56:	4b07      	ldr	r3, [pc, #28]	; (800ae74 <plug_holes+0x10c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	1ad1      	subs	r1, r2, r3
 800ae5e:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <plug_holes+0x10c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	8812      	ldrh	r2, [r2, #0]
 800ae66:	4413      	add	r3, r2
 800ae68:	b28a      	uxth	r2, r1
 800ae6a:	805a      	strh	r2, [r3, #2]
  }
}
 800ae6c:	bf00      	nop
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20008930 	.word	0x20008930
 800ae78:	080161bc 	.word	0x080161bc
 800ae7c:	080161ec 	.word	0x080161ec
 800ae80:	08016204 	.word	0x08016204
 800ae84:	20008934 	.word	0x20008934
 800ae88:	0801622c 	.word	0x0801622c
 800ae8c:	08016248 	.word	0x08016248
 800ae90:	08016264 	.word	0x08016264
 800ae94:	20008938 	.word	0x20008938

0800ae98 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ae9e:	4b1e      	ldr	r3, [pc, #120]	; (800af18 <mem_init+0x80>)
 800aea0:	3303      	adds	r3, #3
 800aea2:	f023 0303 	bic.w	r3, r3, #3
 800aea6:	461a      	mov	r2, r3
 800aea8:	4b1c      	ldr	r3, [pc, #112]	; (800af1c <mem_init+0x84>)
 800aeaa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800aeac:	4b1b      	ldr	r3, [pc, #108]	; (800af1c <mem_init+0x84>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aeb8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800aec6:	4b15      	ldr	r3, [pc, #84]	; (800af1c <mem_init+0x84>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800aece:	4a14      	ldr	r2, [pc, #80]	; (800af20 <mem_init+0x88>)
 800aed0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800aed2:	4b13      	ldr	r3, [pc, #76]	; (800af20 <mem_init+0x88>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2201      	movs	r2, #1
 800aed8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800aeda:	4b11      	ldr	r3, [pc, #68]	; (800af20 <mem_init+0x88>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aee2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aee4:	4b0e      	ldr	r3, [pc, #56]	; (800af20 <mem_init+0x88>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aeec:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800aeee:	4b0b      	ldr	r3, [pc, #44]	; (800af1c <mem_init+0x84>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a0c      	ldr	r2, [pc, #48]	; (800af24 <mem_init+0x8c>)
 800aef4:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800aef6:	480c      	ldr	r0, [pc, #48]	; (800af28 <mem_init+0x90>)
 800aef8:	f009 fc7c 	bl	80147f4 <sys_mutex_new>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d006      	beq.n	800af10 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800af02:	4b0a      	ldr	r3, [pc, #40]	; (800af2c <mem_init+0x94>)
 800af04:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800af08:	4909      	ldr	r1, [pc, #36]	; (800af30 <mem_init+0x98>)
 800af0a:	480a      	ldr	r0, [pc, #40]	; (800af34 <mem_init+0x9c>)
 800af0c:	f009 fda4 	bl	8014a58 <iprintf>
  }
}
 800af10:	bf00      	nop
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	200082dc 	.word	0x200082dc
 800af1c:	20008930 	.word	0x20008930
 800af20:	20008934 	.word	0x20008934
 800af24:	20008938 	.word	0x20008938
 800af28:	2000893c 	.word	0x2000893c
 800af2c:	080161bc 	.word	0x080161bc
 800af30:	08016290 	.word	0x08016290
 800af34:	08016204 	.word	0x08016204

0800af38 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d050      	beq.n	800afe8 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f003 0303 	and.w	r3, r3, #3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d006      	beq.n	800af5e <mem_free+0x26>
 800af50:	4b27      	ldr	r3, [pc, #156]	; (800aff0 <mem_free+0xb8>)
 800af52:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800af56:	4927      	ldr	r1, [pc, #156]	; (800aff4 <mem_free+0xbc>)
 800af58:	4827      	ldr	r0, [pc, #156]	; (800aff8 <mem_free+0xc0>)
 800af5a:	f009 fd7d 	bl	8014a58 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800af5e:	4b27      	ldr	r3, [pc, #156]	; (800affc <mem_free+0xc4>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	429a      	cmp	r2, r3
 800af66:	d304      	bcc.n	800af72 <mem_free+0x3a>
 800af68:	4b25      	ldr	r3, [pc, #148]	; (800b000 <mem_free+0xc8>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d306      	bcc.n	800af80 <mem_free+0x48>
 800af72:	4b1f      	ldr	r3, [pc, #124]	; (800aff0 <mem_free+0xb8>)
 800af74:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800af78:	4922      	ldr	r1, [pc, #136]	; (800b004 <mem_free+0xcc>)
 800af7a:	481f      	ldr	r0, [pc, #124]	; (800aff8 <mem_free+0xc0>)
 800af7c:	f009 fd6c 	bl	8014a58 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800af80:	4b1e      	ldr	r3, [pc, #120]	; (800affc <mem_free+0xc4>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	429a      	cmp	r2, r3
 800af88:	d304      	bcc.n	800af94 <mem_free+0x5c>
 800af8a:	4b1d      	ldr	r3, [pc, #116]	; (800b000 <mem_free+0xc8>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	429a      	cmp	r2, r3
 800af92:	d306      	bcc.n	800afa2 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800af94:	f009 fc80 	bl	8014898 <sys_arch_protect>
 800af98:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800af9a:	68b8      	ldr	r0, [r7, #8]
 800af9c:	f009 fc8a 	bl	80148b4 <sys_arch_unprotect>
    return;
 800afa0:	e023      	b.n	800afea <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800afa2:	4819      	ldr	r0, [pc, #100]	; (800b008 <mem_free+0xd0>)
 800afa4:	f009 fc3c 	bl	8014820 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	3b08      	subs	r3, #8
 800afac:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	791b      	ldrb	r3, [r3, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d106      	bne.n	800afc4 <mem_free+0x8c>
 800afb6:	4b0e      	ldr	r3, [pc, #56]	; (800aff0 <mem_free+0xb8>)
 800afb8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800afbc:	4913      	ldr	r1, [pc, #76]	; (800b00c <mem_free+0xd4>)
 800afbe:	480e      	ldr	r0, [pc, #56]	; (800aff8 <mem_free+0xc0>)
 800afc0:	f009 fd4a 	bl	8014a58 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800afca:	4b11      	ldr	r3, [pc, #68]	; (800b010 <mem_free+0xd8>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d202      	bcs.n	800afda <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800afd4:	4a0e      	ldr	r2, [pc, #56]	; (800b010 <mem_free+0xd8>)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f7ff fec4 	bl	800ad68 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800afe0:	4809      	ldr	r0, [pc, #36]	; (800b008 <mem_free+0xd0>)
 800afe2:	f009 fc2c 	bl	801483e <sys_mutex_unlock>
 800afe6:	e000      	b.n	800afea <mem_free+0xb2>
    return;
 800afe8:	bf00      	nop
}
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	080161bc 	.word	0x080161bc
 800aff4:	080162ac 	.word	0x080162ac
 800aff8:	08016204 	.word	0x08016204
 800affc:	20008930 	.word	0x20008930
 800b000:	20008934 	.word	0x20008934
 800b004:	080162d0 	.word	0x080162d0
 800b008:	2000893c 	.word	0x2000893c
 800b00c:	080162e8 	.word	0x080162e8
 800b010:	20008938 	.word	0x20008938

0800b014 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b088      	sub	sp, #32
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800b020:	887b      	ldrh	r3, [r7, #2]
 800b022:	3303      	adds	r3, #3
 800b024:	b29b      	uxth	r3, r3
 800b026:	f023 0303 	bic.w	r3, r3, #3
 800b02a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800b02c:	887b      	ldrh	r3, [r7, #2]
 800b02e:	2b0b      	cmp	r3, #11
 800b030:	d801      	bhi.n	800b036 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b032:	230c      	movs	r3, #12
 800b034:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800b036:	887b      	ldrh	r3, [r7, #2]
 800b038:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b03c:	d901      	bls.n	800b042 <mem_trim+0x2e>
    return NULL;
 800b03e:	2300      	movs	r3, #0
 800b040:	e0bd      	b.n	800b1be <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b042:	4b61      	ldr	r3, [pc, #388]	; (800b1c8 <mem_trim+0x1b4>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d304      	bcc.n	800b056 <mem_trim+0x42>
 800b04c:	4b5f      	ldr	r3, [pc, #380]	; (800b1cc <mem_trim+0x1b8>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	429a      	cmp	r2, r3
 800b054:	d306      	bcc.n	800b064 <mem_trim+0x50>
 800b056:	4b5e      	ldr	r3, [pc, #376]	; (800b1d0 <mem_trim+0x1bc>)
 800b058:	f240 12f3 	movw	r2, #499	; 0x1f3
 800b05c:	495d      	ldr	r1, [pc, #372]	; (800b1d4 <mem_trim+0x1c0>)
 800b05e:	485e      	ldr	r0, [pc, #376]	; (800b1d8 <mem_trim+0x1c4>)
 800b060:	f009 fcfa 	bl	8014a58 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b064:	4b58      	ldr	r3, [pc, #352]	; (800b1c8 <mem_trim+0x1b4>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d304      	bcc.n	800b078 <mem_trim+0x64>
 800b06e:	4b57      	ldr	r3, [pc, #348]	; (800b1cc <mem_trim+0x1b8>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	d307      	bcc.n	800b088 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b078:	f009 fc0e 	bl	8014898 <sys_arch_protect>
 800b07c:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f009 fc18 	bl	80148b4 <sys_arch_unprotect>
    return rmem;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	e09a      	b.n	800b1be <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	3b08      	subs	r3, #8
 800b08c:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800b08e:	4b4e      	ldr	r3, [pc, #312]	; (800b1c8 <mem_trim+0x1b4>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	69fa      	ldr	r2, [r7, #28]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	881a      	ldrh	r2, [r3, #0]
 800b09c:	8b7b      	ldrh	r3, [r7, #26]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	3b08      	subs	r3, #8
 800b0a4:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b0a6:	887a      	ldrh	r2, [r7, #2]
 800b0a8:	8b3b      	ldrh	r3, [r7, #24]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d906      	bls.n	800b0bc <mem_trim+0xa8>
 800b0ae:	4b48      	ldr	r3, [pc, #288]	; (800b1d0 <mem_trim+0x1bc>)
 800b0b0:	f240 2206 	movw	r2, #518	; 0x206
 800b0b4:	4949      	ldr	r1, [pc, #292]	; (800b1dc <mem_trim+0x1c8>)
 800b0b6:	4848      	ldr	r0, [pc, #288]	; (800b1d8 <mem_trim+0x1c4>)
 800b0b8:	f009 fcce 	bl	8014a58 <iprintf>
  if (newsize > size) {
 800b0bc:	887a      	ldrh	r2, [r7, #2]
 800b0be:	8b3b      	ldrh	r3, [r7, #24]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d901      	bls.n	800b0c8 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e07a      	b.n	800b1be <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800b0c8:	887a      	ldrh	r2, [r7, #2]
 800b0ca:	8b3b      	ldrh	r3, [r7, #24]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d101      	bne.n	800b0d4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	e074      	b.n	800b1be <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b0d4:	4842      	ldr	r0, [pc, #264]	; (800b1e0 <mem_trim+0x1cc>)
 800b0d6:	f009 fba3 	bl	8014820 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800b0da:	4b3b      	ldr	r3, [pc, #236]	; (800b1c8 <mem_trim+0x1b4>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	69fa      	ldr	r2, [r7, #28]
 800b0e0:	8812      	ldrh	r2, [r2, #0]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	791b      	ldrb	r3, [r3, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d131      	bne.n	800b152 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b0f4:	8b7a      	ldrh	r2, [r7, #26]
 800b0f6:	887b      	ldrh	r3, [r7, #2]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	3308      	adds	r3, #8
 800b0fe:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800b100:	4b38      	ldr	r3, [pc, #224]	; (800b1e4 <mem_trim+0x1d0>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	697a      	ldr	r2, [r7, #20]
 800b106:	429a      	cmp	r2, r3
 800b108:	d105      	bne.n	800b116 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800b10a:	4b2f      	ldr	r3, [pc, #188]	; (800b1c8 <mem_trim+0x1b4>)
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	8a7b      	ldrh	r3, [r7, #18]
 800b110:	4413      	add	r3, r2
 800b112:	4a34      	ldr	r2, [pc, #208]	; (800b1e4 <mem_trim+0x1d0>)
 800b114:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b116:	4b2c      	ldr	r3, [pc, #176]	; (800b1c8 <mem_trim+0x1b4>)
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	8a7b      	ldrh	r3, [r7, #18]
 800b11c:	4413      	add	r3, r2
 800b11e:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2200      	movs	r2, #0
 800b124:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	8a3a      	ldrh	r2, [r7, #16]
 800b12a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	8b7a      	ldrh	r2, [r7, #26]
 800b130:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	8a7a      	ldrh	r2, [r7, #18]
 800b136:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b140:	d039      	beq.n	800b1b6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b142:	4b21      	ldr	r3, [pc, #132]	; (800b1c8 <mem_trim+0x1b4>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	8812      	ldrh	r2, [r2, #0]
 800b14a:	4413      	add	r3, r2
 800b14c:	8a7a      	ldrh	r2, [r7, #18]
 800b14e:	805a      	strh	r2, [r3, #2]
 800b150:	e031      	b.n	800b1b6 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b152:	887b      	ldrh	r3, [r7, #2]
 800b154:	f103 0214 	add.w	r2, r3, #20
 800b158:	8b3b      	ldrh	r3, [r7, #24]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d82b      	bhi.n	800b1b6 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b15e:	8b7a      	ldrh	r2, [r7, #26]
 800b160:	887b      	ldrh	r3, [r7, #2]
 800b162:	4413      	add	r3, r2
 800b164:	b29b      	uxth	r3, r3
 800b166:	3308      	adds	r3, #8
 800b168:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b16a:	4b17      	ldr	r3, [pc, #92]	; (800b1c8 <mem_trim+0x1b4>)
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	8a7b      	ldrh	r3, [r7, #18]
 800b170:	4413      	add	r3, r2
 800b172:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800b174:	4b1b      	ldr	r3, [pc, #108]	; (800b1e4 <mem_trim+0x1d0>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	697a      	ldr	r2, [r7, #20]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d202      	bcs.n	800b184 <mem_trim+0x170>
      lfree = mem2;
 800b17e:	4a19      	ldr	r2, [pc, #100]	; (800b1e4 <mem_trim+0x1d0>)
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	2200      	movs	r2, #0
 800b188:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	881a      	ldrh	r2, [r3, #0]
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	8b7a      	ldrh	r2, [r7, #26]
 800b196:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	8a7a      	ldrh	r2, [r7, #18]
 800b19c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	881b      	ldrh	r3, [r3, #0]
 800b1a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1a6:	d006      	beq.n	800b1b6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b1a8:	4b07      	ldr	r3, [pc, #28]	; (800b1c8 <mem_trim+0x1b4>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	8812      	ldrh	r2, [r2, #0]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	8a7a      	ldrh	r2, [r7, #18]
 800b1b4:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b1b6:	480a      	ldr	r0, [pc, #40]	; (800b1e0 <mem_trim+0x1cc>)
 800b1b8:	f009 fb41 	bl	801483e <sys_mutex_unlock>
  return rmem;
 800b1bc:	687b      	ldr	r3, [r7, #4]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3720      	adds	r7, #32
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	20008930 	.word	0x20008930
 800b1cc:	20008934 	.word	0x20008934
 800b1d0:	080161bc 	.word	0x080161bc
 800b1d4:	080162fc 	.word	0x080162fc
 800b1d8:	08016204 	.word	0x08016204
 800b1dc:	08016314 	.word	0x08016314
 800b1e0:	2000893c 	.word	0x2000893c
 800b1e4:	20008938 	.word	0x20008938

0800b1e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b088      	sub	sp, #32
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800b1f2:	88fb      	ldrh	r3, [r7, #6]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <mem_malloc+0x14>
    return NULL;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	e0d0      	b.n	800b39e <mem_malloc+0x1b6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800b1fc:	88fb      	ldrh	r3, [r7, #6]
 800b1fe:	3303      	adds	r3, #3
 800b200:	b29b      	uxth	r3, r3
 800b202:	f023 0303 	bic.w	r3, r3, #3
 800b206:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800b208:	88fb      	ldrh	r3, [r7, #6]
 800b20a:	2b0b      	cmp	r3, #11
 800b20c:	d801      	bhi.n	800b212 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b20e:	230c      	movs	r3, #12
 800b210:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800b212:	88fb      	ldrh	r3, [r7, #6]
 800b214:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b218:	d901      	bls.n	800b21e <mem_malloc+0x36>
    return NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	e0bf      	b.n	800b39e <mem_malloc+0x1b6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b21e:	4862      	ldr	r0, [pc, #392]	; (800b3a8 <mem_malloc+0x1c0>)
 800b220:	f009 fafe 	bl	8014820 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b224:	4b61      	ldr	r3, [pc, #388]	; (800b3ac <mem_malloc+0x1c4>)
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	4b61      	ldr	r3, [pc, #388]	; (800b3b0 <mem_malloc+0x1c8>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	83fb      	strh	r3, [r7, #30]
 800b230:	e0aa      	b.n	800b388 <mem_malloc+0x1a0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800b232:	4b5f      	ldr	r3, [pc, #380]	; (800b3b0 <mem_malloc+0x1c8>)
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	8bfb      	ldrh	r3, [r7, #30]
 800b238:	4413      	add	r3, r2
 800b23a:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	791b      	ldrb	r3, [r3, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	f040 809b 	bne.w	800b37c <mem_malloc+0x194>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	8bfb      	ldrh	r3, [r7, #30]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	f1a3 0208 	sub.w	r2, r3, #8
 800b254:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800b256:	429a      	cmp	r2, r3
 800b258:	f0c0 8090 	bcc.w	800b37c <mem_malloc+0x194>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	881b      	ldrh	r3, [r3, #0]
 800b260:	461a      	mov	r2, r3
 800b262:	8bfb      	ldrh	r3, [r7, #30]
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	f1a3 0208 	sub.w	r2, r3, #8
 800b26a:	88fb      	ldrh	r3, [r7, #6]
 800b26c:	3314      	adds	r3, #20
 800b26e:	429a      	cmp	r2, r3
 800b270:	d327      	bcc.n	800b2c2 <mem_malloc+0xda>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800b272:	8bfa      	ldrh	r2, [r7, #30]
 800b274:	88fb      	ldrh	r3, [r7, #6]
 800b276:	4413      	add	r3, r2
 800b278:	b29b      	uxth	r3, r3
 800b27a:	3308      	adds	r3, #8
 800b27c:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800b27e:	4b4c      	ldr	r3, [pc, #304]	; (800b3b0 <mem_malloc+0x1c8>)
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	8a7b      	ldrh	r3, [r7, #18]
 800b284:	4413      	add	r3, r2
 800b286:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	881a      	ldrh	r2, [r3, #0]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	8bfa      	ldrh	r2, [r7, #30]
 800b29a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	8a7a      	ldrh	r2, [r7, #18]
 800b2a0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b2b0:	d00a      	beq.n	800b2c8 <mem_malloc+0xe0>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b2b2:	4b3f      	ldr	r3, [pc, #252]	; (800b3b0 <mem_malloc+0x1c8>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	8812      	ldrh	r2, [r2, #0]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	8a7a      	ldrh	r2, [r7, #18]
 800b2be:	805a      	strh	r2, [r3, #2]
 800b2c0:	e002      	b.n	800b2c8 <mem_malloc+0xe0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b2c8:	4b38      	ldr	r3, [pc, #224]	; (800b3ac <mem_malloc+0x1c4>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	697a      	ldr	r2, [r7, #20]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d127      	bne.n	800b322 <mem_malloc+0x13a>
          struct mem *cur = lfree;
 800b2d2:	4b36      	ldr	r3, [pc, #216]	; (800b3ac <mem_malloc+0x1c4>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b2d8:	e005      	b.n	800b2e6 <mem_malloc+0xfe>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800b2da:	4b35      	ldr	r3, [pc, #212]	; (800b3b0 <mem_malloc+0x1c8>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	69ba      	ldr	r2, [r7, #24]
 800b2e0:	8812      	ldrh	r2, [r2, #0]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	791b      	ldrb	r3, [r3, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d004      	beq.n	800b2f8 <mem_malloc+0x110>
 800b2ee:	4b31      	ldr	r3, [pc, #196]	; (800b3b4 <mem_malloc+0x1cc>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	69ba      	ldr	r2, [r7, #24]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d1f0      	bne.n	800b2da <mem_malloc+0xf2>
          }
          lfree = cur;
 800b2f8:	4a2c      	ldr	r2, [pc, #176]	; (800b3ac <mem_malloc+0x1c4>)
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b2fe:	4b2b      	ldr	r3, [pc, #172]	; (800b3ac <mem_malloc+0x1c4>)
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	4b2c      	ldr	r3, [pc, #176]	; (800b3b4 <mem_malloc+0x1cc>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	429a      	cmp	r2, r3
 800b308:	d00b      	beq.n	800b322 <mem_malloc+0x13a>
 800b30a:	4b28      	ldr	r3, [pc, #160]	; (800b3ac <mem_malloc+0x1c4>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	791b      	ldrb	r3, [r3, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d006      	beq.n	800b322 <mem_malloc+0x13a>
 800b314:	4b28      	ldr	r3, [pc, #160]	; (800b3b8 <mem_malloc+0x1d0>)
 800b316:	f240 22cf 	movw	r2, #719	; 0x2cf
 800b31a:	4928      	ldr	r1, [pc, #160]	; (800b3bc <mem_malloc+0x1d4>)
 800b31c:	4828      	ldr	r0, [pc, #160]	; (800b3c0 <mem_malloc+0x1d8>)
 800b31e:	f009 fb9b 	bl	8014a58 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b322:	4821      	ldr	r0, [pc, #132]	; (800b3a8 <mem_malloc+0x1c0>)
 800b324:	f009 fa8b 	bl	801483e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b328:	88fa      	ldrh	r2, [r7, #6]
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	4413      	add	r3, r2
 800b32e:	3308      	adds	r3, #8
 800b330:	4a20      	ldr	r2, [pc, #128]	; (800b3b4 <mem_malloc+0x1cc>)
 800b332:	6812      	ldr	r2, [r2, #0]
 800b334:	4293      	cmp	r3, r2
 800b336:	d906      	bls.n	800b346 <mem_malloc+0x15e>
 800b338:	4b1f      	ldr	r3, [pc, #124]	; (800b3b8 <mem_malloc+0x1d0>)
 800b33a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b33e:	4921      	ldr	r1, [pc, #132]	; (800b3c4 <mem_malloc+0x1dc>)
 800b340:	481f      	ldr	r0, [pc, #124]	; (800b3c0 <mem_malloc+0x1d8>)
 800b342:	f009 fb89 	bl	8014a58 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f003 0303 	and.w	r3, r3, #3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d006      	beq.n	800b35e <mem_malloc+0x176>
 800b350:	4b19      	ldr	r3, [pc, #100]	; (800b3b8 <mem_malloc+0x1d0>)
 800b352:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b356:	491c      	ldr	r1, [pc, #112]	; (800b3c8 <mem_malloc+0x1e0>)
 800b358:	4819      	ldr	r0, [pc, #100]	; (800b3c0 <mem_malloc+0x1d8>)
 800b35a:	f009 fb7d 	bl	8014a58 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f003 0303 	and.w	r3, r3, #3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d006      	beq.n	800b376 <mem_malloc+0x18e>
 800b368:	4b13      	ldr	r3, [pc, #76]	; (800b3b8 <mem_malloc+0x1d0>)
 800b36a:	f240 22d7 	movw	r2, #727	; 0x2d7
 800b36e:	4917      	ldr	r1, [pc, #92]	; (800b3cc <mem_malloc+0x1e4>)
 800b370:	4813      	ldr	r0, [pc, #76]	; (800b3c0 <mem_malloc+0x1d8>)
 800b372:	f009 fb71 	bl	8014a58 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	3308      	adds	r3, #8
 800b37a:	e010      	b.n	800b39e <mem_malloc+0x1b6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800b37c:	4b0c      	ldr	r3, [pc, #48]	; (800b3b0 <mem_malloc+0x1c8>)
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	8bfb      	ldrh	r3, [r7, #30]
 800b382:	4413      	add	r3, r2
 800b384:	881b      	ldrh	r3, [r3, #0]
 800b386:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b388:	8bfa      	ldrh	r2, [r7, #30]
 800b38a:	88fb      	ldrh	r3, [r7, #6]
 800b38c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b390:	429a      	cmp	r2, r3
 800b392:	f4ff af4e 	bcc.w	800b232 <mem_malloc+0x4a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b396:	4804      	ldr	r0, [pc, #16]	; (800b3a8 <mem_malloc+0x1c0>)
 800b398:	f009 fa51 	bl	801483e <sys_mutex_unlock>
  return NULL;
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3720      	adds	r7, #32
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	2000893c 	.word	0x2000893c
 800b3ac:	20008938 	.word	0x20008938
 800b3b0:	20008930 	.word	0x20008930
 800b3b4:	20008934 	.word	0x20008934
 800b3b8:	080161bc 	.word	0x080161bc
 800b3bc:	08016334 	.word	0x08016334
 800b3c0:	08016204 	.word	0x08016204
 800b3c4:	08016350 	.word	0x08016350
 800b3c8:	08016380 	.word	0x08016380
 800b3cc:	080163b0 	.word	0x080163b0

0800b3d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	3303      	adds	r3, #3
 800b3e6:	f023 0303 	bic.w	r3, r3, #3
 800b3ea:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	e011      	b.n	800b416 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	881b      	ldrh	r3, [r3, #0]
 800b408:	461a      	mov	r2, r3
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	4413      	add	r3, r2
 800b40e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3301      	adds	r3, #1
 800b414:	60fb      	str	r3, [r7, #12]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	885b      	ldrh	r3, [r3, #2]
 800b41a:	461a      	mov	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4293      	cmp	r3, r2
 800b420:	dbe7      	blt.n	800b3f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b422:	bf00      	nop
 800b424:	bf00      	nop
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	bc80      	pop	{r7}
 800b42c:	4770      	bx	lr
	...

0800b430 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b436:	2300      	movs	r3, #0
 800b438:	80fb      	strh	r3, [r7, #6]
 800b43a:	e009      	b.n	800b450 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b43c:	88fb      	ldrh	r3, [r7, #6]
 800b43e:	4a08      	ldr	r2, [pc, #32]	; (800b460 <memp_init+0x30>)
 800b440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff ffc3 	bl	800b3d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b44a:	88fb      	ldrh	r3, [r7, #6]
 800b44c:	3301      	adds	r3, #1
 800b44e:	80fb      	strh	r3, [r7, #6]
 800b450:	88fb      	ldrh	r3, [r7, #6]
 800b452:	2b0c      	cmp	r3, #12
 800b454:	d9f2      	bls.n	800b43c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b456:	bf00      	nop
 800b458:	bf00      	nop
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	08017f14 	.word	0x08017f14

0800b464 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b46c:	f009 fa14 	bl	8014898 <sys_arch_protect>
 800b470:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d015      	beq.n	800b4ac <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	6812      	ldr	r2, [r2, #0]
 800b488:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	f003 0303 	and.w	r3, r3, #3
 800b490:	2b00      	cmp	r3, #0
 800b492:	d006      	beq.n	800b4a2 <do_memp_malloc_pool+0x3e>
 800b494:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <do_memp_malloc_pool+0x58>)
 800b496:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800b49a:	4909      	ldr	r1, [pc, #36]	; (800b4c0 <do_memp_malloc_pool+0x5c>)
 800b49c:	4809      	ldr	r0, [pc, #36]	; (800b4c4 <do_memp_malloc_pool+0x60>)
 800b49e:	f009 fadb 	bl	8014a58 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f009 fa06 	bl	80148b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	e003      	b.n	800b4b4 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f009 fa01 	bl	80148b4 <sys_arch_unprotect>
  return NULL;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	080163d4 	.word	0x080163d4
 800b4c0:	08016404 	.word	0x08016404
 800b4c4:	08016428 	.word	0x08016428

0800b4c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b4d2:	79fb      	ldrb	r3, [r7, #7]
 800b4d4:	2b0c      	cmp	r3, #12
 800b4d6:	d908      	bls.n	800b4ea <memp_malloc+0x22>
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <memp_malloc+0x3c>)
 800b4da:	f240 1287 	movw	r2, #391	; 0x187
 800b4de:	490a      	ldr	r1, [pc, #40]	; (800b508 <memp_malloc+0x40>)
 800b4e0:	480a      	ldr	r0, [pc, #40]	; (800b50c <memp_malloc+0x44>)
 800b4e2:	f009 fab9 	bl	8014a58 <iprintf>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e008      	b.n	800b4fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b4ea:	79fb      	ldrb	r3, [r7, #7]
 800b4ec:	4a08      	ldr	r2, [pc, #32]	; (800b510 <memp_malloc+0x48>)
 800b4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7ff ffb6 	bl	800b464 <do_memp_malloc_pool>
 800b4f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	080163d4 	.word	0x080163d4
 800b508:	08016464 	.word	0x08016464
 800b50c:	08016428 	.word	0x08016428
 800b510:	08017f14 	.word	0x08017f14

0800b514 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	f003 0303 	and.w	r3, r3, #3
 800b524:	2b00      	cmp	r3, #0
 800b526:	d006      	beq.n	800b536 <do_memp_free_pool+0x22>
 800b528:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <do_memp_free_pool+0x4c>)
 800b52a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b52e:	490d      	ldr	r1, [pc, #52]	; (800b564 <do_memp_free_pool+0x50>)
 800b530:	480d      	ldr	r0, [pc, #52]	; (800b568 <do_memp_free_pool+0x54>)
 800b532:	f009 fa91 	bl	8014a58 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b53a:	f009 f9ad 	bl	8014898 <sys_arch_protect>
 800b53e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b552:	68b8      	ldr	r0, [r7, #8]
 800b554:	f009 f9ae 	bl	80148b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b558:	bf00      	nop
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	080163d4 	.word	0x080163d4
 800b564:	08016484 	.word	0x08016484
 800b568:	08016428 	.word	0x08016428

0800b56c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	4603      	mov	r3, r0
 800b574:	6039      	str	r1, [r7, #0]
 800b576:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b578:	79fb      	ldrb	r3, [r7, #7]
 800b57a:	2b0c      	cmp	r3, #12
 800b57c:	d907      	bls.n	800b58e <memp_free+0x22>
 800b57e:	4b0c      	ldr	r3, [pc, #48]	; (800b5b0 <memp_free+0x44>)
 800b580:	f240 12db 	movw	r2, #475	; 0x1db
 800b584:	490b      	ldr	r1, [pc, #44]	; (800b5b4 <memp_free+0x48>)
 800b586:	480c      	ldr	r0, [pc, #48]	; (800b5b8 <memp_free+0x4c>)
 800b588:	f009 fa66 	bl	8014a58 <iprintf>
 800b58c:	e00c      	b.n	800b5a8 <memp_free+0x3c>

  if (mem == NULL) {
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d008      	beq.n	800b5a6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b594:	79fb      	ldrb	r3, [r7, #7]
 800b596:	4a09      	ldr	r2, [pc, #36]	; (800b5bc <memp_free+0x50>)
 800b598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff ffb8 	bl	800b514 <do_memp_free_pool>
 800b5a4:	e000      	b.n	800b5a8 <memp_free+0x3c>
    return;
 800b5a6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	080163d4 	.word	0x080163d4
 800b5b4:	080164a4 	.word	0x080164a4
 800b5b8:	08016428 	.word	0x08016428
 800b5bc:	08017f14 	.word	0x08017f14

0800b5c0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b5c4:	bf00      	nop
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bc80      	pop	{r7}
 800b5ca:	4770      	bx	lr

0800b5cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
 800b5d8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d105      	bne.n	800b5ec <netif_add+0x20>
 800b5e0:	4b21      	ldr	r3, [pc, #132]	; (800b668 <netif_add+0x9c>)
 800b5e2:	22fb      	movs	r2, #251	; 0xfb
 800b5e4:	4921      	ldr	r1, [pc, #132]	; (800b66c <netif_add+0xa0>)
 800b5e6:	4822      	ldr	r0, [pc, #136]	; (800b670 <netif_add+0xa4>)
 800b5e8:	f009 fa36 	bl	8014a58 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2203      	movs	r2, #3
 800b60a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2200      	movs	r2, #0
 800b612:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	69ba      	ldr	r2, [r7, #24]
 800b618:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800b61a:	4b16      	ldr	r3, [pc, #88]	; (800b674 <netif_add+0xa8>)
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	1c5a      	adds	r2, r3, #1
 800b620:	b2d1      	uxtb	r1, r2
 800b622:	4a14      	ldr	r2, [pc, #80]	; (800b674 <netif_add+0xa8>)
 800b624:	7011      	strb	r1, [r2, #0]
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6a3a      	ldr	r2, [r7, #32]
 800b630:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	68b9      	ldr	r1, [r7, #8]
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f000 f81f 	bl	800b67c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	4798      	blx	r3
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <netif_add+0x82>
    return NULL;
 800b64a:	2300      	movs	r3, #0
 800b64c:	e007      	b.n	800b65e <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b64e:	4b0a      	ldr	r3, [pc, #40]	; (800b678 <netif_add+0xac>)
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b656:	4a08      	ldr	r2, [pc, #32]	; (800b678 <netif_add+0xac>)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800b65c:	68fb      	ldr	r3, [r7, #12]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	080164c0 	.word	0x080164c0
 800b66c:	080164f4 	.word	0x080164f4
 800b670:	0801650c 	.word	0x0801650c
 800b674:	2000ba10 	.word	0x2000ba10
 800b678:	2000ba08 	.word	0x2000ba08

0800b67c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <netif_set_addr+0x1c>
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10c      	bne.n	800b6b2 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800b698:	68b9      	ldr	r1, [r7, #8]
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f000 f81a 	bl	800b6d4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800b6a0:	6879      	ldr	r1, [r7, #4]
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f000 f861 	bl	800b76a <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 f84a 	bl	800b744 <netif_set_gw>
 800b6b0:	e00c      	b.n	800b6cc <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800b6b2:	6879      	ldr	r1, [r7, #4]
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f000 f858 	bl	800b76a <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f000 f841 	bl	800b744 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800b6c2:	68b9      	ldr	r1, [r7, #8]
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 f805 	bl	800b6d4 <netif_set_ipaddr>
  }
}
 800b6ca:	bf00      	nop
 800b6cc:	bf00      	nop
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <netif_set_ipaddr+0x18>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	e002      	b.n	800b6f2 <netif_set_ipaddr+0x1e>
 800b6ec:	4b14      	ldr	r3, [pc, #80]	; (800b740 <netif_set_ipaddr+0x6c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d01c      	beq.n	800b738 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	3304      	adds	r3, #4
 800b702:	f107 020c 	add.w	r2, r7, #12
 800b706:	4611      	mov	r1, r2
 800b708:	4618      	mov	r0, r3
 800b70a:	f002 fb51 	bl	800ddb0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	3304      	adds	r3, #4
 800b712:	f107 020c 	add.w	r2, r7, #12
 800b716:	4611      	mov	r1, r2
 800b718:	4618      	mov	r0, r3
 800b71a:	f006 fd0d 	bl	8012138 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d002      	beq.n	800b72a <netif_set_ipaddr+0x56>
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	e000      	b.n	800b72c <netif_set_ipaddr+0x58>
 800b72a:	2300      	movs	r3, #0
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b730:	2101      	movs	r1, #1
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f85d 	bl	800b7f2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800b738:	bf00      	nop
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	08017f88 	.word	0x08017f88

0800b744 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <netif_set_gw+0x16>
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	e000      	b.n	800b75c <netif_set_gw+0x18>
 800b75a:	2300      	movs	r3, #0
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800b760:	bf00      	nop
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	bc80      	pop	{r7}
 800b768:	4770      	bx	lr

0800b76a <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b083      	sub	sp, #12
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <netif_set_netmask+0x16>
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	e000      	b.n	800b782 <netif_set_netmask+0x18>
 800b780:	2300      	movs	r3, #0
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bc80      	pop	{r7}
 800b78e:	4770      	bx	lr

0800b790 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b798:	4a03      	ldr	r2, [pc, #12]	; (800b7a8 <netif_set_default+0x18>)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b79e:	bf00      	nop
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bc80      	pop	{r7}
 800b7a6:	4770      	bx	lr
 800b7a8:	2000ba0c 	.word	0x2000ba0c

0800b7ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d113      	bne.n	800b7ea <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b7c8:	f043 0301 	orr.w	r3, r3, #1
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b7da:	f003 0304 	and.w	r3, r3, #4
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800b7e2:	2103      	movs	r1, #3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f804 	bl	800b7f2 <netif_issue_reports>
    }
  }
}
 800b7ea:	bf00      	nop
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b7fe:	78fb      	ldrb	r3, [r7, #3]
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	d011      	beq.n	800b82c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3304      	adds	r3, #4
 800b80c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00c      	beq.n	800b82c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b818:	f003 0308 	and.w	r3, r3, #8
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d005      	beq.n	800b82c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3304      	adds	r3, #4
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f007 fb86 	bl	8012f38 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b842:	f003 0304 	and.w	r3, r3, #4
 800b846:	2b00      	cmp	r3, #0
 800b848:	d11b      	bne.n	800b882 <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b850:	f043 0304 	orr.w	r3, r3, #4
 800b854:	b2da      	uxtb	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b862:	f003 0301 	and.w	r3, r3, #1
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800b86a:	2103      	movs	r1, #3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff ffc0 	bl	800b7f2 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	69db      	ldr	r3, [r3, #28]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <netif_set_link_up+0x4e>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	4798      	blx	r3
  }
}
 800b882:	bf00      	nop
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b082      	sub	sp, #8
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b898:	f003 0304 	and.w	r3, r3, #4
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d010      	beq.n	800b8c2 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b8a6:	f023 0304 	bic.w	r3, r3, #4
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	69db      	ldr	r3, [r3, #28]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <netif_set_link_down+0x38>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	69db      	ldr	r3, [r3, #28]
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	4798      	blx	r3
  }
}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b083      	sub	sp, #12
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
  if (netif) {
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	61da      	str	r2, [r3, #28]
  }
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bc80      	pop	{r7}
 800b8e8:	4770      	bx	lr
	...

0800b8ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b8f2:	f008 ffd1 	bl	8014898 <sys_arch_protect>
 800b8f6:	6038      	str	r0, [r7, #0]
 800b8f8:	4b0f      	ldr	r3, [pc, #60]	; (800b938 <pbuf_free_ooseq+0x4c>)
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	701a      	strb	r2, [r3, #0]
 800b8fe:	6838      	ldr	r0, [r7, #0]
 800b900:	f008 ffd8 	bl	80148b4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b904:	4b0d      	ldr	r3, [pc, #52]	; (800b93c <pbuf_free_ooseq+0x50>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	607b      	str	r3, [r7, #4]
 800b90a:	e00f      	b.n	800b92c <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b910:	2b00      	cmp	r3, #0
 800b912:	d008      	beq.n	800b926 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b918:	4618      	mov	r0, r3
 800b91a:	f001 feca 	bl	800d6b2 <tcp_segs_free>
      pcb->ooseq = NULL;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800b924:	e005      	b.n	800b932 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	607b      	str	r3, [r7, #4]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1ec      	bne.n	800b90c <pbuf_free_ooseq+0x20>
    }
  }
}
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	2000ba11 	.word	0x2000ba11
 800b93c:	2000ba20 	.word	0x2000ba20

0800b940 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b948:	f7ff ffd0 	bl	800b8ec <pbuf_free_ooseq>
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b95a:	f008 ff9d 	bl	8014898 <sys_arch_protect>
 800b95e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b960:	4b10      	ldr	r3, [pc, #64]	; (800b9a4 <pbuf_pool_is_empty+0x50>)
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b966:	4b0f      	ldr	r3, [pc, #60]	; (800b9a4 <pbuf_pool_is_empty+0x50>)
 800b968:	2201      	movs	r2, #1
 800b96a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f008 ffa1 	bl	80148b4 <sys_arch_unprotect>

  if (!queued) {
 800b972:	78fb      	ldrb	r3, [r7, #3]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d110      	bne.n	800b99a <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b978:	2200      	movs	r2, #0
 800b97a:	2100      	movs	r1, #0
 800b97c:	480a      	ldr	r0, [pc, #40]	; (800b9a8 <pbuf_pool_is_empty+0x54>)
 800b97e:	f7ff f90d 	bl	800ab9c <tcpip_callback_with_block>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d008      	beq.n	800b99a <pbuf_pool_is_empty+0x46>
 800b988:	f008 ff86 	bl	8014898 <sys_arch_protect>
 800b98c:	6078      	str	r0, [r7, #4]
 800b98e:	4b05      	ldr	r3, [pc, #20]	; (800b9a4 <pbuf_pool_is_empty+0x50>)
 800b990:	2200      	movs	r2, #0
 800b992:	701a      	strb	r2, [r3, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f008 ff8d 	bl	80148b4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b99a:	bf00      	nop
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	2000ba11 	.word	0x2000ba11
 800b9a8:	0800b941 	.word	0x0800b941

0800b9ac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b088      	sub	sp, #32
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	71fb      	strb	r3, [r7, #7]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	80bb      	strh	r3, [r7, #4]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800b9be:	79fb      	ldrb	r3, [r7, #7]
 800b9c0:	2b04      	cmp	r3, #4
 800b9c2:	d81c      	bhi.n	800b9fe <pbuf_alloc+0x52>
 800b9c4:	a201      	add	r2, pc, #4	; (adr r2, 800b9cc <pbuf_alloc+0x20>)
 800b9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ca:	bf00      	nop
 800b9cc:	0800b9e1 	.word	0x0800b9e1
 800b9d0:	0800b9e7 	.word	0x0800b9e7
 800b9d4:	0800b9ed 	.word	0x0800b9ed
 800b9d8:	0800b9f3 	.word	0x0800b9f3
 800b9dc:	0800b9f9 	.word	0x0800b9f9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800b9e0:	2336      	movs	r3, #54	; 0x36
 800b9e2:	82fb      	strh	r3, [r7, #22]
    break;
 800b9e4:	e014      	b.n	800ba10 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800b9e6:	2322      	movs	r3, #34	; 0x22
 800b9e8:	82fb      	strh	r3, [r7, #22]
    break;
 800b9ea:	e011      	b.n	800ba10 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800b9ec:	230e      	movs	r3, #14
 800b9ee:	82fb      	strh	r3, [r7, #22]
    break;
 800b9f0:	e00e      	b.n	800ba10 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	82fb      	strh	r3, [r7, #22]
    break;
 800b9f6:	e00b      	b.n	800ba10 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	82fb      	strh	r3, [r7, #22]
    break;
 800b9fc:	e008      	b.n	800ba10 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800b9fe:	4ba1      	ldr	r3, [pc, #644]	; (800bc84 <pbuf_alloc+0x2d8>)
 800ba00:	f44f 728b 	mov.w	r2, #278	; 0x116
 800ba04:	49a0      	ldr	r1, [pc, #640]	; (800bc88 <pbuf_alloc+0x2dc>)
 800ba06:	48a1      	ldr	r0, [pc, #644]	; (800bc8c <pbuf_alloc+0x2e0>)
 800ba08:	f009 f826 	bl	8014a58 <iprintf>
    return NULL;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	e15c      	b.n	800bcca <pbuf_alloc+0x31e>
  }

  switch (type) {
 800ba10:	79bb      	ldrb	r3, [r7, #6]
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d00d      	beq.n	800ba32 <pbuf_alloc+0x86>
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	f300 8146 	bgt.w	800bca8 <pbuf_alloc+0x2fc>
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f000 80d0 	beq.w	800bbc2 <pbuf_alloc+0x216>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f2c0 8140 	blt.w	800bca8 <pbuf_alloc+0x2fc>
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	f200 813c 	bhi.w	800bca8 <pbuf_alloc+0x2fc>
 800ba30:	e10d      	b.n	800bc4e <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ba32:	200c      	movs	r0, #12
 800ba34:	f7ff fd48 	bl	800b4c8 <memp_malloc>
 800ba38:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d103      	bne.n	800ba48 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 800ba40:	f7ff ff88 	bl	800b954 <pbuf_pool_is_empty>
      return NULL;
 800ba44:	2300      	movs	r3, #0
 800ba46:	e140      	b.n	800bcca <pbuf_alloc+0x31e>
    }
    p->type = type;
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	79ba      	ldrb	r2, [r7, #6]
 800ba4c:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	2200      	movs	r2, #0
 800ba52:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800ba54:	8afb      	ldrh	r3, [r7, #22]
 800ba56:	3310      	adds	r3, #16
 800ba58:	69fa      	ldr	r2, [r7, #28]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	3303      	adds	r3, #3
 800ba5e:	f023 0303 	bic.w	r3, r3, #3
 800ba62:	461a      	mov	r2, r3
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	f003 0303 	and.w	r3, r3, #3
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d006      	beq.n	800ba82 <pbuf_alloc+0xd6>
 800ba74:	4b83      	ldr	r3, [pc, #524]	; (800bc84 <pbuf_alloc+0x2d8>)
 800ba76:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ba7a:	4985      	ldr	r1, [pc, #532]	; (800bc90 <pbuf_alloc+0x2e4>)
 800ba7c:	4883      	ldr	r0, [pc, #524]	; (800bc8c <pbuf_alloc+0x2e0>)
 800ba7e:	f008 ffeb 	bl	8014a58 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	88ba      	ldrh	r2, [r7, #4]
 800ba86:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800ba88:	8afb      	ldrh	r3, [r7, #22]
 800ba8a:	3303      	adds	r3, #3
 800ba8c:	f023 0303 	bic.w	r3, r3, #3
 800ba90:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800ba94:	88bb      	ldrh	r3, [r7, #4]
 800ba96:	4293      	cmp	r3, r2
 800ba98:	bf28      	it	cs
 800ba9a:	4613      	movcs	r3, r2
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	69fa      	ldr	r2, [r7, #28]
 800baa8:	8952      	ldrh	r2, [r2, #10]
 800baaa:	441a      	add	r2, r3
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d906      	bls.n	800bac4 <pbuf_alloc+0x118>
 800bab6:	4b73      	ldr	r3, [pc, #460]	; (800bc84 <pbuf_alloc+0x2d8>)
 800bab8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800babc:	4975      	ldr	r1, [pc, #468]	; (800bc94 <pbuf_alloc+0x2e8>)
 800babe:	4873      	ldr	r0, [pc, #460]	; (800bc8c <pbuf_alloc+0x2e0>)
 800bac0:	f008 ffca 	bl	8014a58 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bac4:	8afb      	ldrh	r3, [r7, #22]
 800bac6:	3303      	adds	r3, #3
 800bac8:	f023 0303 	bic.w	r3, r3, #3
 800bacc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bad0:	d106      	bne.n	800bae0 <pbuf_alloc+0x134>
 800bad2:	4b6c      	ldr	r3, [pc, #432]	; (800bc84 <pbuf_alloc+0x2d8>)
 800bad4:	f240 1231 	movw	r2, #305	; 0x131
 800bad8:	496f      	ldr	r1, [pc, #444]	; (800bc98 <pbuf_alloc+0x2ec>)
 800bada:	486c      	ldr	r0, [pc, #432]	; (800bc8c <pbuf_alloc+0x2e0>)
 800badc:	f008 ffbc 	bl	8014a58 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	2201      	movs	r2, #1
 800bae4:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800baea:	88bb      	ldrh	r3, [r7, #4]
 800baec:	69fa      	ldr	r2, [r7, #28]
 800baee:	8952      	ldrh	r2, [r2, #10]
 800baf0:	1a9b      	subs	r3, r3, r2
 800baf2:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800baf4:	e061      	b.n	800bbba <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800baf6:	200c      	movs	r0, #12
 800baf8:	f7ff fce6 	bl	800b4c8 <memp_malloc>
 800bafc:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d106      	bne.n	800bb12 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 800bb04:	f7ff ff26 	bl	800b954 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800bb08:	69f8      	ldr	r0, [r7, #28]
 800bb0a:	f000 fac7 	bl	800c09c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	e0db      	b.n	800bcca <pbuf_alloc+0x31e>
      }
      q->type = type;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	79ba      	ldrb	r2, [r7, #6]
 800bb16:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bb30:	4293      	cmp	r3, r2
 800bb32:	dd06      	ble.n	800bb42 <pbuf_alloc+0x196>
 800bb34:	4b53      	ldr	r3, [pc, #332]	; (800bc84 <pbuf_alloc+0x2d8>)
 800bb36:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800bb3a:	4958      	ldr	r1, [pc, #352]	; (800bc9c <pbuf_alloc+0x2f0>)
 800bb3c:	4853      	ldr	r0, [pc, #332]	; (800bc8c <pbuf_alloc+0x2e0>)
 800bb3e:	f008 ff8b 	bl	8014a58 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bb52:	bf28      	it	cs
 800bb54:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f103 0210 	add.w	r2, r3, #16
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	f003 0303 	and.w	r3, r3, #3
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d006      	beq.n	800bb82 <pbuf_alloc+0x1d6>
 800bb74:	4b43      	ldr	r3, [pc, #268]	; (800bc84 <pbuf_alloc+0x2d8>)
 800bb76:	f240 1251 	movw	r2, #337	; 0x151
 800bb7a:	4949      	ldr	r1, [pc, #292]	; (800bca0 <pbuf_alloc+0x2f4>)
 800bb7c:	4843      	ldr	r0, [pc, #268]	; (800bc8c <pbuf_alloc+0x2e0>)
 800bb7e:	f008 ff6b 	bl	8014a58 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	69fa      	ldr	r2, [r7, #28]
 800bb88:	8952      	ldrh	r2, [r2, #10]
 800bb8a:	441a      	add	r2, r3
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d906      	bls.n	800bba4 <pbuf_alloc+0x1f8>
 800bb96:	4b3b      	ldr	r3, [pc, #236]	; (800bc84 <pbuf_alloc+0x2d8>)
 800bb98:	f240 1253 	movw	r2, #339	; 0x153
 800bb9c:	493d      	ldr	r1, [pc, #244]	; (800bc94 <pbuf_alloc+0x2e8>)
 800bb9e:	483b      	ldr	r0, [pc, #236]	; (800bc8c <pbuf_alloc+0x2e0>)
 800bba0:	f008 ff5a 	bl	8014a58 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2201      	movs	r2, #1
 800bba8:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	895b      	ldrh	r3, [r3, #10]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	1a9b      	subs	r3, r3, r2
 800bbb4:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	dc9a      	bgt.n	800baf6 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800bbc0:	e07c      	b.n	800bcbc <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800bbc2:	8afb      	ldrh	r3, [r7, #22]
 800bbc4:	3313      	adds	r3, #19
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	f023 0303 	bic.w	r3, r3, #3
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	88bb      	ldrh	r3, [r7, #4]
 800bbd0:	3303      	adds	r3, #3
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	f023 0303 	bic.w	r3, r3, #3
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	4413      	add	r3, r2
 800bbdc:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800bbde:	897a      	ldrh	r2, [r7, #10]
 800bbe0:	88bb      	ldrh	r3, [r7, #4]
 800bbe2:	3303      	adds	r3, #3
 800bbe4:	f023 0303 	bic.w	r3, r3, #3
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d201      	bcs.n	800bbf0 <pbuf_alloc+0x244>
        return NULL;
 800bbec:	2300      	movs	r3, #0
 800bbee:	e06c      	b.n	800bcca <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800bbf0:	897b      	ldrh	r3, [r7, #10]
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7ff faf8 	bl	800b1e8 <mem_malloc>
 800bbf8:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <pbuf_alloc+0x258>
      return NULL;
 800bc00:	2300      	movs	r3, #0
 800bc02:	e062      	b.n	800bcca <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800bc04:	8afb      	ldrh	r3, [r7, #22]
 800bc06:	3310      	adds	r3, #16
 800bc08:	69fa      	ldr	r2, [r7, #28]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	3303      	adds	r3, #3
 800bc0e:	f023 0303 	bic.w	r3, r3, #3
 800bc12:	461a      	mov	r2, r3
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	88ba      	ldrh	r2, [r7, #4]
 800bc1c:	811a      	strh	r2, [r3, #8]
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	891a      	ldrh	r2, [r3, #8]
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	79ba      	ldrb	r2, [r7, #6]
 800bc30:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	f003 0303 	and.w	r3, r3, #3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d03d      	beq.n	800bcba <pbuf_alloc+0x30e>
 800bc3e:	4b11      	ldr	r3, [pc, #68]	; (800bc84 <pbuf_alloc+0x2d8>)
 800bc40:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800bc44:	4917      	ldr	r1, [pc, #92]	; (800bca4 <pbuf_alloc+0x2f8>)
 800bc46:	4811      	ldr	r0, [pc, #68]	; (800bc8c <pbuf_alloc+0x2e0>)
 800bc48:	f008 ff06 	bl	8014a58 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800bc4c:	e035      	b.n	800bcba <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bc4e:	200b      	movs	r0, #11
 800bc50:	f7ff fc3a 	bl	800b4c8 <memp_malloc>
 800bc54:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d101      	bne.n	800bc60 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	e034      	b.n	800bcca <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	2200      	movs	r2, #0
 800bc64:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	88ba      	ldrh	r2, [r7, #4]
 800bc6a:	811a      	strh	r2, [r3, #8]
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	891a      	ldrh	r2, [r3, #8]
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	2200      	movs	r2, #0
 800bc78:	601a      	str	r2, [r3, #0]
    p->type = type;
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	79ba      	ldrb	r2, [r7, #6]
 800bc7e:	731a      	strb	r2, [r3, #12]
    break;
 800bc80:	e01c      	b.n	800bcbc <pbuf_alloc+0x310>
 800bc82:	bf00      	nop
 800bc84:	08016534 	.word	0x08016534
 800bc88:	08016564 	.word	0x08016564
 800bc8c:	08016580 	.word	0x08016580
 800bc90:	080165a8 	.word	0x080165a8
 800bc94:	080165d8 	.word	0x080165d8
 800bc98:	0801660c 	.word	0x0801660c
 800bc9c:	08016640 	.word	0x08016640
 800bca0:	08016654 	.word	0x08016654
 800bca4:	08016684 	.word	0x08016684
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bca8:	4b0a      	ldr	r3, [pc, #40]	; (800bcd4 <pbuf_alloc+0x328>)
 800bcaa:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800bcae:	490a      	ldr	r1, [pc, #40]	; (800bcd8 <pbuf_alloc+0x32c>)
 800bcb0:	480a      	ldr	r0, [pc, #40]	; (800bcdc <pbuf_alloc+0x330>)
 800bcb2:	f008 fed1 	bl	8014a58 <iprintf>
    return NULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e007      	b.n	800bcca <pbuf_alloc+0x31e>
    break;
 800bcba:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bcc8:	69fb      	ldr	r3, [r7, #28]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3720      	adds	r7, #32
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	08016534 	.word	0x08016534
 800bcd8:	080166b0 	.word	0x080166b0
 800bcdc:	08016580 	.word	0x08016580

0800bce0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	603b      	str	r3, [r7, #0]
 800bce8:	4603      	mov	r3, r0
 800bcea:	71fb      	strb	r3, [r7, #7]
 800bcec:	460b      	mov	r3, r1
 800bcee:	80bb      	strh	r3, [r7, #4]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800bcf4:	79fb      	ldrb	r3, [r7, #7]
 800bcf6:	2b04      	cmp	r3, #4
 800bcf8:	d81b      	bhi.n	800bd32 <pbuf_alloced_custom+0x52>
 800bcfa:	a201      	add	r2, pc, #4	; (adr r2, 800bd00 <pbuf_alloced_custom+0x20>)
 800bcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd00:	0800bd15 	.word	0x0800bd15
 800bd04:	0800bd1b 	.word	0x0800bd1b
 800bd08:	0800bd21 	.word	0x0800bd21
 800bd0c:	0800bd27 	.word	0x0800bd27
 800bd10:	0800bd2d 	.word	0x0800bd2d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800bd14:	2336      	movs	r3, #54	; 0x36
 800bd16:	81fb      	strh	r3, [r7, #14]
    break;
 800bd18:	e014      	b.n	800bd44 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800bd1a:	2322      	movs	r3, #34	; 0x22
 800bd1c:	81fb      	strh	r3, [r7, #14]
    break;
 800bd1e:	e011      	b.n	800bd44 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800bd20:	230e      	movs	r3, #14
 800bd22:	81fb      	strh	r3, [r7, #14]
    break;
 800bd24:	e00e      	b.n	800bd44 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800bd26:	2300      	movs	r3, #0
 800bd28:	81fb      	strh	r3, [r7, #14]
    break;
 800bd2a:	e00b      	b.n	800bd44 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	81fb      	strh	r3, [r7, #14]
    break;
 800bd30:	e008      	b.n	800bd44 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800bd32:	4b1d      	ldr	r3, [pc, #116]	; (800bda8 <pbuf_alloced_custom+0xc8>)
 800bd34:	f240 12c5 	movw	r2, #453	; 0x1c5
 800bd38:	491c      	ldr	r1, [pc, #112]	; (800bdac <pbuf_alloced_custom+0xcc>)
 800bd3a:	481d      	ldr	r0, [pc, #116]	; (800bdb0 <pbuf_alloced_custom+0xd0>)
 800bd3c:	f008 fe8c 	bl	8014a58 <iprintf>
    return NULL;
 800bd40:	2300      	movs	r3, #0
 800bd42:	e02d      	b.n	800bda0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bd44:	89fb      	ldrh	r3, [r7, #14]
 800bd46:	3303      	adds	r3, #3
 800bd48:	f023 0203 	bic.w	r2, r3, #3
 800bd4c:	88bb      	ldrh	r3, [r7, #4]
 800bd4e:	441a      	add	r2, r3
 800bd50:	8bbb      	ldrh	r3, [r7, #28]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d901      	bls.n	800bd5a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	e022      	b.n	800bda0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d008      	beq.n	800bd78 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bd66:	89fb      	ldrh	r3, [r7, #14]
 800bd68:	3303      	adds	r3, #3
 800bd6a:	f023 0303 	bic.w	r3, r3, #3
 800bd6e:	69ba      	ldr	r2, [r7, #24]
 800bd70:	441a      	add	r2, r3
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	605a      	str	r2, [r3, #4]
 800bd76:	e002      	b.n	800bd7e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	2202      	movs	r2, #2
 800bd82:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	88ba      	ldrh	r2, [r7, #4]
 800bd88:	811a      	strh	r2, [r3, #8]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	891a      	ldrh	r2, [r3, #8]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	79ba      	ldrb	r2, [r7, #6]
 800bd96:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800bd9e:	683b      	ldr	r3, [r7, #0]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	08016534 	.word	0x08016534
 800bdac:	080166cc 	.word	0x080166cc
 800bdb0:	08016580 	.word	0x08016580

0800bdb4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d106      	bne.n	800bdd4 <pbuf_realloc+0x20>
 800bdc6:	4b4b      	ldr	r3, [pc, #300]	; (800bef4 <pbuf_realloc+0x140>)
 800bdc8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800bdcc:	494a      	ldr	r1, [pc, #296]	; (800bef8 <pbuf_realloc+0x144>)
 800bdce:	484b      	ldr	r0, [pc, #300]	; (800befc <pbuf_realloc+0x148>)
 800bdd0:	f008 fe42 	bl	8014a58 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	7b1b      	ldrb	r3, [r3, #12]
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d012      	beq.n	800be02 <pbuf_realloc+0x4e>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	7b1b      	ldrb	r3, [r3, #12]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d00e      	beq.n	800be02 <pbuf_realloc+0x4e>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	7b1b      	ldrb	r3, [r3, #12]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00a      	beq.n	800be02 <pbuf_realloc+0x4e>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	7b1b      	ldrb	r3, [r3, #12]
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d006      	beq.n	800be02 <pbuf_realloc+0x4e>
 800bdf4:	4b3f      	ldr	r3, [pc, #252]	; (800bef4 <pbuf_realloc+0x140>)
 800bdf6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bdfa:	4941      	ldr	r1, [pc, #260]	; (800bf00 <pbuf_realloc+0x14c>)
 800bdfc:	483f      	ldr	r0, [pc, #252]	; (800befc <pbuf_realloc+0x148>)
 800bdfe:	f008 fe2b 	bl	8014a58 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	891b      	ldrh	r3, [r3, #8]
 800be06:	887a      	ldrh	r2, [r7, #2]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d26e      	bcs.n	800beea <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800be0c:	887b      	ldrh	r3, [r7, #2]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	8912      	ldrh	r2, [r2, #8]
 800be12:	1a9b      	subs	r3, r3, r2
 800be14:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800be16:	887b      	ldrh	r3, [r7, #2]
 800be18:	827b      	strh	r3, [r7, #18]
  q = p;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800be1e:	e025      	b.n	800be6c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	895b      	ldrh	r3, [r3, #10]
 800be24:	8a7a      	ldrh	r2, [r7, #18]
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800be30:	4293      	cmp	r3, r2
 800be32:	dd06      	ble.n	800be42 <pbuf_realloc+0x8e>
 800be34:	4b2f      	ldr	r3, [pc, #188]	; (800bef4 <pbuf_realloc+0x140>)
 800be36:	f240 220b 	movw	r2, #523	; 0x20b
 800be3a:	4932      	ldr	r1, [pc, #200]	; (800bf04 <pbuf_realloc+0x150>)
 800be3c:	482f      	ldr	r0, [pc, #188]	; (800befc <pbuf_realloc+0x148>)
 800be3e:	f008 fe0b 	bl	8014a58 <iprintf>
    q->tot_len += (u16_t)grow;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	891a      	ldrh	r2, [r3, #8]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	b29b      	uxth	r3, r3
 800be4a:	4413      	add	r3, r2
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d106      	bne.n	800be6c <pbuf_realloc+0xb8>
 800be5e:	4b25      	ldr	r3, [pc, #148]	; (800bef4 <pbuf_realloc+0x140>)
 800be60:	f240 220f 	movw	r2, #527	; 0x20f
 800be64:	4928      	ldr	r1, [pc, #160]	; (800bf08 <pbuf_realloc+0x154>)
 800be66:	4825      	ldr	r0, [pc, #148]	; (800befc <pbuf_realloc+0x148>)
 800be68:	f008 fdf6 	bl	8014a58 <iprintf>
  while (rem_len > q->len) {
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	895b      	ldrh	r3, [r3, #10]
 800be70:	8a7a      	ldrh	r2, [r7, #18]
 800be72:	429a      	cmp	r2, r3
 800be74:	d8d4      	bhi.n	800be20 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	7b1b      	ldrb	r3, [r3, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d121      	bne.n	800bec2 <pbuf_realloc+0x10e>
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	895b      	ldrh	r3, [r3, #10]
 800be82:	8a7a      	ldrh	r2, [r7, #18]
 800be84:	429a      	cmp	r2, r3
 800be86:	d01c      	beq.n	800bec2 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	7b5b      	ldrb	r3, [r3, #13]
 800be8c:	f003 0302 	and.w	r3, r3, #2
 800be90:	2b00      	cmp	r3, #0
 800be92:	d116      	bne.n	800bec2 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	8a7b      	ldrh	r3, [r7, #18]
 800bea0:	4413      	add	r3, r2
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	4619      	mov	r1, r3
 800bea6:	6978      	ldr	r0, [r7, #20]
 800bea8:	f7ff f8b4 	bl	800b014 <mem_trim>
 800beac:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d106      	bne.n	800bec2 <pbuf_realloc+0x10e>
 800beb4:	4b0f      	ldr	r3, [pc, #60]	; (800bef4 <pbuf_realloc+0x140>)
 800beb6:	f240 221d 	movw	r2, #541	; 0x21d
 800beba:	4914      	ldr	r1, [pc, #80]	; (800bf0c <pbuf_realloc+0x158>)
 800bebc:	480f      	ldr	r0, [pc, #60]	; (800befc <pbuf_realloc+0x148>)
 800bebe:	f008 fdcb 	bl	8014a58 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	8a7a      	ldrh	r2, [r7, #18]
 800bec6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	895a      	ldrh	r2, [r3, #10]
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d004      	beq.n	800bee2 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 f8dd 	bl	800c09c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2200      	movs	r2, #0
 800bee6:	601a      	str	r2, [r3, #0]
 800bee8:	e000      	b.n	800beec <pbuf_realloc+0x138>
    return;
 800beea:	bf00      	nop

}
 800beec:	3718      	adds	r7, #24
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	08016534 	.word	0x08016534
 800bef8:	080166f0 	.word	0x080166f0
 800befc:	08016580 	.word	0x08016580
 800bf00:	08016708 	.word	0x08016708
 800bf04:	08016724 	.word	0x08016724
 800bf08:	08016738 	.word	0x08016738
 800bf0c:	08016750 	.word	0x08016750

0800bf10 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	807b      	strh	r3, [r7, #2]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d106      	bne.n	800bf34 <pbuf_header_impl+0x24>
 800bf26:	4b46      	ldr	r3, [pc, #280]	; (800c040 <pbuf_header_impl+0x130>)
 800bf28:	f240 223f 	movw	r2, #575	; 0x23f
 800bf2c:	4945      	ldr	r1, [pc, #276]	; (800c044 <pbuf_header_impl+0x134>)
 800bf2e:	4846      	ldr	r0, [pc, #280]	; (800c048 <pbuf_header_impl+0x138>)
 800bf30:	f008 fd92 	bl	8014a58 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800bf34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d002      	beq.n	800bf42 <pbuf_header_impl+0x32>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <pbuf_header_impl+0x36>
    return 0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	e078      	b.n	800c038 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800bf46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	da10      	bge.n	800bf70 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800bf4e:	887b      	ldrh	r3, [r7, #2]
 800bf50:	425b      	negs	r3, r3
 800bf52:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	895b      	ldrh	r3, [r3, #10]
 800bf58:	89fa      	ldrh	r2, [r7, #14]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d90a      	bls.n	800bf74 <pbuf_header_impl+0x64>
 800bf5e:	4b38      	ldr	r3, [pc, #224]	; (800c040 <pbuf_header_impl+0x130>)
 800bf60:	f240 2247 	movw	r2, #583	; 0x247
 800bf64:	4939      	ldr	r1, [pc, #228]	; (800c04c <pbuf_header_impl+0x13c>)
 800bf66:	4838      	ldr	r0, [pc, #224]	; (800c048 <pbuf_header_impl+0x138>)
 800bf68:	f008 fd76 	bl	8014a58 <iprintf>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e063      	b.n	800c038 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800bf70:	887b      	ldrh	r3, [r7, #2]
 800bf72:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	7b1b      	ldrb	r3, [r3, #12]
 800bf78:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800bf80:	89bb      	ldrh	r3, [r7, #12]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d002      	beq.n	800bf8c <pbuf_header_impl+0x7c>
 800bf86:	89bb      	ldrh	r3, [r7, #12]
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d112      	bne.n	800bfb2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf94:	425b      	negs	r3, r3
 800bf96:	441a      	add	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	685a      	ldr	r2, [r3, #4]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3310      	adds	r3, #16
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d238      	bcs.n	800c01a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e042      	b.n	800c038 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800bfb2:	89bb      	ldrh	r3, [r7, #12]
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d002      	beq.n	800bfbe <pbuf_header_impl+0xae>
 800bfb8:	89bb      	ldrh	r3, [r7, #12]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d124      	bne.n	800c008 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800bfbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	da0d      	bge.n	800bfe2 <pbuf_header_impl+0xd2>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	895b      	ldrh	r3, [r3, #10]
 800bfca:	89fa      	ldrh	r2, [r7, #14]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d808      	bhi.n	800bfe2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	685a      	ldr	r2, [r3, #4]
 800bfd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfd8:	425b      	negs	r3, r3
 800bfda:	441a      	add	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	605a      	str	r2, [r3, #4]
 800bfe0:	e011      	b.n	800c006 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800bfe2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	dd0b      	ble.n	800c002 <pbuf_header_impl+0xf2>
 800bfea:	787b      	ldrb	r3, [r7, #1]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d008      	beq.n	800c002 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	685a      	ldr	r2, [r3, #4]
 800bff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bff8:	425b      	negs	r3, r3
 800bffa:	441a      	add	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	605a      	str	r2, [r3, #4]
 800c000:	e001      	b.n	800c006 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c002:	2301      	movs	r3, #1
 800c004:	e018      	b.n	800c038 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c006:	e008      	b.n	800c01a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800c008:	4b0d      	ldr	r3, [pc, #52]	; (800c040 <pbuf_header_impl+0x130>)
 800c00a:	f240 2277 	movw	r2, #631	; 0x277
 800c00e:	4910      	ldr	r1, [pc, #64]	; (800c050 <pbuf_header_impl+0x140>)
 800c010:	480d      	ldr	r0, [pc, #52]	; (800c048 <pbuf_header_impl+0x138>)
 800c012:	f008 fd21 	bl	8014a58 <iprintf>
    return 1;
 800c016:	2301      	movs	r3, #1
 800c018:	e00e      	b.n	800c038 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	895a      	ldrh	r2, [r3, #10]
 800c01e:	887b      	ldrh	r3, [r7, #2]
 800c020:	4413      	add	r3, r2
 800c022:	b29a      	uxth	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	891a      	ldrh	r2, [r3, #8]
 800c02c:	887b      	ldrh	r3, [r7, #2]
 800c02e:	4413      	add	r3, r2
 800c030:	b29a      	uxth	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3710      	adds	r7, #16
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	08016534 	.word	0x08016534
 800c044:	0801676c 	.word	0x0801676c
 800c048:	08016580 	.word	0x08016580
 800c04c:	08016778 	.word	0x08016778
 800c050:	08016798 	.word	0x08016798

0800c054 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	460b      	mov	r3, r1
 800c05e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800c060:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c064:	2200      	movs	r2, #0
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7ff ff51 	bl	800bf10 <pbuf_header_impl>
 800c06e:	4603      	mov	r3, r0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800c084:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c088:	2201      	movs	r2, #1
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7ff ff3f 	bl	800bf10 <pbuf_header_impl>
 800c092:	4603      	mov	r3, r0
}
 800c094:	4618      	mov	r0, r3
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b088      	sub	sp, #32
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10b      	bne.n	800c0c2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d106      	bne.n	800c0be <pbuf_free+0x22>
 800c0b0:	4b41      	ldr	r3, [pc, #260]	; (800c1b8 <pbuf_free+0x11c>)
 800c0b2:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c0b6:	4941      	ldr	r1, [pc, #260]	; (800c1bc <pbuf_free+0x120>)
 800c0b8:	4841      	ldr	r0, [pc, #260]	; (800c1c0 <pbuf_free+0x124>)
 800c0ba:	f008 fccd 	bl	8014a58 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	e076      	b.n	800c1b0 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	7b1b      	ldrb	r3, [r3, #12]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d012      	beq.n	800c0f0 <pbuf_free+0x54>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	7b1b      	ldrb	r3, [r3, #12]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d00e      	beq.n	800c0f0 <pbuf_free+0x54>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	7b1b      	ldrb	r3, [r3, #12]
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d00a      	beq.n	800c0f0 <pbuf_free+0x54>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	7b1b      	ldrb	r3, [r3, #12]
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d006      	beq.n	800c0f0 <pbuf_free+0x54>
 800c0e2:	4b35      	ldr	r3, [pc, #212]	; (800c1b8 <pbuf_free+0x11c>)
 800c0e4:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c0e8:	4936      	ldr	r1, [pc, #216]	; (800c1c4 <pbuf_free+0x128>)
 800c0ea:	4835      	ldr	r0, [pc, #212]	; (800c1c0 <pbuf_free+0x124>)
 800c0ec:	f008 fcb4 	bl	8014a58 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c0f4:	e058      	b.n	800c1a8 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c0f6:	f008 fbcf 	bl	8014898 <sys_arch_protect>
 800c0fa:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	89db      	ldrh	r3, [r3, #14]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d106      	bne.n	800c112 <pbuf_free+0x76>
 800c104:	4b2c      	ldr	r3, [pc, #176]	; (800c1b8 <pbuf_free+0x11c>)
 800c106:	f240 22eb 	movw	r2, #747	; 0x2eb
 800c10a:	492f      	ldr	r1, [pc, #188]	; (800c1c8 <pbuf_free+0x12c>)
 800c10c:	482c      	ldr	r0, [pc, #176]	; (800c1c0 <pbuf_free+0x124>)
 800c10e:	f008 fca3 	bl	8014a58 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	89db      	ldrh	r3, [r3, #14]
 800c116:	3b01      	subs	r3, #1
 800c118:	b29a      	uxth	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	81da      	strh	r2, [r3, #14]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	89db      	ldrh	r3, [r3, #14]
 800c122:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800c124:	69b8      	ldr	r0, [r7, #24]
 800c126:	f008 fbc5 	bl	80148b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c12a:	8afb      	ldrh	r3, [r7, #22]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d139      	bne.n	800c1a4 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	7b1b      	ldrb	r3, [r3, #12]
 800c13a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	7b5b      	ldrb	r3, [r3, #13]
 800c140:	f003 0302 	and.w	r3, r3, #2
 800c144:	2b00      	cmp	r3, #0
 800c146:	d011      	beq.n	800c16c <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d106      	bne.n	800c162 <pbuf_free+0xc6>
 800c154:	4b18      	ldr	r3, [pc, #96]	; (800c1b8 <pbuf_free+0x11c>)
 800c156:	f240 22f9 	movw	r2, #761	; 0x2f9
 800c15a:	491c      	ldr	r1, [pc, #112]	; (800c1cc <pbuf_free+0x130>)
 800c15c:	4818      	ldr	r0, [pc, #96]	; (800c1c0 <pbuf_free+0x124>)
 800c15e:	f008 fc7b 	bl	8014a58 <iprintf>
        pc->custom_free_function(p);
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	4798      	blx	r3
 800c16a:	e015      	b.n	800c198 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800c16c:	89fb      	ldrh	r3, [r7, #14]
 800c16e:	2b03      	cmp	r3, #3
 800c170:	d104      	bne.n	800c17c <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800c172:	6879      	ldr	r1, [r7, #4]
 800c174:	200c      	movs	r0, #12
 800c176:	f7ff f9f9 	bl	800b56c <memp_free>
 800c17a:	e00d      	b.n	800c198 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800c17c:	89fb      	ldrh	r3, [r7, #14]
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d002      	beq.n	800c188 <pbuf_free+0xec>
 800c182:	89fb      	ldrh	r3, [r7, #14]
 800c184:	2b02      	cmp	r3, #2
 800c186:	d104      	bne.n	800c192 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800c188:	6879      	ldr	r1, [r7, #4]
 800c18a:	200b      	movs	r0, #11
 800c18c:	f7ff f9ee 	bl	800b56c <memp_free>
 800c190:	e002      	b.n	800c198 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7fe fed0 	bl	800af38 <mem_free>
        }
      }
      count++;
 800c198:	7ffb      	ldrb	r3, [r7, #31]
 800c19a:	3301      	adds	r3, #1
 800c19c:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	607b      	str	r3, [r7, #4]
 800c1a2:	e001      	b.n	800c1a8 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1a3      	bne.n	800c0f6 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c1ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3720      	adds	r7, #32
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	08016534 	.word	0x08016534
 800c1bc:	0801676c 	.word	0x0801676c
 800c1c0:	08016580 	.word	0x08016580
 800c1c4:	080167a8 	.word	0x080167a8
 800c1c8:	080167c0 	.word	0x080167c0
 800c1cc:	080167d8 	.word	0x080167d8

0800c1d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c1dc:	e005      	b.n	800c1ea <pbuf_clen+0x1a>
    ++len;
 800c1de:	89fb      	ldrh	r3, [r7, #14]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1f6      	bne.n	800c1de <pbuf_clen+0xe>
  }
  return len;
 800c1f0:	89fb      	ldrh	r3, [r7, #14]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bc80      	pop	{r7}
 800c1fa:	4770      	bx	lr

0800c1fc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d016      	beq.n	800c238 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800c20a:	f008 fb45 	bl	8014898 <sys_arch_protect>
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	89db      	ldrh	r3, [r3, #14]
 800c214:	3301      	adds	r3, #1
 800c216:	b29a      	uxth	r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	81da      	strh	r2, [r3, #14]
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f008 fb49 	bl	80148b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	89db      	ldrh	r3, [r3, #14]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d106      	bne.n	800c238 <pbuf_ref+0x3c>
 800c22a:	4b05      	ldr	r3, [pc, #20]	; (800c240 <pbuf_ref+0x44>)
 800c22c:	f240 3239 	movw	r2, #825	; 0x339
 800c230:	4904      	ldr	r1, [pc, #16]	; (800c244 <pbuf_ref+0x48>)
 800c232:	4805      	ldr	r0, [pc, #20]	; (800c248 <pbuf_ref+0x4c>)
 800c234:	f008 fc10 	bl	8014a58 <iprintf>
  }
}
 800c238:	bf00      	nop
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	08016534 	.word	0x08016534
 800c244:	080167fc 	.word	0x080167fc
 800c248:	08016580 	.word	0x08016580

0800c24c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <pbuf_cat+0x16>
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d107      	bne.n	800c272 <pbuf_cat+0x26>
 800c262:	4b20      	ldr	r3, [pc, #128]	; (800c2e4 <pbuf_cat+0x98>)
 800c264:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800c268:	491f      	ldr	r1, [pc, #124]	; (800c2e8 <pbuf_cat+0x9c>)
 800c26a:	4820      	ldr	r0, [pc, #128]	; (800c2ec <pbuf_cat+0xa0>)
 800c26c:	f008 fbf4 	bl	8014a58 <iprintf>
 800c270:	e034      	b.n	800c2dc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	60fb      	str	r3, [r7, #12]
 800c276:	e00a      	b.n	800c28e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	891a      	ldrh	r2, [r3, #8]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	891b      	ldrh	r3, [r3, #8]
 800c280:	4413      	add	r3, r2
 800c282:	b29a      	uxth	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	60fb      	str	r3, [r7, #12]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1f0      	bne.n	800c278 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	891a      	ldrh	r2, [r3, #8]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	895b      	ldrh	r3, [r3, #10]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d006      	beq.n	800c2b0 <pbuf_cat+0x64>
 800c2a2:	4b10      	ldr	r3, [pc, #64]	; (800c2e4 <pbuf_cat+0x98>)
 800c2a4:	f240 3255 	movw	r2, #853	; 0x355
 800c2a8:	4911      	ldr	r1, [pc, #68]	; (800c2f0 <pbuf_cat+0xa4>)
 800c2aa:	4810      	ldr	r0, [pc, #64]	; (800c2ec <pbuf_cat+0xa0>)
 800c2ac:	f008 fbd4 	bl	8014a58 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d006      	beq.n	800c2c6 <pbuf_cat+0x7a>
 800c2b8:	4b0a      	ldr	r3, [pc, #40]	; (800c2e4 <pbuf_cat+0x98>)
 800c2ba:	f240 3256 	movw	r2, #854	; 0x356
 800c2be:	490d      	ldr	r1, [pc, #52]	; (800c2f4 <pbuf_cat+0xa8>)
 800c2c0:	480a      	ldr	r0, [pc, #40]	; (800c2ec <pbuf_cat+0xa0>)
 800c2c2:	f008 fbc9 	bl	8014a58 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	891a      	ldrh	r2, [r3, #8]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	891b      	ldrh	r3, [r3, #8]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	08016534 	.word	0x08016534
 800c2e8:	08016810 	.word	0x08016810
 800c2ec:	08016580 	.word	0x08016580
 800c2f0:	08016848 	.word	0x08016848
 800c2f4:	08016878 	.word	0x08016878

0800c2f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800c302:	2300      	movs	r3, #0
 800c304:	81fb      	strh	r3, [r7, #14]
 800c306:	2300      	movs	r3, #0
 800c308:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d008      	beq.n	800c322 <pbuf_copy+0x2a>
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d005      	beq.n	800c322 <pbuf_copy+0x2a>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	891a      	ldrh	r2, [r3, #8]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	891b      	ldrh	r3, [r3, #8]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d209      	bcs.n	800c336 <pbuf_copy+0x3e>
 800c322:	4b54      	ldr	r3, [pc, #336]	; (800c474 <pbuf_copy+0x17c>)
 800c324:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800c328:	4953      	ldr	r1, [pc, #332]	; (800c478 <pbuf_copy+0x180>)
 800c32a:	4854      	ldr	r0, [pc, #336]	; (800c47c <pbuf_copy+0x184>)
 800c32c:	f008 fb94 	bl	8014a58 <iprintf>
 800c330:	f06f 030f 	mvn.w	r3, #15
 800c334:	e099      	b.n	800c46a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	895b      	ldrh	r3, [r3, #10]
 800c33a:	461a      	mov	r2, r3
 800c33c:	89fb      	ldrh	r3, [r7, #14]
 800c33e:	1ad2      	subs	r2, r2, r3
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	895b      	ldrh	r3, [r3, #10]
 800c344:	4619      	mov	r1, r3
 800c346:	89bb      	ldrh	r3, [r7, #12]
 800c348:	1acb      	subs	r3, r1, r3
 800c34a:	429a      	cmp	r2, r3
 800c34c:	db05      	blt.n	800c35a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	895a      	ldrh	r2, [r3, #10]
 800c352:	89bb      	ldrh	r3, [r7, #12]
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	817b      	strh	r3, [r7, #10]
 800c358:	e004      	b.n	800c364 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	895a      	ldrh	r2, [r3, #10]
 800c35e:	89fb      	ldrh	r3, [r7, #14]
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	89fb      	ldrh	r3, [r7, #14]
 800c36a:	18d0      	adds	r0, r2, r3
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	685a      	ldr	r2, [r3, #4]
 800c370:	89bb      	ldrh	r3, [r7, #12]
 800c372:	4413      	add	r3, r2
 800c374:	897a      	ldrh	r2, [r7, #10]
 800c376:	4619      	mov	r1, r3
 800c378:	f008 fc9f 	bl	8014cba <memcpy>
    offset_to += len;
 800c37c:	89fa      	ldrh	r2, [r7, #14]
 800c37e:	897b      	ldrh	r3, [r7, #10]
 800c380:	4413      	add	r3, r2
 800c382:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800c384:	89ba      	ldrh	r2, [r7, #12]
 800c386:	897b      	ldrh	r3, [r7, #10]
 800c388:	4413      	add	r3, r2
 800c38a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	895b      	ldrh	r3, [r3, #10]
 800c390:	89fa      	ldrh	r2, [r7, #14]
 800c392:	429a      	cmp	r2, r3
 800c394:	d906      	bls.n	800c3a4 <pbuf_copy+0xac>
 800c396:	4b37      	ldr	r3, [pc, #220]	; (800c474 <pbuf_copy+0x17c>)
 800c398:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c39c:	4938      	ldr	r1, [pc, #224]	; (800c480 <pbuf_copy+0x188>)
 800c39e:	4837      	ldr	r0, [pc, #220]	; (800c47c <pbuf_copy+0x184>)
 800c3a0:	f008 fb5a 	bl	8014a58 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	895b      	ldrh	r3, [r3, #10]
 800c3a8:	89ba      	ldrh	r2, [r7, #12]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d906      	bls.n	800c3bc <pbuf_copy+0xc4>
 800c3ae:	4b31      	ldr	r3, [pc, #196]	; (800c474 <pbuf_copy+0x17c>)
 800c3b0:	f240 32ce 	movw	r2, #974	; 0x3ce
 800c3b4:	4933      	ldr	r1, [pc, #204]	; (800c484 <pbuf_copy+0x18c>)
 800c3b6:	4831      	ldr	r0, [pc, #196]	; (800c47c <pbuf_copy+0x184>)
 800c3b8:	f008 fb4e 	bl	8014a58 <iprintf>
    if (offset_from >= p_from->len) {
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	895b      	ldrh	r3, [r3, #10]
 800c3c0:	89ba      	ldrh	r2, [r7, #12]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d304      	bcc.n	800c3d0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	895b      	ldrh	r3, [r3, #10]
 800c3d4:	89fa      	ldrh	r2, [r7, #14]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d114      	bne.n	800c404 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10c      	bne.n	800c404 <pbuf_copy+0x10c>
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d009      	beq.n	800c404 <pbuf_copy+0x10c>
 800c3f0:	4b20      	ldr	r3, [pc, #128]	; (800c474 <pbuf_copy+0x17c>)
 800c3f2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c3f6:	4924      	ldr	r1, [pc, #144]	; (800c488 <pbuf_copy+0x190>)
 800c3f8:	4820      	ldr	r0, [pc, #128]	; (800c47c <pbuf_copy+0x184>)
 800c3fa:	f008 fb2d 	bl	8014a58 <iprintf>
 800c3fe:	f06f 030f 	mvn.w	r3, #15
 800c402:	e032      	b.n	800c46a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d013      	beq.n	800c432 <pbuf_copy+0x13a>
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	895a      	ldrh	r2, [r3, #10]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	891b      	ldrh	r3, [r3, #8]
 800c412:	429a      	cmp	r2, r3
 800c414:	d10d      	bne.n	800c432 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d009      	beq.n	800c432 <pbuf_copy+0x13a>
 800c41e:	4b15      	ldr	r3, [pc, #84]	; (800c474 <pbuf_copy+0x17c>)
 800c420:	f240 32dd 	movw	r2, #989	; 0x3dd
 800c424:	4919      	ldr	r1, [pc, #100]	; (800c48c <pbuf_copy+0x194>)
 800c426:	4815      	ldr	r0, [pc, #84]	; (800c47c <pbuf_copy+0x184>)
 800c428:	f008 fb16 	bl	8014a58 <iprintf>
 800c42c:	f06f 0305 	mvn.w	r3, #5
 800c430:	e01b      	b.n	800c46a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d013      	beq.n	800c460 <pbuf_copy+0x168>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	895a      	ldrh	r2, [r3, #10]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	891b      	ldrh	r3, [r3, #8]
 800c440:	429a      	cmp	r2, r3
 800c442:	d10d      	bne.n	800c460 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d009      	beq.n	800c460 <pbuf_copy+0x168>
 800c44c:	4b09      	ldr	r3, [pc, #36]	; (800c474 <pbuf_copy+0x17c>)
 800c44e:	f240 32e2 	movw	r2, #994	; 0x3e2
 800c452:	490e      	ldr	r1, [pc, #56]	; (800c48c <pbuf_copy+0x194>)
 800c454:	4809      	ldr	r0, [pc, #36]	; (800c47c <pbuf_copy+0x184>)
 800c456:	f008 faff 	bl	8014a58 <iprintf>
 800c45a:	f06f 0305 	mvn.w	r3, #5
 800c45e:	e004      	b.n	800c46a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	f47f af67 	bne.w	800c336 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	08016534 	.word	0x08016534
 800c478:	080168c4 	.word	0x080168c4
 800c47c:	08016580 	.word	0x08016580
 800c480:	080168f4 	.word	0x080168f4
 800c484:	0801690c 	.word	0x0801690c
 800c488:	08016928 	.word	0x08016928
 800c48c:	08016938 	.word	0x08016938

0800c490 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b088      	sub	sp, #32
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	4611      	mov	r1, r2
 800c49c:	461a      	mov	r2, r3
 800c49e:	460b      	mov	r3, r1
 800c4a0:	80fb      	strh	r3, [r7, #6]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d108      	bne.n	800c4c2 <pbuf_copy_partial+0x32>
 800c4b0:	4b30      	ldr	r3, [pc, #192]	; (800c574 <pbuf_copy_partial+0xe4>)
 800c4b2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800c4b6:	4930      	ldr	r1, [pc, #192]	; (800c578 <pbuf_copy_partial+0xe8>)
 800c4b8:	4830      	ldr	r0, [pc, #192]	; (800c57c <pbuf_copy_partial+0xec>)
 800c4ba:	f008 facd 	bl	8014a58 <iprintf>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	e054      	b.n	800c56c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d108      	bne.n	800c4da <pbuf_copy_partial+0x4a>
 800c4c8:	4b2a      	ldr	r3, [pc, #168]	; (800c574 <pbuf_copy_partial+0xe4>)
 800c4ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c4ce:	492c      	ldr	r1, [pc, #176]	; (800c580 <pbuf_copy_partial+0xf0>)
 800c4d0:	482a      	ldr	r0, [pc, #168]	; (800c57c <pbuf_copy_partial+0xec>)
 800c4d2:	f008 fac1 	bl	8014a58 <iprintf>
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	e048      	b.n	800c56c <pbuf_copy_partial+0xdc>

  left = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d002      	beq.n	800c4ea <pbuf_copy_partial+0x5a>
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d101      	bne.n	800c4ee <pbuf_copy_partial+0x5e>
    return 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	e03e      	b.n	800c56c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	61fb      	str	r3, [r7, #28]
 800c4f2:	e034      	b.n	800c55e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800c4f4:	88bb      	ldrh	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00a      	beq.n	800c510 <pbuf_copy_partial+0x80>
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	895b      	ldrh	r3, [r3, #10]
 800c4fe:	88ba      	ldrh	r2, [r7, #4]
 800c500:	429a      	cmp	r2, r3
 800c502:	d305      	bcc.n	800c510 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	895b      	ldrh	r3, [r3, #10]
 800c508:	88ba      	ldrh	r2, [r7, #4]
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	80bb      	strh	r3, [r7, #4]
 800c50e:	e023      	b.n	800c558 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	895a      	ldrh	r2, [r3, #10]
 800c514:	88bb      	ldrh	r3, [r7, #4]
 800c516:	1ad3      	subs	r3, r2, r3
 800c518:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c51a:	8b3a      	ldrh	r2, [r7, #24]
 800c51c:	88fb      	ldrh	r3, [r7, #6]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d901      	bls.n	800c526 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800c522:	88fb      	ldrh	r3, [r7, #6]
 800c524:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800c526:	8b7b      	ldrh	r3, [r7, #26]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	18d0      	adds	r0, r2, r3
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	88bb      	ldrh	r3, [r7, #4]
 800c532:	4413      	add	r3, r2
 800c534:	8b3a      	ldrh	r2, [r7, #24]
 800c536:	4619      	mov	r1, r3
 800c538:	f008 fbbf 	bl	8014cba <memcpy>
      copied_total += buf_copy_len;
 800c53c:	8afa      	ldrh	r2, [r7, #22]
 800c53e:	8b3b      	ldrh	r3, [r7, #24]
 800c540:	4413      	add	r3, r2
 800c542:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800c544:	8b7a      	ldrh	r2, [r7, #26]
 800c546:	8b3b      	ldrh	r3, [r7, #24]
 800c548:	4413      	add	r3, r2
 800c54a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800c54c:	88fa      	ldrh	r2, [r7, #6]
 800c54e:	8b3b      	ldrh	r3, [r7, #24]
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c554:	2300      	movs	r3, #0
 800c556:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	61fb      	str	r3, [r7, #28]
 800c55e:	88fb      	ldrh	r3, [r7, #6]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <pbuf_copy_partial+0xda>
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1c4      	bne.n	800c4f4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800c56a:	8afb      	ldrh	r3, [r7, #22]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3720      	adds	r7, #32
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	08016534 	.word	0x08016534
 800c578:	08016964 	.word	0x08016964
 800c57c:	08016580 	.word	0x08016580
 800c580:	08016984 	.word	0x08016984

0800c584 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c584:	b480      	push	{r7}
 800c586:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800c588:	bf00      	nop
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bc80      	pop	{r7}
 800c58e:	4770      	bx	lr

0800c590 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c594:	f000 ffc0 	bl	800d518 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c598:	4b07      	ldr	r3, [pc, #28]	; (800c5b8 <tcp_tmr+0x28>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	3301      	adds	r3, #1
 800c59e:	b2da      	uxtb	r2, r3
 800c5a0:	4b05      	ldr	r3, [pc, #20]	; (800c5b8 <tcp_tmr+0x28>)
 800c5a2:	701a      	strb	r2, [r3, #0]
 800c5a4:	4b04      	ldr	r3, [pc, #16]	; (800c5b8 <tcp_tmr+0x28>)
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	f003 0301 	and.w	r3, r3, #1
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c5b0:	f000 fcf0 	bl	800cf94 <tcp_slowtmr>
  }
}
 800c5b4:	bf00      	nop
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	2000ba29 	.word	0x2000ba29

0800c5bc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	60fb      	str	r3, [r7, #12]
 800c5ca:	e00a      	b.n	800c5e2 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d102      	bne.n	800c5dc <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	60fb      	str	r3, [r7, #12]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1f1      	bne.n	800c5cc <tcp_remove_listener+0x10>
      }
   }
}
 800c5e8:	bf00      	nop
 800c5ea:	bf00      	nop
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bc80      	pop	{r7}
 800c5f2:	4770      	bx	lr

0800c5f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d105      	bne.n	800c60e <tcp_listen_closed+0x1a>
 800c602:	4b13      	ldr	r3, [pc, #76]	; (800c650 <tcp_listen_closed+0x5c>)
 800c604:	22c0      	movs	r2, #192	; 0xc0
 800c606:	4913      	ldr	r1, [pc, #76]	; (800c654 <tcp_listen_closed+0x60>)
 800c608:	4813      	ldr	r0, [pc, #76]	; (800c658 <tcp_listen_closed+0x64>)
 800c60a:	f008 fa25 	bl	8014a58 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	7d1b      	ldrb	r3, [r3, #20]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d005      	beq.n	800c622 <tcp_listen_closed+0x2e>
 800c616:	4b0e      	ldr	r3, [pc, #56]	; (800c650 <tcp_listen_closed+0x5c>)
 800c618:	22c1      	movs	r2, #193	; 0xc1
 800c61a:	4910      	ldr	r1, [pc, #64]	; (800c65c <tcp_listen_closed+0x68>)
 800c61c:	480e      	ldr	r0, [pc, #56]	; (800c658 <tcp_listen_closed+0x64>)
 800c61e:	f008 fa1b 	bl	8014a58 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c622:	2301      	movs	r3, #1
 800c624:	60fb      	str	r3, [r7, #12]
 800c626:	e00b      	b.n	800c640 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800c628:	4a0d      	ldr	r2, [pc, #52]	; (800c660 <tcp_listen_closed+0x6c>)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	6879      	ldr	r1, [r7, #4]
 800c634:	4618      	mov	r0, r3
 800c636:	f7ff ffc1 	bl	800c5bc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	3301      	adds	r3, #1
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2b03      	cmp	r3, #3
 800c644:	d9f0      	bls.n	800c628 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c646:	bf00      	nop
 800c648:	bf00      	nop
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	08016ab8 	.word	0x08016ab8
 800c654:	08016ae8 	.word	0x08016ae8
 800c658:	08016af4 	.word	0x08016af4
 800c65c:	08016b1c 	.word	0x08016b1c
 800c660:	08017f60 	.word	0x08017f60

0800c664 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c664:	b5b0      	push	{r4, r5, r7, lr}
 800c666:	b086      	sub	sp, #24
 800c668:	af02      	add	r7, sp, #8
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c670:	78fb      	ldrb	r3, [r7, #3]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d075      	beq.n	800c762 <tcp_close_shutdown+0xfe>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	7d1b      	ldrb	r3, [r3, #20]
 800c67a:	2b04      	cmp	r3, #4
 800c67c:	d003      	beq.n	800c686 <tcp_close_shutdown+0x22>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	7d1b      	ldrb	r3, [r3, #20]
 800c682:	2b07      	cmp	r3, #7
 800c684:	d16d      	bne.n	800c762 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d104      	bne.n	800c698 <tcp_close_shutdown+0x34>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c692:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c696:	d064      	beq.n	800c762 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	7e9b      	ldrb	r3, [r3, #26]
 800c69c:	f003 0310 	and.w	r3, r3, #16
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d106      	bne.n	800c6b2 <tcp_close_shutdown+0x4e>
 800c6a4:	4b5b      	ldr	r3, [pc, #364]	; (800c814 <tcp_close_shutdown+0x1b0>)
 800c6a6:	f240 120f 	movw	r2, #271	; 0x10f
 800c6aa:	495b      	ldr	r1, [pc, #364]	; (800c818 <tcp_close_shutdown+0x1b4>)
 800c6ac:	485b      	ldr	r0, [pc, #364]	; (800c81c <tcp_close_shutdown+0x1b8>)
 800c6ae:	f008 f9d3 	bl	8014a58 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c6ba:	687c      	ldr	r4, [r7, #4]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	1d1d      	adds	r5, r3, #4
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	8adb      	ldrh	r3, [r3, #22]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	8b12      	ldrh	r2, [r2, #24]
 800c6c8:	9201      	str	r2, [sp, #4]
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	462b      	mov	r3, r5
 800c6ce:	4622      	mov	r2, r4
 800c6d0:	f004 ff14 	bl	80114fc <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f001 fa51 	bl	800db7c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c6da:	4b51      	ldr	r3, [pc, #324]	; (800c820 <tcp_close_shutdown+0x1bc>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d105      	bne.n	800c6f0 <tcp_close_shutdown+0x8c>
 800c6e4:	4b4e      	ldr	r3, [pc, #312]	; (800c820 <tcp_close_shutdown+0x1bc>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	4a4d      	ldr	r2, [pc, #308]	; (800c820 <tcp_close_shutdown+0x1bc>)
 800c6ec:	6013      	str	r3, [r2, #0]
 800c6ee:	e013      	b.n	800c718 <tcp_close_shutdown+0xb4>
 800c6f0:	4b4b      	ldr	r3, [pc, #300]	; (800c820 <tcp_close_shutdown+0x1bc>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	60fb      	str	r3, [r7, #12]
 800c6f6:	e00c      	b.n	800c712 <tcp_close_shutdown+0xae>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d104      	bne.n	800c70c <tcp_close_shutdown+0xa8>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68da      	ldr	r2, [r3, #12]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	60da      	str	r2, [r3, #12]
 800c70a:	e005      	b.n	800c718 <tcp_close_shutdown+0xb4>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	60fb      	str	r3, [r7, #12]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1ef      	bne.n	800c6f8 <tcp_close_shutdown+0x94>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	60da      	str	r2, [r3, #12]
 800c71e:	4b41      	ldr	r3, [pc, #260]	; (800c824 <tcp_close_shutdown+0x1c0>)
 800c720:	2201      	movs	r2, #1
 800c722:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	7d1b      	ldrb	r3, [r3, #20]
 800c728:	2b04      	cmp	r3, #4
 800c72a:	d10c      	bne.n	800c746 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	220a      	movs	r2, #10
 800c730:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c732:	4b3d      	ldr	r3, [pc, #244]	; (800c828 <tcp_close_shutdown+0x1c4>)
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	60da      	str	r2, [r3, #12]
 800c73a:	4a3b      	ldr	r2, [pc, #236]	; (800c828 <tcp_close_shutdown+0x1c4>)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6013      	str	r3, [r2, #0]
 800c740:	f005 f924 	bl	801198c <tcp_timer_needed>
 800c744:	e00b      	b.n	800c75e <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800c746:	4b39      	ldr	r3, [pc, #228]	; (800c82c <tcp_close_shutdown+0x1c8>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d102      	bne.n	800c756 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800c750:	f003 fd74 	bl	801023c <tcp_trigger_input_pcb_close>
 800c754:	e003      	b.n	800c75e <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800c756:	6879      	ldr	r1, [r7, #4]
 800c758:	2001      	movs	r0, #1
 800c75a:	f7fe ff07 	bl	800b56c <memp_free>
        }
      }
      return ERR_OK;
 800c75e:	2300      	movs	r3, #0
 800c760:	e053      	b.n	800c80a <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	7d1b      	ldrb	r3, [r3, #20]
 800c766:	2b02      	cmp	r3, #2
 800c768:	d03d      	beq.n	800c7e6 <tcp_close_shutdown+0x182>
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	dc47      	bgt.n	800c7fe <tcp_close_shutdown+0x19a>
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d002      	beq.n	800c778 <tcp_close_shutdown+0x114>
 800c772:	2b01      	cmp	r3, #1
 800c774:	d02b      	beq.n	800c7ce <tcp_close_shutdown+0x16a>
 800c776:	e042      	b.n	800c7fe <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	8adb      	ldrh	r3, [r3, #22]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d021      	beq.n	800c7c4 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800c780:	4b2b      	ldr	r3, [pc, #172]	; (800c830 <tcp_close_shutdown+0x1cc>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	429a      	cmp	r2, r3
 800c788:	d105      	bne.n	800c796 <tcp_close_shutdown+0x132>
 800c78a:	4b29      	ldr	r3, [pc, #164]	; (800c830 <tcp_close_shutdown+0x1cc>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	4a27      	ldr	r2, [pc, #156]	; (800c830 <tcp_close_shutdown+0x1cc>)
 800c792:	6013      	str	r3, [r2, #0]
 800c794:	e013      	b.n	800c7be <tcp_close_shutdown+0x15a>
 800c796:	4b26      	ldr	r3, [pc, #152]	; (800c830 <tcp_close_shutdown+0x1cc>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	60bb      	str	r3, [r7, #8]
 800c79c:	e00c      	b.n	800c7b8 <tcp_close_shutdown+0x154>
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d104      	bne.n	800c7b2 <tcp_close_shutdown+0x14e>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	68da      	ldr	r2, [r3, #12]
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	60da      	str	r2, [r3, #12]
 800c7b0:	e005      	b.n	800c7be <tcp_close_shutdown+0x15a>
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	60bb      	str	r3, [r7, #8]
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1ef      	bne.n	800c79e <tcp_close_shutdown+0x13a>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800c7c4:	6879      	ldr	r1, [r7, #4]
 800c7c6:	2001      	movs	r0, #1
 800c7c8:	f7fe fed0 	bl	800b56c <memp_free>
    break;
 800c7cc:	e01c      	b.n	800c808 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f7ff ff10 	bl	800c5f4 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c7d4:	6879      	ldr	r1, [r7, #4]
 800c7d6:	4817      	ldr	r0, [pc, #92]	; (800c834 <tcp_close_shutdown+0x1d0>)
 800c7d8:	f001 fa12 	bl	800dc00 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c7dc:	6879      	ldr	r1, [r7, #4]
 800c7de:	2002      	movs	r0, #2
 800c7e0:	f7fe fec4 	bl	800b56c <memp_free>
    break;
 800c7e4:	e010      	b.n	800c808 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800c7e6:	6879      	ldr	r1, [r7, #4]
 800c7e8:	480d      	ldr	r0, [pc, #52]	; (800c820 <tcp_close_shutdown+0x1bc>)
 800c7ea:	f001 fa09 	bl	800dc00 <tcp_pcb_remove>
 800c7ee:	4b0d      	ldr	r3, [pc, #52]	; (800c824 <tcp_close_shutdown+0x1c0>)
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800c7f4:	6879      	ldr	r1, [r7, #4]
 800c7f6:	2001      	movs	r0, #1
 800c7f8:	f7fe feb8 	bl	800b56c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800c7fc:	e004      	b.n	800c808 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f81a 	bl	800c838 <tcp_close_shutdown_fin>
 800c804:	4603      	mov	r3, r0
 800c806:	e000      	b.n	800c80a <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 800c808:	2300      	movs	r3, #0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bdb0      	pop	{r4, r5, r7, pc}
 800c812:	bf00      	nop
 800c814:	08016ab8 	.word	0x08016ab8
 800c818:	08016b34 	.word	0x08016b34
 800c81c:	08016af4 	.word	0x08016af4
 800c820:	2000ba20 	.word	0x2000ba20
 800c824:	2000ba28 	.word	0x2000ba28
 800c828:	2000ba24 	.word	0x2000ba24
 800c82c:	2000ba60 	.word	0x2000ba60
 800c830:	2000ba18 	.word	0x2000ba18
 800c834:	2000ba1c 	.word	0x2000ba1c

0800c838 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d106      	bne.n	800c854 <tcp_close_shutdown_fin+0x1c>
 800c846:	4b2e      	ldr	r3, [pc, #184]	; (800c900 <tcp_close_shutdown_fin+0xc8>)
 800c848:	f240 124d 	movw	r2, #333	; 0x14d
 800c84c:	492d      	ldr	r1, [pc, #180]	; (800c904 <tcp_close_shutdown_fin+0xcc>)
 800c84e:	482e      	ldr	r0, [pc, #184]	; (800c908 <tcp_close_shutdown_fin+0xd0>)
 800c850:	f008 f902 	bl	8014a58 <iprintf>

  switch (pcb->state) {
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	7d1b      	ldrb	r3, [r3, #20]
 800c858:	2b07      	cmp	r3, #7
 800c85a:	d020      	beq.n	800c89e <tcp_close_shutdown_fin+0x66>
 800c85c:	2b07      	cmp	r3, #7
 800c85e:	dc2b      	bgt.n	800c8b8 <tcp_close_shutdown_fin+0x80>
 800c860:	2b03      	cmp	r3, #3
 800c862:	d002      	beq.n	800c86a <tcp_close_shutdown_fin+0x32>
 800c864:	2b04      	cmp	r3, #4
 800c866:	d00d      	beq.n	800c884 <tcp_close_shutdown_fin+0x4c>
 800c868:	e026      	b.n	800c8b8 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f003 fd70 	bl	8010350 <tcp_send_fin>
 800c870:	4603      	mov	r3, r0
 800c872:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d11f      	bne.n	800c8bc <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2205      	movs	r2, #5
 800c880:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c882:	e01b      	b.n	800c8bc <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f003 fd63 	bl	8010350 <tcp_send_fin>
 800c88a:	4603      	mov	r3, r0
 800c88c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c88e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d114      	bne.n	800c8c0 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2205      	movs	r2, #5
 800c89a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c89c:	e010      	b.n	800c8c0 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f003 fd56 	bl	8010350 <tcp_send_fin>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c8a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d109      	bne.n	800c8c4 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2209      	movs	r2, #9
 800c8b4:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c8b6:	e005      	b.n	800c8c4 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	e01c      	b.n	800c8f6 <tcp_close_shutdown_fin+0xbe>
    break;
 800c8bc:	bf00      	nop
 800c8be:	e002      	b.n	800c8c6 <tcp_close_shutdown_fin+0x8e>
    break;
 800c8c0:	bf00      	nop
 800c8c2:	e000      	b.n	800c8c6 <tcp_close_shutdown_fin+0x8e>
    break;
 800c8c4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c8c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d103      	bne.n	800c8d6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f004 fb90 	bl	8010ff4 <tcp_output>
 800c8d4:	e00d      	b.n	800c8f2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8de:	d108      	bne.n	800c8f2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	7e9b      	ldrb	r3, [r3, #26]
 800c8e4:	f043 0308 	orr.w	r3, r3, #8
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e001      	b.n	800c8f6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c8f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	08016ab8 	.word	0x08016ab8
 800c904:	08016ae8 	.word	0x08016ae8
 800c908:	08016af4 	.word	0x08016af4

0800c90c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	7d1b      	ldrb	r3, [r3, #20]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d006      	beq.n	800c92a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	7e9b      	ldrb	r3, [r3, #26]
 800c920:	f043 0310 	orr.w	r3, r3, #16
 800c924:	b2da      	uxtb	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c92a:	2101      	movs	r1, #1
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f7ff fe99 	bl	800c664 <tcp_close_shutdown>
 800c932:	4603      	mov	r3, r0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	7d1b      	ldrb	r3, [r3, #20]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d102      	bne.n	800c956 <tcp_shutdown+0x1a>
    return ERR_CONN;
 800c950:	f06f 030a 	mvn.w	r3, #10
 800c954:	e036      	b.n	800c9c4 <tcp_shutdown+0x88>
  }
  if (shut_rx) {
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01b      	beq.n	800c994 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	7e9b      	ldrb	r3, [r3, #26]
 800c960:	f043 0310 	orr.w	r3, r3, #16
 800c964:	b2da      	uxtb	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d005      	beq.n	800c97c <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c970:	2101      	movs	r1, #1
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f7ff fe76 	bl	800c664 <tcp_close_shutdown>
 800c978:	4603      	mov	r3, r0
 800c97a:	e023      	b.n	800c9c4 <tcp_shutdown+0x88>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c980:	2b00      	cmp	r3, #0
 800c982:	d007      	beq.n	800c994 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c988:	4618      	mov	r0, r3
 800c98a:	f7ff fb87 	bl	800c09c <pbuf_free>
      pcb->refused_data = NULL;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2200      	movs	r2, #0
 800c992:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d013      	beq.n	800c9c2 <tcp_shutdown+0x86>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	7d1b      	ldrb	r3, [r3, #20]
 800c99e:	2b04      	cmp	r3, #4
 800c9a0:	dc02      	bgt.n	800c9a8 <tcp_shutdown+0x6c>
 800c9a2:	2b03      	cmp	r3, #3
 800c9a4:	da02      	bge.n	800c9ac <tcp_shutdown+0x70>
 800c9a6:	e009      	b.n	800c9bc <tcp_shutdown+0x80>
 800c9a8:	2b07      	cmp	r3, #7
 800c9aa:	d107      	bne.n	800c9bc <tcp_shutdown+0x80>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f7ff fe56 	bl	800c664 <tcp_close_shutdown>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	e003      	b.n	800c9c4 <tcp_shutdown+0x88>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800c9bc:	f06f 030a 	mvn.w	r3, #10
 800c9c0:	e000      	b.n	800c9c4 <tcp_shutdown+0x88>
    }
  }
  return ERR_OK;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b08c      	sub	sp, #48	; 0x30
 800c9d0:	af02      	add	r7, sp, #8
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	7d1b      	ldrb	r3, [r3, #20]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d106      	bne.n	800c9ec <tcp_abandon+0x20>
 800c9de:	4b4d      	ldr	r3, [pc, #308]	; (800cb14 <tcp_abandon+0x148>)
 800c9e0:	f240 12df 	movw	r2, #479	; 0x1df
 800c9e4:	494c      	ldr	r1, [pc, #304]	; (800cb18 <tcp_abandon+0x14c>)
 800c9e6:	484d      	ldr	r0, [pc, #308]	; (800cb1c <tcp_abandon+0x150>)
 800c9e8:	f008 f836 	bl	8014a58 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	7d1b      	ldrb	r3, [r3, #20]
 800c9f0:	2b0a      	cmp	r3, #10
 800c9f2:	d108      	bne.n	800ca06 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c9f4:	6879      	ldr	r1, [r7, #4]
 800c9f6:	484a      	ldr	r0, [pc, #296]	; (800cb20 <tcp_abandon+0x154>)
 800c9f8:	f001 f902 	bl	800dc00 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800c9fc:	6879      	ldr	r1, [r7, #4]
 800c9fe:	2001      	movs	r0, #1
 800ca00:	f7fe fdb4 	bl	800b56c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800ca04:	e081      	b.n	800cb0a <tcp_abandon+0x13e>
    int send_rst = 0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca12:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca18:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca20:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	7d1b      	ldrb	r3, [r3, #20]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d126      	bne.n	800ca7e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	8adb      	ldrh	r3, [r3, #22]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d02e      	beq.n	800ca96 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ca38:	4b3a      	ldr	r3, [pc, #232]	; (800cb24 <tcp_abandon+0x158>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d105      	bne.n	800ca4e <tcp_abandon+0x82>
 800ca42:	4b38      	ldr	r3, [pc, #224]	; (800cb24 <tcp_abandon+0x158>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	4a36      	ldr	r2, [pc, #216]	; (800cb24 <tcp_abandon+0x158>)
 800ca4a:	6013      	str	r3, [r2, #0]
 800ca4c:	e013      	b.n	800ca76 <tcp_abandon+0xaa>
 800ca4e:	4b35      	ldr	r3, [pc, #212]	; (800cb24 <tcp_abandon+0x158>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	61fb      	str	r3, [r7, #28]
 800ca54:	e00c      	b.n	800ca70 <tcp_abandon+0xa4>
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d104      	bne.n	800ca6a <tcp_abandon+0x9e>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	68da      	ldr	r2, [r3, #12]
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	60da      	str	r2, [r3, #12]
 800ca68:	e005      	b.n	800ca76 <tcp_abandon+0xaa>
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	61fb      	str	r3, [r7, #28]
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1ef      	bne.n	800ca56 <tcp_abandon+0x8a>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	60da      	str	r2, [r3, #12]
 800ca7c:	e00b      	b.n	800ca96 <tcp_abandon+0xca>
      send_rst = reset;
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	8adb      	ldrh	r3, [r3, #22]
 800ca86:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ca88:	6879      	ldr	r1, [r7, #4]
 800ca8a:	4827      	ldr	r0, [pc, #156]	; (800cb28 <tcp_abandon+0x15c>)
 800ca8c:	f001 f8b8 	bl	800dc00 <tcp_pcb_remove>
 800ca90:	4b26      	ldr	r3, [pc, #152]	; (800cb2c <tcp_abandon+0x160>)
 800ca92:	2201      	movs	r2, #1
 800ca94:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d004      	beq.n	800caa8 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fe05 	bl	800d6b2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caac:	2b00      	cmp	r3, #0
 800caae:	d004      	beq.n	800caba <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cab4:	4618      	mov	r0, r3
 800cab6:	f000 fdfc 	bl	800d6b2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d004      	beq.n	800cacc <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 fdf3 	bl	800d6b2 <tcp_segs_free>
    if (send_rst) {
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00c      	beq.n	800caec <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	1d19      	adds	r1, r3, #4
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	8b1b      	ldrh	r3, [r3, #24]
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	460b      	mov	r3, r1
 800cae4:	6979      	ldr	r1, [r7, #20]
 800cae6:	69b8      	ldr	r0, [r7, #24]
 800cae8:	f004 fd08 	bl	80114fc <tcp_rst>
    last_state = pcb->state;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	7d1b      	ldrb	r3, [r3, #20]
 800caf0:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800caf2:	6879      	ldr	r1, [r7, #4]
 800caf4:	2001      	movs	r0, #1
 800caf6:	f7fe fd39 	bl	800b56c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d004      	beq.n	800cb0a <tcp_abandon+0x13e>
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	f06f 010c 	mvn.w	r1, #12
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	4798      	blx	r3
}
 800cb0a:	bf00      	nop
 800cb0c:	3728      	adds	r7, #40	; 0x28
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	08016ab8 	.word	0x08016ab8
 800cb18:	08016b50 	.word	0x08016b50
 800cb1c:	08016af4 	.word	0x08016af4
 800cb20:	2000ba24 	.word	0x2000ba24
 800cb24:	2000ba18 	.word	0x2000ba18
 800cb28:	2000ba20 	.word	0x2000ba20
 800cb2c:	2000ba28 	.word	0x2000ba28

0800cb30 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cb38:	2101      	movs	r1, #1
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7ff ff46 	bl	800c9cc <tcp_abandon>
}
 800cb40:	bf00      	nop
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b088      	sub	sp, #32
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	4613      	mov	r3, r2
 800cb54:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cb56:	2304      	movs	r3, #4
 800cb58:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d101      	bne.n	800cb64 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cb60:	4b3c      	ldr	r3, [pc, #240]	; (800cc54 <tcp_bind+0x10c>)
 800cb62:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d002      	beq.n	800cb70 <tcp_bind+0x28>
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d102      	bne.n	800cb76 <tcp_bind+0x2e>
    return ERR_VAL;
 800cb70:	f06f 0305 	mvn.w	r3, #5
 800cb74:	e06a      	b.n	800cc4c <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	7d1b      	ldrb	r3, [r3, #20]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d009      	beq.n	800cb92 <tcp_bind+0x4a>
 800cb7e:	4b36      	ldr	r3, [pc, #216]	; (800cc58 <tcp_bind+0x110>)
 800cb80:	f44f 7211 	mov.w	r2, #580	; 0x244
 800cb84:	4935      	ldr	r1, [pc, #212]	; (800cc5c <tcp_bind+0x114>)
 800cb86:	4836      	ldr	r0, [pc, #216]	; (800cc60 <tcp_bind+0x118>)
 800cb88:	f007 ff66 	bl	8014a58 <iprintf>
 800cb8c:	f06f 0305 	mvn.w	r3, #5
 800cb90:	e05c      	b.n	800cc4c <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800cb92:	88fb      	ldrh	r3, [r7, #6]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d109      	bne.n	800cbac <tcp_bind+0x64>
    port = tcp_new_port();
 800cb98:	f000 f9b8 	bl	800cf0c <tcp_new_port>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cba0:	88fb      	ldrh	r3, [r7, #6]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d135      	bne.n	800cc12 <tcp_bind+0xca>
      return ERR_BUF;
 800cba6:	f06f 0301 	mvn.w	r3, #1
 800cbaa:	e04f      	b.n	800cc4c <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800cbac:	2300      	movs	r3, #0
 800cbae:	61fb      	str	r3, [r7, #28]
 800cbb0:	e02b      	b.n	800cc0a <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cbb2:	4a2c      	ldr	r2, [pc, #176]	; (800cc64 <tcp_bind+0x11c>)
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	61bb      	str	r3, [r7, #24]
 800cbbe:	e01e      	b.n	800cbfe <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	8adb      	ldrh	r3, [r3, #22]
 800cbc4:	88fa      	ldrh	r2, [r7, #6]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d116      	bne.n	800cbf8 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800cbca:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d010      	beq.n	800cbf2 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00c      	beq.n	800cbf2 <tcp_bind+0xaa>
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d009      	beq.n	800cbf2 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d005      	beq.n	800cbf2 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d102      	bne.n	800cbf8 <tcp_bind+0xb0>
              return ERR_USE;
 800cbf2:	f06f 0307 	mvn.w	r3, #7
 800cbf6:	e029      	b.n	800cc4c <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	61bb      	str	r3, [r7, #24]
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1dd      	bne.n	800cbc0 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	3301      	adds	r3, #1
 800cc08:	61fb      	str	r3, [r7, #28]
 800cc0a:	69fa      	ldr	r2, [r7, #28]
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	dbcf      	blt.n	800cbb2 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00c      	beq.n	800cc32 <tcp_bind+0xea>
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d008      	beq.n	800cc32 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <tcp_bind+0xe4>
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	e000      	b.n	800cc2e <tcp_bind+0xe6>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	88fa      	ldrh	r2, [r7, #6]
 800cc36:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cc38:	4b0b      	ldr	r3, [pc, #44]	; (800cc68 <tcp_bind+0x120>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	60da      	str	r2, [r3, #12]
 800cc40:	4a09      	ldr	r2, [pc, #36]	; (800cc68 <tcp_bind+0x120>)
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	f004 fea1 	bl	801198c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3720      	adds	r7, #32
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	08017f88 	.word	0x08017f88
 800cc58:	08016ab8 	.word	0x08016ab8
 800cc5c:	08016b84 	.word	0x08016b84
 800cc60:	08016af4 	.word	0x08016af4
 800cc64:	08017f60 	.word	0x08017f60
 800cc68:	2000ba18 	.word	0x2000ba18

0800cc6c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	4613      	mov	r3, r2
 800cc78:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800cc7a:	68b8      	ldr	r0, [r7, #8]
 800cc7c:	f7ff ff58 	bl	800cb30 <tcp_abort>

  return ERR_ABRT;
 800cc80:	f06f 030c 	mvn.w	r3, #12
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b088      	sub	sp, #32
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	460b      	mov	r3, r1
 800cc96:	607a      	str	r2, [r7, #4]
 800cc98:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	7d1b      	ldrb	r3, [r3, #20]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d009      	beq.n	800ccba <tcp_listen_with_backlog_and_err+0x2e>
 800cca6:	4b3f      	ldr	r3, [pc, #252]	; (800cda4 <tcp_listen_with_backlog_and_err+0x118>)
 800cca8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800ccac:	493e      	ldr	r1, [pc, #248]	; (800cda8 <tcp_listen_with_backlog_and_err+0x11c>)
 800ccae:	483f      	ldr	r0, [pc, #252]	; (800cdac <tcp_listen_with_backlog_and_err+0x120>)
 800ccb0:	f007 fed2 	bl	8014a58 <iprintf>
 800ccb4:	23f1      	movs	r3, #241	; 0xf1
 800ccb6:	76fb      	strb	r3, [r7, #27]
 800ccb8:	e069      	b.n	800cd8e <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	7d1b      	ldrb	r3, [r3, #20]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d104      	bne.n	800cccc <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ccc6:	23f7      	movs	r3, #247	; 0xf7
 800ccc8:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ccca:	e060      	b.n	800cd8e <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cccc:	2002      	movs	r0, #2
 800ccce:	f7fe fbfb 	bl	800b4c8 <memp_malloc>
 800ccd2:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d102      	bne.n	800cce0 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800ccda:	23ff      	movs	r3, #255	; 0xff
 800ccdc:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ccde:	e056      	b.n	800cd8e <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	691a      	ldr	r2, [r3, #16]
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	8ada      	ldrh	r2, [r3, #22]
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	7d5a      	ldrb	r2, [r3, #21]
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	7a1a      	ldrb	r2, [r3, #8]
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	7a9a      	ldrb	r2, [r3, #10]
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	7a5a      	ldrb	r2, [r3, #9]
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	8adb      	ldrh	r3, [r3, #22]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d021      	beq.n	800cd6a <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cd26:	4b22      	ldr	r3, [pc, #136]	; (800cdb0 <tcp_listen_with_backlog_and_err+0x124>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68fa      	ldr	r2, [r7, #12]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d105      	bne.n	800cd3c <tcp_listen_with_backlog_and_err+0xb0>
 800cd30:	4b1f      	ldr	r3, [pc, #124]	; (800cdb0 <tcp_listen_with_backlog_and_err+0x124>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	4a1e      	ldr	r2, [pc, #120]	; (800cdb0 <tcp_listen_with_backlog_and_err+0x124>)
 800cd38:	6013      	str	r3, [r2, #0]
 800cd3a:	e013      	b.n	800cd64 <tcp_listen_with_backlog_and_err+0xd8>
 800cd3c:	4b1c      	ldr	r3, [pc, #112]	; (800cdb0 <tcp_listen_with_backlog_and_err+0x124>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	617b      	str	r3, [r7, #20]
 800cd42:	e00c      	b.n	800cd5e <tcp_listen_with_backlog_and_err+0xd2>
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d104      	bne.n	800cd58 <tcp_listen_with_backlog_and_err+0xcc>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	68da      	ldr	r2, [r3, #12]
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	60da      	str	r2, [r3, #12]
 800cd56:	e005      	b.n	800cd64 <tcp_listen_with_backlog_and_err+0xd8>
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	617b      	str	r3, [r7, #20]
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d1ef      	bne.n	800cd44 <tcp_listen_with_backlog_and_err+0xb8>
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2200      	movs	r2, #0
 800cd68:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800cd6a:	68f9      	ldr	r1, [r7, #12]
 800cd6c:	2001      	movs	r0, #1
 800cd6e:	f7fe fbfd 	bl	800b56c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	4a0f      	ldr	r2, [pc, #60]	; (800cdb4 <tcp_listen_with_backlog_and_err+0x128>)
 800cd76:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800cd78:	4b0f      	ldr	r3, [pc, #60]	; (800cdb8 <tcp_listen_with_backlog_and_err+0x12c>)
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	60da      	str	r2, [r3, #12]
 800cd80:	4a0d      	ldr	r2, [pc, #52]	; (800cdb8 <tcp_listen_with_backlog_and_err+0x12c>)
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	f004 fe01 	bl	801198c <tcp_timer_needed>
  res = ERR_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d002      	beq.n	800cd9a <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	7efa      	ldrb	r2, [r7, #27]
 800cd98:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800cd9a:	69fb      	ldr	r3, [r7, #28]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3720      	adds	r7, #32
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	08016ab8 	.word	0x08016ab8
 800cda8:	08016bac 	.word	0x08016bac
 800cdac:	08016af4 	.word	0x08016af4
 800cdb0:	2000ba18 	.word	0x2000ba18
 800cdb4:	0800cc6d 	.word	0x0800cc6d
 800cdb8:	2000ba1c 	.word	0x2000ba1c

0800cdbc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cdcc:	4413      	add	r3, r2
 800cdce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cdd8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cddc:	bf28      	it	cs
 800cdde:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cde2:	b292      	uxth	r2, r2
 800cde4:	4413      	add	r3, r2
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	db08      	blt.n	800ce00 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	e020      	b.n	800ce42 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	dd03      	ble.n	800ce16 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce14:	e014      	b.n	800ce40 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce28:	d306      	bcc.n	800ce38 <tcp_update_rcv_ann_wnd+0x7c>
 800ce2a:	4b08      	ldr	r3, [pc, #32]	; (800ce4c <tcp_update_rcv_ann_wnd+0x90>)
 800ce2c:	f44f 7242 	mov.w	r2, #776	; 0x308
 800ce30:	4907      	ldr	r1, [pc, #28]	; (800ce50 <tcp_update_rcv_ann_wnd+0x94>)
 800ce32:	4808      	ldr	r0, [pc, #32]	; (800ce54 <tcp_update_rcv_ann_wnd+0x98>)
 800ce34:	f007 fe10 	bl	8014a58 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ce40:	2300      	movs	r3, #0
  }
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	08016ab8 	.word	0x08016ab8
 800ce50:	08016bd0 	.word	0x08016bd0
 800ce54:	08016af4 	.word	0x08016af4

0800ce58 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	460b      	mov	r3, r1
 800ce62:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	7d1b      	ldrb	r3, [r3, #20]
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d106      	bne.n	800ce7a <tcp_recved+0x22>
 800ce6c:	4b23      	ldr	r3, [pc, #140]	; (800cefc <tcp_recved+0xa4>)
 800ce6e:	f240 321f 	movw	r2, #799	; 0x31f
 800ce72:	4923      	ldr	r1, [pc, #140]	; (800cf00 <tcp_recved+0xa8>)
 800ce74:	4823      	ldr	r0, [pc, #140]	; (800cf04 <tcp_recved+0xac>)
 800ce76:	f007 fdef 	bl	8014a58 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce7e:	887b      	ldrh	r3, [r7, #2]
 800ce80:	4413      	add	r3, r2
 800ce82:	b29a      	uxth	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce8c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce90:	d904      	bls.n	800ce9c <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce98:	851a      	strh	r2, [r3, #40]	; 0x28
 800ce9a:	e017      	b.n	800cecc <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d113      	bne.n	800cecc <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	7d1b      	ldrb	r3, [r3, #20]
 800cea8:	2b07      	cmp	r3, #7
 800ceaa:	d003      	beq.n	800ceb4 <tcp_recved+0x5c>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	7d1b      	ldrb	r3, [r3, #20]
 800ceb0:	2b09      	cmp	r3, #9
 800ceb2:	d104      	bne.n	800cebe <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ceba:	851a      	strh	r2, [r3, #40]	; 0x28
 800cebc:	e006      	b.n	800cecc <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800cebe:	4b0f      	ldr	r3, [pc, #60]	; (800cefc <tcp_recved+0xa4>)
 800cec0:	f240 322d 	movw	r2, #813	; 0x32d
 800cec4:	4910      	ldr	r1, [pc, #64]	; (800cf08 <tcp_recved+0xb0>)
 800cec6:	480f      	ldr	r0, [pc, #60]	; (800cf04 <tcp_recved+0xac>)
 800cec8:	f007 fdc6 	bl	8014a58 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7ff ff75 	bl	800cdbc <tcp_update_rcv_ann_wnd>
 800ced2:	4603      	mov	r3, r0
 800ced4:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cedc:	db09      	blt.n	800cef2 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	7e9b      	ldrb	r3, [r3, #26]
 800cee2:	f043 0302 	orr.w	r3, r3, #2
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f004 f881 	bl	8010ff4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cef2:	bf00      	nop
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	08016ab8 	.word	0x08016ab8
 800cf00:	08016bec 	.word	0x08016bec
 800cf04:	08016af4 	.word	0x08016af4
 800cf08:	08016c14 	.word	0x08016c14

0800cf0c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cf12:	2300      	movs	r3, #0
 800cf14:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800cf16:	4b1d      	ldr	r3, [pc, #116]	; (800cf8c <tcp_new_port+0x80>)
 800cf18:	881b      	ldrh	r3, [r3, #0]
 800cf1a:	1c5a      	adds	r2, r3, #1
 800cf1c:	b291      	uxth	r1, r2
 800cf1e:	4a1b      	ldr	r2, [pc, #108]	; (800cf8c <tcp_new_port+0x80>)
 800cf20:	8011      	strh	r1, [r2, #0]
 800cf22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d103      	bne.n	800cf32 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cf2a:	4b18      	ldr	r3, [pc, #96]	; (800cf8c <tcp_new_port+0x80>)
 800cf2c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cf30:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cf32:	2300      	movs	r3, #0
 800cf34:	71fb      	strb	r3, [r7, #7]
 800cf36:	e01e      	b.n	800cf76 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cf38:	79fb      	ldrb	r3, [r7, #7]
 800cf3a:	4a15      	ldr	r2, [pc, #84]	; (800cf90 <tcp_new_port+0x84>)
 800cf3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	603b      	str	r3, [r7, #0]
 800cf44:	e011      	b.n	800cf6a <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	8ada      	ldrh	r2, [r3, #22]
 800cf4a:	4b10      	ldr	r3, [pc, #64]	; (800cf8c <tcp_new_port+0x80>)
 800cf4c:	881b      	ldrh	r3, [r3, #0]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d108      	bne.n	800cf64 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cf52:	88bb      	ldrh	r3, [r7, #4]
 800cf54:	3301      	adds	r3, #1
 800cf56:	80bb      	strh	r3, [r7, #4]
 800cf58:	88bb      	ldrh	r3, [r7, #4]
 800cf5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf5e:	d3da      	bcc.n	800cf16 <tcp_new_port+0xa>
          return 0;
 800cf60:	2300      	movs	r3, #0
 800cf62:	e00d      	b.n	800cf80 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	603b      	str	r3, [r7, #0]
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d1ea      	bne.n	800cf46 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cf70:	79fb      	ldrb	r3, [r7, #7]
 800cf72:	3301      	adds	r3, #1
 800cf74:	71fb      	strb	r3, [r7, #7]
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	2b03      	cmp	r3, #3
 800cf7a:	d9dd      	bls.n	800cf38 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cf7c:	4b03      	ldr	r3, [pc, #12]	; (800cf8c <tcp_new_port+0x80>)
 800cf7e:	881b      	ldrh	r3, [r3, #0]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bc80      	pop	{r7}
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	20000018 	.word	0x20000018
 800cf90:	08017f60 	.word	0x08017f60

0800cf94 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cf94:	b5b0      	push	{r4, r5, r7, lr}
 800cf96:	b08c      	sub	sp, #48	; 0x30
 800cf98:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800cf9e:	4b97      	ldr	r3, [pc, #604]	; (800d1fc <tcp_slowtmr+0x268>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	4a95      	ldr	r2, [pc, #596]	; (800d1fc <tcp_slowtmr+0x268>)
 800cfa6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cfa8:	4b95      	ldr	r3, [pc, #596]	; (800d200 <tcp_slowtmr+0x26c>)
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	3301      	adds	r3, #1
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	4b93      	ldr	r3, [pc, #588]	; (800d200 <tcp_slowtmr+0x26c>)
 800cfb2:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800cfb8:	4b92      	ldr	r3, [pc, #584]	; (800d204 <tcp_slowtmr+0x270>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cfbe:	e227      	b.n	800d410 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	7d1b      	ldrb	r3, [r3, #20]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d106      	bne.n	800cfd6 <tcp_slowtmr+0x42>
 800cfc8:	4b8f      	ldr	r3, [pc, #572]	; (800d208 <tcp_slowtmr+0x274>)
 800cfca:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800cfce:	498f      	ldr	r1, [pc, #572]	; (800d20c <tcp_slowtmr+0x278>)
 800cfd0:	488f      	ldr	r0, [pc, #572]	; (800d210 <tcp_slowtmr+0x27c>)
 800cfd2:	f007 fd41 	bl	8014a58 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd8:	7d1b      	ldrb	r3, [r3, #20]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d106      	bne.n	800cfec <tcp_slowtmr+0x58>
 800cfde:	4b8a      	ldr	r3, [pc, #552]	; (800d208 <tcp_slowtmr+0x274>)
 800cfe0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cfe4:	498b      	ldr	r1, [pc, #556]	; (800d214 <tcp_slowtmr+0x280>)
 800cfe6:	488a      	ldr	r0, [pc, #552]	; (800d210 <tcp_slowtmr+0x27c>)
 800cfe8:	f007 fd36 	bl	8014a58 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	7d1b      	ldrb	r3, [r3, #20]
 800cff0:	2b0a      	cmp	r3, #10
 800cff2:	d106      	bne.n	800d002 <tcp_slowtmr+0x6e>
 800cff4:	4b84      	ldr	r3, [pc, #528]	; (800d208 <tcp_slowtmr+0x274>)
 800cff6:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800cffa:	4987      	ldr	r1, [pc, #540]	; (800d218 <tcp_slowtmr+0x284>)
 800cffc:	4884      	ldr	r0, [pc, #528]	; (800d210 <tcp_slowtmr+0x27c>)
 800cffe:	f007 fd2b 	bl	8014a58 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d004:	7f5a      	ldrb	r2, [r3, #29]
 800d006:	4b7e      	ldr	r3, [pc, #504]	; (800d200 <tcp_slowtmr+0x26c>)
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d103      	bne.n	800d016 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800d00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800d014:	e1fc      	b.n	800d410 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d016:	4b7a      	ldr	r3, [pc, #488]	; (800d200 <tcp_slowtmr+0x26c>)
 800d018:	781a      	ldrb	r2, [r3, #0]
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800d01e:	2300      	movs	r3, #0
 800d020:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800d022:	2300      	movs	r3, #0
 800d024:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d028:	7d1b      	ldrb	r3, [r3, #20]
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	d108      	bne.n	800d040 <tcp_slowtmr+0xac>
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d030:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d034:	2b05      	cmp	r3, #5
 800d036:	d903      	bls.n	800d040 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800d038:	7ffb      	ldrb	r3, [r7, #31]
 800d03a:	3301      	adds	r3, #1
 800d03c:	77fb      	strb	r3, [r7, #31]
 800d03e:	e0a2      	b.n	800d186 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800d040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d042:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d046:	2b0b      	cmp	r3, #11
 800d048:	d903      	bls.n	800d052 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d04a:	7ffb      	ldrb	r3, [r7, #31]
 800d04c:	3301      	adds	r3, #1
 800d04e:	77fb      	strb	r3, [r7, #31]
 800d050:	e099      	b.n	800d186 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d054:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d032      	beq.n	800d0c2 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800d05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d062:	3b01      	subs	r3, #1
 800d064:	4a6d      	ldr	r2, [pc, #436]	; (800d21c <tcp_slowtmr+0x288>)
 800d066:	5cd3      	ldrb	r3, [r2, r3]
 800d068:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800d06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d070:	7cfa      	ldrb	r2, [r7, #19]
 800d072:	429a      	cmp	r2, r3
 800d074:	d907      	bls.n	800d086 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d07c:	3301      	adds	r3, #1
 800d07e:	b2da      	uxtb	r2, r3
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800d086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d088:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d08c:	7cfa      	ldrb	r2, [r7, #19]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d879      	bhi.n	800d186 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800d092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d094:	f004 fbb9 	bl	801180a <tcp_zero_window_probe>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d173      	bne.n	800d186 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800d09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d0ac:	2b06      	cmp	r3, #6
 800d0ae:	d86a      	bhi.n	800d186 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	b2da      	uxtb	r2, r3
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d0c0:	e061      	b.n	800d186 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	db08      	blt.n	800d0de <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	b21a      	sxth	r2, r3
 800d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0dc:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d04f      	beq.n	800d186 <tcp_slowtmr+0x1f2>
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	db47      	blt.n	800d186 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800d0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f8:	7d1b      	ldrb	r3, [r3, #20]
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d018      	beq.n	800d130 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d104:	2b0c      	cmp	r3, #12
 800d106:	bf28      	it	cs
 800d108:	230c      	movcs	r3, #12
 800d10a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d112:	10db      	asrs	r3, r3, #3
 800d114:	b21b      	sxth	r3, r3
 800d116:	461a      	mov	r2, r3
 800d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d11e:	4413      	add	r3, r2
 800d120:	7dfa      	ldrb	r2, [r7, #23]
 800d122:	493f      	ldr	r1, [pc, #252]	; (800d220 <tcp_slowtmr+0x28c>)
 800d124:	5c8a      	ldrb	r2, [r1, r2]
 800d126:	4093      	lsls	r3, r2
 800d128:	b21a      	sxth	r2, r3
 800d12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800d130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d132:	2200      	movs	r2, #0
 800d134:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d138:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d142:	4293      	cmp	r3, r2
 800d144:	bf28      	it	cs
 800d146:	4613      	movcs	r3, r2
 800d148:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800d14a:	8abb      	ldrh	r3, [r7, #20]
 800d14c:	085b      	lsrs	r3, r3, #1
 800d14e:	b29a      	uxth	r2, r3
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d152:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	b29b      	uxth	r3, r3
 800d164:	429a      	cmp	r2, r3
 800d166:	d206      	bcs.n	800d176 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	b29a      	uxth	r2, r3
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800d176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d178:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800d180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d182:	f004 fa31 	bl	80115e8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d188:	7d1b      	ldrb	r3, [r3, #20]
 800d18a:	2b06      	cmp	r3, #6
 800d18c:	d10f      	bne.n	800d1ae <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d190:	7e9b      	ldrb	r3, [r3, #26]
 800d192:	f003 0310 	and.w	r3, r3, #16
 800d196:	2b00      	cmp	r3, #0
 800d198:	d009      	beq.n	800d1ae <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d19a:	4b18      	ldr	r3, [pc, #96]	; (800d1fc <tcp_slowtmr+0x268>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a0:	6a1b      	ldr	r3, [r3, #32]
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	2b28      	cmp	r3, #40	; 0x28
 800d1a6:	d902      	bls.n	800d1ae <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d1a8:	7ffb      	ldrb	r3, [r7, #31]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	7a1b      	ldrb	r3, [r3, #8]
 800d1b2:	f003 0308 	and.w	r3, r3, #8
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d05d      	beq.n	800d276 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800d1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1bc:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d1be:	2b04      	cmp	r3, #4
 800d1c0:	d003      	beq.n	800d1ca <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c4:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800d1c6:	2b07      	cmp	r3, #7
 800d1c8:	d155      	bne.n	800d276 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1ca:	4b0c      	ldr	r3, [pc, #48]	; (800d1fc <tcp_slowtmr+0x268>)
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d0:	6a1b      	ldr	r3, [r3, #32]
 800d1d2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1da:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d1de:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d1e2:	4910      	ldr	r1, [pc, #64]	; (800d224 <tcp_slowtmr+0x290>)
 800d1e4:	fba1 1303 	umull	r1, r3, r1, r3
 800d1e8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d91c      	bls.n	800d228 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d1ee:	7ffb      	ldrb	r3, [r7, #31]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800d1f4:	7fbb      	ldrb	r3, [r7, #30]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	77bb      	strb	r3, [r7, #30]
 800d1fa:	e03c      	b.n	800d276 <tcp_slowtmr+0x2e2>
 800d1fc:	2000ba14 	.word	0x2000ba14
 800d200:	2000ba2a 	.word	0x2000ba2a
 800d204:	2000ba20 	.word	0x2000ba20
 800d208:	08016ab8 	.word	0x08016ab8
 800d20c:	08016c68 	.word	0x08016c68
 800d210:	08016af4 	.word	0x08016af4
 800d214:	08016c94 	.word	0x08016c94
 800d218:	08016cc0 	.word	0x08016cc0
 800d21c:	08017f58 	.word	0x08017f58
 800d220:	08017f48 	.word	0x08017f48
 800d224:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d228:	4b97      	ldr	r3, [pc, #604]	; (800d488 <tcp_slowtmr+0x4f4>)
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22e:	6a1b      	ldr	r3, [r3, #32]
 800d230:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800d238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d23e:	4618      	mov	r0, r3
 800d240:	4b92      	ldr	r3, [pc, #584]	; (800d48c <tcp_slowtmr+0x4f8>)
 800d242:	fb00 f303 	mul.w	r3, r0, r3
 800d246:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800d248:	4991      	ldr	r1, [pc, #580]	; (800d490 <tcp_slowtmr+0x4fc>)
 800d24a:	fba1 1303 	umull	r1, r3, r1, r3
 800d24e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d250:	429a      	cmp	r2, r3
 800d252:	d910      	bls.n	800d276 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800d254:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d256:	f004 fa9b 	bl	8011790 <tcp_keepalive>
 800d25a:	4603      	mov	r3, r0
 800d25c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800d25e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d107      	bne.n	800d276 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800d266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d268:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d26c:	3301      	adds	r3, #1
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d016      	beq.n	800d2ac <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800d27e:	4b82      	ldr	r3, [pc, #520]	; (800d488 <tcp_slowtmr+0x4f4>)
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d284:	6a1b      	ldr	r3, [r3, #32]
 800d286:	1ad2      	subs	r2, r2, r3
 800d288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d28e:	4619      	mov	r1, r3
 800d290:	460b      	mov	r3, r1
 800d292:	005b      	lsls	r3, r3, #1
 800d294:	440b      	add	r3, r1
 800d296:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d298:	429a      	cmp	r2, r3
 800d29a:	d307      	bcc.n	800d2ac <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800d29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f000 fa06 	bl	800d6b2 <tcp_segs_free>
      pcb->ooseq = NULL;
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ae:	7d1b      	ldrb	r3, [r3, #20]
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	d109      	bne.n	800d2c8 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2b4:	4b74      	ldr	r3, [pc, #464]	; (800d488 <tcp_slowtmr+0x4f4>)
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ba:	6a1b      	ldr	r3, [r3, #32]
 800d2bc:	1ad3      	subs	r3, r2, r3
 800d2be:	2b28      	cmp	r3, #40	; 0x28
 800d2c0:	d902      	bls.n	800d2c8 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d2c2:	7ffb      	ldrb	r3, [r7, #31]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ca:	7d1b      	ldrb	r3, [r3, #20]
 800d2cc:	2b09      	cmp	r3, #9
 800d2ce:	d109      	bne.n	800d2e4 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d2d0:	4b6d      	ldr	r3, [pc, #436]	; (800d488 <tcp_slowtmr+0x4f4>)
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	6a1b      	ldr	r3, [r3, #32]
 800d2d8:	1ad3      	subs	r3, r2, r3
 800d2da:	2bf0      	cmp	r3, #240	; 0xf0
 800d2dc:	d902      	bls.n	800d2e4 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800d2de:	7ffb      	ldrb	r3, [r7, #31]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d2e4:	7ffb      	ldrb	r3, [r7, #31]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d05d      	beq.n	800d3a6 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2f0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d2f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2f4:	f000 fc42 	bl	800db7c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d2f8:	6a3b      	ldr	r3, [r7, #32]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d010      	beq.n	800d320 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d2fe:	4b65      	ldr	r3, [pc, #404]	; (800d494 <tcp_slowtmr+0x500>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d304:	429a      	cmp	r2, r3
 800d306:	d106      	bne.n	800d316 <tcp_slowtmr+0x382>
 800d308:	4b63      	ldr	r3, [pc, #396]	; (800d498 <tcp_slowtmr+0x504>)
 800d30a:	f240 4289 	movw	r2, #1161	; 0x489
 800d30e:	4963      	ldr	r1, [pc, #396]	; (800d49c <tcp_slowtmr+0x508>)
 800d310:	4863      	ldr	r0, [pc, #396]	; (800d4a0 <tcp_slowtmr+0x50c>)
 800d312:	f007 fba1 	bl	8014a58 <iprintf>
        prev->next = pcb->next;
 800d316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d318:	68da      	ldr	r2, [r3, #12]
 800d31a:	6a3b      	ldr	r3, [r7, #32]
 800d31c:	60da      	str	r2, [r3, #12]
 800d31e:	e00f      	b.n	800d340 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d320:	4b5c      	ldr	r3, [pc, #368]	; (800d494 <tcp_slowtmr+0x500>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d326:	429a      	cmp	r2, r3
 800d328:	d006      	beq.n	800d338 <tcp_slowtmr+0x3a4>
 800d32a:	4b5b      	ldr	r3, [pc, #364]	; (800d498 <tcp_slowtmr+0x504>)
 800d32c:	f240 428d 	movw	r2, #1165	; 0x48d
 800d330:	495c      	ldr	r1, [pc, #368]	; (800d4a4 <tcp_slowtmr+0x510>)
 800d332:	485b      	ldr	r0, [pc, #364]	; (800d4a0 <tcp_slowtmr+0x50c>)
 800d334:	f007 fb90 	bl	8014a58 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	4a55      	ldr	r2, [pc, #340]	; (800d494 <tcp_slowtmr+0x500>)
 800d33e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d340:	7fbb      	ldrb	r3, [r7, #30]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d010      	beq.n	800d368 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d348:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d34e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d352:	1d1d      	adds	r5, r3, #4
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d356:	8adb      	ldrh	r3, [r3, #22]
 800d358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d35a:	8b12      	ldrh	r2, [r2, #24]
 800d35c:	9201      	str	r2, [sp, #4]
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	462b      	mov	r3, r5
 800d362:	4622      	mov	r2, r4
 800d364:	f004 f8ca 	bl	80114fc <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36a:	691b      	ldr	r3, [r3, #16]
 800d36c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	7d1b      	ldrb	r3, [r3, #20]
 800d372:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	2001      	movs	r0, #1
 800d382:	f7fe f8f3 	bl	800b56c <memp_free>

      tcp_active_pcbs_changed = 0;
 800d386:	4b48      	ldr	r3, [pc, #288]	; (800d4a8 <tcp_slowtmr+0x514>)
 800d388:	2200      	movs	r2, #0
 800d38a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d004      	beq.n	800d39c <tcp_slowtmr+0x408>
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f06f 010c 	mvn.w	r1, #12
 800d398:	68b8      	ldr	r0, [r7, #8]
 800d39a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d39c:	4b42      	ldr	r3, [pc, #264]	; (800d4a8 <tcp_slowtmr+0x514>)
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d035      	beq.n	800d410 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800d3a4:	e606      	b.n	800cfb4 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d3b0:	6a3b      	ldr	r3, [r7, #32]
 800d3b2:	7edb      	ldrb	r3, [r3, #27]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	6a3b      	ldr	r3, [r7, #32]
 800d3ba:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800d3bc:	6a3b      	ldr	r3, [r7, #32]
 800d3be:	7eda      	ldrb	r2, [r3, #27]
 800d3c0:	6a3b      	ldr	r3, [r7, #32]
 800d3c2:	7f1b      	ldrb	r3, [r3, #28]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d323      	bcc.n	800d410 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800d3c8:	6a3b      	ldr	r3, [r7, #32]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d3ce:	4b36      	ldr	r3, [pc, #216]	; (800d4a8 <tcp_slowtmr+0x514>)
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00a      	beq.n	800d3f4 <tcp_slowtmr+0x460>
 800d3de:	6a3b      	ldr	r3, [r7, #32]
 800d3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3e4:	6a3a      	ldr	r2, [r7, #32]
 800d3e6:	6912      	ldr	r2, [r2, #16]
 800d3e8:	6a39      	ldr	r1, [r7, #32]
 800d3ea:	4610      	mov	r0, r2
 800d3ec:	4798      	blx	r3
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	777b      	strb	r3, [r7, #29]
 800d3f2:	e001      	b.n	800d3f8 <tcp_slowtmr+0x464>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800d3f8:	4b2b      	ldr	r3, [pc, #172]	; (800d4a8 <tcp_slowtmr+0x514>)
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d000      	beq.n	800d402 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800d400:	e5d8      	b.n	800cfb4 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d402:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d102      	bne.n	800d410 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800d40a:	6a38      	ldr	r0, [r7, #32]
 800d40c:	f003 fdf2 	bl	8010ff4 <tcp_output>
  while (pcb != NULL) {
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	2b00      	cmp	r3, #0
 800d414:	f47f add4 	bne.w	800cfc0 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d418:	2300      	movs	r3, #0
 800d41a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800d41c:	4b23      	ldr	r3, [pc, #140]	; (800d4ac <tcp_slowtmr+0x518>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800d422:	e068      	b.n	800d4f6 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d426:	7d1b      	ldrb	r3, [r3, #20]
 800d428:	2b0a      	cmp	r3, #10
 800d42a:	d006      	beq.n	800d43a <tcp_slowtmr+0x4a6>
 800d42c:	4b1a      	ldr	r3, [pc, #104]	; (800d498 <tcp_slowtmr+0x504>)
 800d42e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d432:	491f      	ldr	r1, [pc, #124]	; (800d4b0 <tcp_slowtmr+0x51c>)
 800d434:	481a      	ldr	r0, [pc, #104]	; (800d4a0 <tcp_slowtmr+0x50c>)
 800d436:	f007 fb0f 	bl	8014a58 <iprintf>
    pcb_remove = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d43e:	4b12      	ldr	r3, [pc, #72]	; (800d488 <tcp_slowtmr+0x4f4>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d444:	6a1b      	ldr	r3, [r3, #32]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	2bf0      	cmp	r3, #240	; 0xf0
 800d44a:	d902      	bls.n	800d452 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800d44c:	7ffb      	ldrb	r3, [r7, #31]
 800d44e:	3301      	adds	r3, #1
 800d450:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d452:	7ffb      	ldrb	r3, [r7, #31]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d049      	beq.n	800d4ec <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d45a:	f000 fb8f 	bl	800db7c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d45e:	6a3b      	ldr	r3, [r7, #32]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d029      	beq.n	800d4b8 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d464:	4b11      	ldr	r3, [pc, #68]	; (800d4ac <tcp_slowtmr+0x518>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d106      	bne.n	800d47c <tcp_slowtmr+0x4e8>
 800d46e:	4b0a      	ldr	r3, [pc, #40]	; (800d498 <tcp_slowtmr+0x504>)
 800d470:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800d474:	490f      	ldr	r1, [pc, #60]	; (800d4b4 <tcp_slowtmr+0x520>)
 800d476:	480a      	ldr	r0, [pc, #40]	; (800d4a0 <tcp_slowtmr+0x50c>)
 800d478:	f007 faee 	bl	8014a58 <iprintf>
        prev->next = pcb->next;
 800d47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47e:	68da      	ldr	r2, [r3, #12]
 800d480:	6a3b      	ldr	r3, [r7, #32]
 800d482:	60da      	str	r2, [r3, #12]
 800d484:	e028      	b.n	800d4d8 <tcp_slowtmr+0x544>
 800d486:	bf00      	nop
 800d488:	2000ba14 	.word	0x2000ba14
 800d48c:	000124f8 	.word	0x000124f8
 800d490:	10624dd3 	.word	0x10624dd3
 800d494:	2000ba20 	.word	0x2000ba20
 800d498:	08016ab8 	.word	0x08016ab8
 800d49c:	08016cf0 	.word	0x08016cf0
 800d4a0:	08016af4 	.word	0x08016af4
 800d4a4:	08016d1c 	.word	0x08016d1c
 800d4a8:	2000ba28 	.word	0x2000ba28
 800d4ac:	2000ba24 	.word	0x2000ba24
 800d4b0:	08016d48 	.word	0x08016d48
 800d4b4:	08016d78 	.word	0x08016d78
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d4b8:	4b13      	ldr	r3, [pc, #76]	; (800d508 <tcp_slowtmr+0x574>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d006      	beq.n	800d4d0 <tcp_slowtmr+0x53c>
 800d4c2:	4b12      	ldr	r3, [pc, #72]	; (800d50c <tcp_slowtmr+0x578>)
 800d4c4:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800d4c8:	4911      	ldr	r1, [pc, #68]	; (800d510 <tcp_slowtmr+0x57c>)
 800d4ca:	4812      	ldr	r0, [pc, #72]	; (800d514 <tcp_slowtmr+0x580>)
 800d4cc:	f007 fac4 	bl	8014a58 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	4a0c      	ldr	r2, [pc, #48]	; (800d508 <tcp_slowtmr+0x574>)
 800d4d6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4da:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d4e2:	69b9      	ldr	r1, [r7, #24]
 800d4e4:	2001      	movs	r0, #1
 800d4e6:	f7fe f841 	bl	800b56c <memp_free>
 800d4ea:	e004      	b.n	800d4f6 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ee:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d193      	bne.n	800d424 <tcp_slowtmr+0x490>
    }
  }
}
 800d4fc:	bf00      	nop
 800d4fe:	bf00      	nop
 800d500:	3728      	adds	r7, #40	; 0x28
 800d502:	46bd      	mov	sp, r7
 800d504:	bdb0      	pop	{r4, r5, r7, pc}
 800d506:	bf00      	nop
 800d508:	2000ba24 	.word	0x2000ba24
 800d50c:	08016ab8 	.word	0x08016ab8
 800d510:	08016da0 	.word	0x08016da0
 800d514:	08016af4 	.word	0x08016af4

0800d518 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d51e:	4b2d      	ldr	r3, [pc, #180]	; (800d5d4 <tcp_fasttmr+0xbc>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	3301      	adds	r3, #1
 800d524:	b2da      	uxtb	r2, r3
 800d526:	4b2b      	ldr	r3, [pc, #172]	; (800d5d4 <tcp_fasttmr+0xbc>)
 800d528:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d52a:	4b2b      	ldr	r3, [pc, #172]	; (800d5d8 <tcp_fasttmr+0xc0>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d530:	e048      	b.n	800d5c4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	7f5a      	ldrb	r2, [r3, #29]
 800d536:	4b27      	ldr	r3, [pc, #156]	; (800d5d4 <tcp_fasttmr+0xbc>)
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d03f      	beq.n	800d5be <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d53e:	4b25      	ldr	r3, [pc, #148]	; (800d5d4 <tcp_fasttmr+0xbc>)
 800d540:	781a      	ldrb	r2, [r3, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	7e9b      	ldrb	r3, [r3, #26]
 800d54a:	f003 0301 	and.w	r3, r3, #1
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d010      	beq.n	800d574 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	7e9b      	ldrb	r3, [r3, #26]
 800d556:	f043 0302 	orr.w	r3, r3, #2
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f003 fd47 	bl	8010ff4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	7e9b      	ldrb	r3, [r3, #26]
 800d56a:	f023 0303 	bic.w	r3, r3, #3
 800d56e:	b2da      	uxtb	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	7e9b      	ldrb	r3, [r3, #26]
 800d578:	f003 0308 	and.w	r3, r3, #8
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d009      	beq.n	800d594 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	7e9b      	ldrb	r3, [r3, #26]
 800d584:	f023 0308 	bic.w	r3, r3, #8
 800d588:	b2da      	uxtb	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff f952 	bl	800c838 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00a      	beq.n	800d5b8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d5a2:	4b0e      	ldr	r3, [pc, #56]	; (800d5dc <tcp_fasttmr+0xc4>)
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 f819 	bl	800d5e0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d5ae:	4b0b      	ldr	r3, [pc, #44]	; (800d5dc <tcp_fasttmr+0xc4>)
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d000      	beq.n	800d5b8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d5b6:	e7b8      	b.n	800d52a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	607b      	str	r3, [r7, #4]
 800d5bc:	e002      	b.n	800d5c4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1b3      	bne.n	800d532 <tcp_fasttmr+0x1a>
    }
  }
}
 800d5ca:	bf00      	nop
 800d5cc:	bf00      	nop
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	2000ba2a 	.word	0x2000ba2a
 800d5d8:	2000ba20 	.word	0x2000ba20
 800d5dc:	2000ba28 	.word	0x2000ba28

0800d5e0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d5e0:	b590      	push	{r4, r7, lr}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5ec:	7b5b      	ldrb	r3, [r3, #13]
 800d5ee:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5f4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d602:	2b00      	cmp	r3, #0
 800d604:	d00b      	beq.n	800d61e <tcp_process_refused_data+0x3e>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6918      	ldr	r0, [r3, #16]
 800d610:	2300      	movs	r3, #0
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	47a0      	blx	r4
 800d618:	4603      	mov	r3, r0
 800d61a:	73fb      	strb	r3, [r7, #15]
 800d61c:	e007      	b.n	800d62e <tcp_process_refused_data+0x4e>
 800d61e:	2300      	movs	r3, #0
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	6879      	ldr	r1, [r7, #4]
 800d624:	2000      	movs	r0, #0
 800d626:	f000 f88d 	bl	800d744 <tcp_recv_null>
 800d62a:	4603      	mov	r3, r0
 800d62c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d12a      	bne.n	800d68c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800d636:	7bbb      	ldrb	r3, [r7, #14]
 800d638:	f003 0320 	and.w	r3, r3, #32
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d033      	beq.n	800d6a8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d644:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d648:	d005      	beq.n	800d656 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d64e:	3301      	adds	r3, #1
 800d650:	b29a      	uxth	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d00b      	beq.n	800d678 <tcp_process_refused_data+0x98>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6918      	ldr	r0, [r3, #16]
 800d66a:	2300      	movs	r3, #0
 800d66c:	2200      	movs	r2, #0
 800d66e:	6879      	ldr	r1, [r7, #4]
 800d670:	47a0      	blx	r4
 800d672:	4603      	mov	r3, r0
 800d674:	73fb      	strb	r3, [r7, #15]
 800d676:	e001      	b.n	800d67c <tcp_process_refused_data+0x9c>
 800d678:	2300      	movs	r3, #0
 800d67a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d67c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d680:	f113 0f0d 	cmn.w	r3, #13
 800d684:	d110      	bne.n	800d6a8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800d686:	f06f 030c 	mvn.w	r3, #12
 800d68a:	e00e      	b.n	800d6aa <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800d68c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d690:	f113 0f0d 	cmn.w	r3, #13
 800d694:	d102      	bne.n	800d69c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d696:	f06f 030c 	mvn.w	r3, #12
 800d69a:	e006      	b.n	800d6aa <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	68ba      	ldr	r2, [r7, #8]
 800d6a0:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800d6a2:	f06f 0304 	mvn.w	r3, #4
 800d6a6:	e000      	b.n	800d6aa <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3714      	adds	r7, #20
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd90      	pop	{r4, r7, pc}

0800d6b2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b084      	sub	sp, #16
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d6ba:	e007      	b.n	800d6cc <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 f80a 	bl	800d6dc <tcp_seg_free>
    seg = next;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1f4      	bne.n	800d6bc <tcp_segs_free+0xa>
  }
}
 800d6d2:	bf00      	nop
 800d6d4:	bf00      	nop
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00c      	beq.n	800d704 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d004      	beq.n	800d6fc <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fe fcd0 	bl	800c09c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d6fc:	6879      	ldr	r1, [r7, #4]
 800d6fe:	2003      	movs	r0, #3
 800d700:	f7fd ff34 	bl	800b56c <memp_free>
  }
}
 800d704:	bf00      	nop
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d714:	2003      	movs	r0, #3
 800d716:	f7fd fed7 	bl	800b4c8 <memp_malloc>
 800d71a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d101      	bne.n	800d726 <tcp_seg_copy+0x1a>
    return NULL;
 800d722:	2300      	movs	r3, #0
 800d724:	e00a      	b.n	800d73c <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d726:	2210      	movs	r2, #16
 800d728:	6879      	ldr	r1, [r7, #4]
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f007 fac5 	bl	8014cba <memcpy>
  pbuf_ref(cseg->p);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	4618      	mov	r0, r3
 800d736:	f7fe fd61 	bl	800c1fc <pbuf_ref>
  return cseg;
 800d73a:	68fb      	ldr	r3, [r7, #12]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3710      	adds	r7, #16
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
 800d750:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d009      	beq.n	800d76c <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	891b      	ldrh	r3, [r3, #8]
 800d75c:	4619      	mov	r1, r3
 800d75e:	68b8      	ldr	r0, [r7, #8]
 800d760:	f7ff fb7a 	bl	800ce58 <tcp_recved>
    pbuf_free(p);
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7fe fc99 	bl	800c09c <pbuf_free>
 800d76a:	e008      	b.n	800d77e <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800d76c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d104      	bne.n	800d77e <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800d774:	68b8      	ldr	r0, [r7, #8]
 800d776:	f7ff f8c9 	bl	800c90c <tcp_close>
 800d77a:	4603      	mov	r3, r0
 800d77c:	e000      	b.n	800d780 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b086      	sub	sp, #24
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	4603      	mov	r3, r0
 800d790:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d796:	2b00      	cmp	r3, #0
 800d798:	db01      	blt.n	800d79e <tcp_kill_prio+0x16>
 800d79a:	79fb      	ldrb	r3, [r7, #7]
 800d79c:	e000      	b.n	800d7a0 <tcp_kill_prio+0x18>
 800d79e:	237f      	movs	r3, #127	; 0x7f
 800d7a0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7aa:	4b16      	ldr	r3, [pc, #88]	; (800d804 <tcp_kill_prio+0x7c>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	617b      	str	r3, [r7, #20]
 800d7b0:	e01a      	b.n	800d7e8 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	7d5b      	ldrb	r3, [r3, #21]
 800d7b6:	7afa      	ldrb	r2, [r7, #11]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d312      	bcc.n	800d7e2 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d7bc:	4b12      	ldr	r3, [pc, #72]	; (800d808 <tcp_kill_prio+0x80>)
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	6a1b      	ldr	r3, [r3, #32]
 800d7c4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d80a      	bhi.n	800d7e2 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800d7cc:	4b0e      	ldr	r3, [pc, #56]	; (800d808 <tcp_kill_prio+0x80>)
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	6a1b      	ldr	r3, [r3, #32]
 800d7d4:	1ad3      	subs	r3, r2, r3
 800d7d6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	7d5b      	ldrb	r3, [r3, #21]
 800d7e0:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	617b      	str	r3, [r7, #20]
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1e1      	bne.n	800d7b2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d002      	beq.n	800d7fa <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d7f4:	6938      	ldr	r0, [r7, #16]
 800d7f6:	f7ff f99b 	bl	800cb30 <tcp_abort>
  }
}
 800d7fa:	bf00      	nop
 800d7fc:	3718      	adds	r7, #24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	2000ba20 	.word	0x2000ba20
 800d808:	2000ba14 	.word	0x2000ba14

0800d80c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b086      	sub	sp, #24
 800d810:	af00      	add	r7, sp, #0
 800d812:	4603      	mov	r3, r0
 800d814:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d816:	79fb      	ldrb	r3, [r7, #7]
 800d818:	2b08      	cmp	r3, #8
 800d81a:	d009      	beq.n	800d830 <tcp_kill_state+0x24>
 800d81c:	79fb      	ldrb	r3, [r7, #7]
 800d81e:	2b09      	cmp	r3, #9
 800d820:	d006      	beq.n	800d830 <tcp_kill_state+0x24>
 800d822:	4b1a      	ldr	r3, [pc, #104]	; (800d88c <tcp_kill_state+0x80>)
 800d824:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d828:	4919      	ldr	r1, [pc, #100]	; (800d890 <tcp_kill_state+0x84>)
 800d82a:	481a      	ldr	r0, [pc, #104]	; (800d894 <tcp_kill_state+0x88>)
 800d82c:	f007 f914 	bl	8014a58 <iprintf>

  inactivity = 0;
 800d830:	2300      	movs	r3, #0
 800d832:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d834:	2300      	movs	r3, #0
 800d836:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d838:	4b17      	ldr	r3, [pc, #92]	; (800d898 <tcp_kill_state+0x8c>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	617b      	str	r3, [r7, #20]
 800d83e:	e017      	b.n	800d870 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	7d1b      	ldrb	r3, [r3, #20]
 800d844:	79fa      	ldrb	r2, [r7, #7]
 800d846:	429a      	cmp	r2, r3
 800d848:	d10f      	bne.n	800d86a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d84a:	4b14      	ldr	r3, [pc, #80]	; (800d89c <tcp_kill_state+0x90>)
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	6a1b      	ldr	r3, [r3, #32]
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	429a      	cmp	r2, r3
 800d858:	d807      	bhi.n	800d86a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d85a:	4b10      	ldr	r3, [pc, #64]	; (800d89c <tcp_kill_state+0x90>)
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	1ad3      	subs	r3, r2, r3
 800d864:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	617b      	str	r3, [r7, #20]
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d1e4      	bne.n	800d840 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d003      	beq.n	800d884 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d87c:	2100      	movs	r1, #0
 800d87e:	6938      	ldr	r0, [r7, #16]
 800d880:	f7ff f8a4 	bl	800c9cc <tcp_abandon>
  }
}
 800d884:	bf00      	nop
 800d886:	3718      	adds	r7, #24
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	08016ab8 	.word	0x08016ab8
 800d890:	08016dc8 	.word	0x08016dc8
 800d894:	08016af4 	.word	0x08016af4
 800d898:	2000ba20 	.word	0x2000ba20
 800d89c:	2000ba14 	.word	0x2000ba14

0800d8a0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8ae:	4b12      	ldr	r3, [pc, #72]	; (800d8f8 <tcp_kill_timewait+0x58>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	e012      	b.n	800d8dc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d8b6:	4b11      	ldr	r3, [pc, #68]	; (800d8fc <tcp_kill_timewait+0x5c>)
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	1ad3      	subs	r3, r2, r3
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d807      	bhi.n	800d8d6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d8c6:	4b0d      	ldr	r3, [pc, #52]	; (800d8fc <tcp_kill_timewait+0x5c>)
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6a1b      	ldr	r3, [r3, #32]
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	60fb      	str	r3, [r7, #12]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1e9      	bne.n	800d8b6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d002      	beq.n	800d8ee <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d8e8:	68b8      	ldr	r0, [r7, #8]
 800d8ea:	f7ff f921 	bl	800cb30 <tcp_abort>
  }
}
 800d8ee:	bf00      	nop
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	2000ba24 	.word	0x2000ba24
 800d8fc:	2000ba14 	.word	0x2000ba14

0800d900 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	4603      	mov	r3, r0
 800d908:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d90a:	2001      	movs	r0, #1
 800d90c:	f7fd fddc 	bl	800b4c8 <memp_malloc>
 800d910:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d124      	bne.n	800d962 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d918:	f7ff ffc2 	bl	800d8a0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d91c:	2001      	movs	r0, #1
 800d91e:	f7fd fdd3 	bl	800b4c8 <memp_malloc>
 800d922:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d11b      	bne.n	800d962 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d92a:	2009      	movs	r0, #9
 800d92c:	f7ff ff6e 	bl	800d80c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d930:	2001      	movs	r0, #1
 800d932:	f7fd fdc9 	bl	800b4c8 <memp_malloc>
 800d936:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d111      	bne.n	800d962 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d93e:	2008      	movs	r0, #8
 800d940:	f7ff ff64 	bl	800d80c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d944:	2001      	movs	r0, #1
 800d946:	f7fd fdbf 	bl	800b4c8 <memp_malloc>
 800d94a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d107      	bne.n	800d962 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d952:	79fb      	ldrb	r3, [r7, #7]
 800d954:	4618      	mov	r0, r3
 800d956:	f7ff ff17 	bl	800d788 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d95a:	2001      	movs	r0, #1
 800d95c:	f7fd fdb4 	bl	800b4c8 <memp_malloc>
 800d960:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d03f      	beq.n	800d9e8 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d968:	2298      	movs	r2, #152	; 0x98
 800d96a:	2100      	movs	r1, #0
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f007 f8d8 	bl	8014b22 <memset>
    pcb->prio = prio;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	79fa      	ldrb	r2, [r7, #7]
 800d976:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d97e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d988:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	22ff      	movs	r2, #255	; 0xff
 800d996:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d99e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2206      	movs	r2, #6
 800d9a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2206      	movs	r2, #6
 800d9ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9b4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d9be:	4b0d      	ldr	r3, [pc, #52]	; (800d9f4 <tcp_alloc+0xf4>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d9c6:	4b0c      	ldr	r3, [pc, #48]	; (800d9f8 <tcp_alloc+0xf8>)
 800d9c8:	781a      	ldrb	r2, [r3, #0]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d9d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	4a08      	ldr	r2, [pc, #32]	; (800d9fc <tcp_alloc+0xfc>)
 800d9dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	4a07      	ldr	r2, [pc, #28]	; (800da00 <tcp_alloc+0x100>)
 800d9e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	2000ba14 	.word	0x2000ba14
 800d9f8:	2000ba2a 	.word	0x2000ba2a
 800d9fc:	0800d745 	.word	0x0800d745
 800da00:	006ddd00 	.word	0x006ddd00

0800da04 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	4603      	mov	r3, r0
 800da0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800da0e:	2040      	movs	r0, #64	; 0x40
 800da10:	f7ff ff76 	bl	800d900 <tcp_alloc>
 800da14:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800da16:	68fb      	ldr	r3, [r7, #12]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	683a      	ldr	r2, [r7, #0]
 800da34:	611a      	str	r2, [r3, #16]
  }
}
 800da36:	bf00      	nop
 800da38:	370c      	adds	r7, #12
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bc80      	pop	{r7}
 800da3e:	4770      	bx	lr

0800da40 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d00e      	beq.n	800da6e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	7d1b      	ldrb	r3, [r3, #20]
 800da54:	2b01      	cmp	r3, #1
 800da56:	d106      	bne.n	800da66 <tcp_recv+0x26>
 800da58:	4b07      	ldr	r3, [pc, #28]	; (800da78 <tcp_recv+0x38>)
 800da5a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800da5e:	4907      	ldr	r1, [pc, #28]	; (800da7c <tcp_recv+0x3c>)
 800da60:	4807      	ldr	r0, [pc, #28]	; (800da80 <tcp_recv+0x40>)
 800da62:	f006 fff9 	bl	8014a58 <iprintf>
    pcb->recv = recv;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	683a      	ldr	r2, [r7, #0]
 800da6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800da6e:	bf00      	nop
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	08016ab8 	.word	0x08016ab8
 800da7c:	08016dd8 	.word	0x08016dd8
 800da80:	08016af4 	.word	0x08016af4

0800da84 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00d      	beq.n	800dab0 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	7d1b      	ldrb	r3, [r3, #20]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d106      	bne.n	800daaa <tcp_sent+0x26>
 800da9c:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <tcp_sent+0x34>)
 800da9e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800daa2:	4906      	ldr	r1, [pc, #24]	; (800dabc <tcp_sent+0x38>)
 800daa4:	4806      	ldr	r0, [pc, #24]	; (800dac0 <tcp_sent+0x3c>)
 800daa6:	f006 ffd7 	bl	8014a58 <iprintf>
    pcb->sent = sent;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800dab0:	bf00      	nop
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	08016ab8 	.word	0x08016ab8
 800dabc:	08016e00 	.word	0x08016e00
 800dac0:	08016af4 	.word	0x08016af4

0800dac4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00e      	beq.n	800daf2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	7d1b      	ldrb	r3, [r3, #20]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d106      	bne.n	800daea <tcp_err+0x26>
 800dadc:	4b07      	ldr	r3, [pc, #28]	; (800dafc <tcp_err+0x38>)
 800dade:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800dae2:	4907      	ldr	r1, [pc, #28]	; (800db00 <tcp_err+0x3c>)
 800dae4:	4807      	ldr	r0, [pc, #28]	; (800db04 <tcp_err+0x40>)
 800dae6:	f006 ffb7 	bl	8014a58 <iprintf>
    pcb->errf = err;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	683a      	ldr	r2, [r7, #0]
 800daee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800daf2:	bf00      	nop
 800daf4:	3708      	adds	r7, #8
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	08016ab8 	.word	0x08016ab8
 800db00:	08016e28 	.word	0x08016e28
 800db04:	08016af4 	.word	0x08016af4

0800db08 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800db08:	b480      	push	{r7}
 800db0a:	b085      	sub	sp, #20
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d008      	beq.n	800db2a <tcp_accept+0x22>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	7d1b      	ldrb	r3, [r3, #20]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d104      	bne.n	800db2a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	683a      	ldr	r2, [r7, #0]
 800db28:	619a      	str	r2, [r3, #24]
  }
}
 800db2a:	bf00      	nop
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	bc80      	pop	{r7}
 800db32:	4770      	bx	lr

0800db34 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	4613      	mov	r3, r2
 800db40:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	7d1b      	ldrb	r3, [r3, #20]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d106      	bne.n	800db58 <tcp_poll+0x24>
 800db4a:	4b09      	ldr	r3, [pc, #36]	; (800db70 <tcp_poll+0x3c>)
 800db4c:	f240 7203 	movw	r2, #1795	; 0x703
 800db50:	4908      	ldr	r1, [pc, #32]	; (800db74 <tcp_poll+0x40>)
 800db52:	4809      	ldr	r0, [pc, #36]	; (800db78 <tcp_poll+0x44>)
 800db54:	f006 ff80 	bl	8014a58 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	68ba      	ldr	r2, [r7, #8]
 800db5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	79fa      	ldrb	r2, [r7, #7]
 800db64:	771a      	strb	r2, [r3, #28]
}
 800db66:	bf00      	nop
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	08016ab8 	.word	0x08016ab8
 800db74:	08016e50 	.word	0x08016e50
 800db78:	08016af4 	.word	0x08016af4

0800db7c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	7d1b      	ldrb	r3, [r3, #20]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d034      	beq.n	800dbf6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800db90:	2b0a      	cmp	r3, #10
 800db92:	d030      	beq.n	800dbf6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d02c      	beq.n	800dbf6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d007      	beq.n	800dbb4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fe fa77 	bl	800c09c <pbuf_free>
      pcb->refused_data = NULL;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7ff fd7a 	bl	800d6b2 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7ff fd6e 	bl	800d6b2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7ff fd69 	bl	800d6b2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	669a      	str	r2, [r3, #104]	; 0x68
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800dbf6:	bf00      	nop
 800dbf8:	3708      	adds	r7, #8
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
	...

0800dc00 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	683a      	ldr	r2, [r7, #0]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d105      	bne.n	800dc20 <tcp_pcb_remove+0x20>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	68da      	ldr	r2, [r3, #12]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	601a      	str	r2, [r3, #0]
 800dc1e:	e013      	b.n	800dc48 <tcp_pcb_remove+0x48>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	60fb      	str	r3, [r7, #12]
 800dc26:	e00c      	b.n	800dc42 <tcp_pcb_remove+0x42>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d104      	bne.n	800dc3c <tcp_pcb_remove+0x3c>
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	68da      	ldr	r2, [r3, #12]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	60da      	str	r2, [r3, #12]
 800dc3a:	e005      	b.n	800dc48 <tcp_pcb_remove+0x48>
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	60fb      	str	r3, [r7, #12]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1ef      	bne.n	800dc28 <tcp_pcb_remove+0x28>
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dc4e:	6838      	ldr	r0, [r7, #0]
 800dc50:	f7ff ff94 	bl	800db7c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	7d1b      	ldrb	r3, [r3, #20]
 800dc58:	2b0a      	cmp	r3, #10
 800dc5a:	d013      	beq.n	800dc84 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d00f      	beq.n	800dc84 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	7e9b      	ldrb	r3, [r3, #26]
 800dc68:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d009      	beq.n	800dc84 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	7e9b      	ldrb	r3, [r3, #26]
 800dc74:	f043 0302 	orr.w	r3, r3, #2
 800dc78:	b2da      	uxtb	r2, r3
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800dc7e:	6838      	ldr	r0, [r7, #0]
 800dc80:	f003 f9b8 	bl	8010ff4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	7d1b      	ldrb	r3, [r3, #20]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d020      	beq.n	800dcce <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d006      	beq.n	800dca2 <tcp_pcb_remove+0xa2>
 800dc94:	4b13      	ldr	r3, [pc, #76]	; (800dce4 <tcp_pcb_remove+0xe4>)
 800dc96:	f240 7253 	movw	r2, #1875	; 0x753
 800dc9a:	4913      	ldr	r1, [pc, #76]	; (800dce8 <tcp_pcb_remove+0xe8>)
 800dc9c:	4813      	ldr	r0, [pc, #76]	; (800dcec <tcp_pcb_remove+0xec>)
 800dc9e:	f006 fedb 	bl	8014a58 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d006      	beq.n	800dcb8 <tcp_pcb_remove+0xb8>
 800dcaa:	4b0e      	ldr	r3, [pc, #56]	; (800dce4 <tcp_pcb_remove+0xe4>)
 800dcac:	f240 7254 	movw	r2, #1876	; 0x754
 800dcb0:	490f      	ldr	r1, [pc, #60]	; (800dcf0 <tcp_pcb_remove+0xf0>)
 800dcb2:	480e      	ldr	r0, [pc, #56]	; (800dcec <tcp_pcb_remove+0xec>)
 800dcb4:	f006 fed0 	bl	8014a58 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d006      	beq.n	800dcce <tcp_pcb_remove+0xce>
 800dcc0:	4b08      	ldr	r3, [pc, #32]	; (800dce4 <tcp_pcb_remove+0xe4>)
 800dcc2:	f240 7256 	movw	r2, #1878	; 0x756
 800dcc6:	490b      	ldr	r1, [pc, #44]	; (800dcf4 <tcp_pcb_remove+0xf4>)
 800dcc8:	4808      	ldr	r0, [pc, #32]	; (800dcec <tcp_pcb_remove+0xec>)
 800dcca:	f006 fec5 	bl	8014a58 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dcda:	bf00      	nop
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	08016ab8 	.word	0x08016ab8
 800dce8:	08016e70 	.word	0x08016e70
 800dcec:	08016af4 	.word	0x08016af4
 800dcf0:	08016e88 	.word	0x08016e88
 800dcf4:	08016ea4 	.word	0x08016ea4

0800dcf8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dd00:	4b06      	ldr	r3, [pc, #24]	; (800dd1c <tcp_next_iss+0x24>)
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	4b06      	ldr	r3, [pc, #24]	; (800dd20 <tcp_next_iss+0x28>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4413      	add	r3, r2
 800dd0a:	4a04      	ldr	r2, [pc, #16]	; (800dd1c <tcp_next_iss+0x24>)
 800dd0c:	6013      	str	r3, [r2, #0]
  return iss;
 800dd0e:	4b03      	ldr	r3, [pc, #12]	; (800dd1c <tcp_next_iss+0x24>)
 800dd10:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	370c      	adds	r7, #12
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bc80      	pop	{r7}
 800dd1a:	4770      	bx	lr
 800dd1c:	2000001c 	.word	0x2000001c
 800dd20:	2000ba14 	.word	0x2000ba14

0800dd24 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	6039      	str	r1, [r7, #0]
 800dd2e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800dd30:	6838      	ldr	r0, [r7, #0]
 800dd32:	f005 faa1 	bl	8013278 <ip4_route>
 800dd36:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d101      	bne.n	800dd42 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800dd3e:	88fb      	ldrh	r3, [r7, #6]
 800dd40:	e010      	b.n	800dd64 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dd46:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dd48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d008      	beq.n	800dd62 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800dd50:	897b      	ldrh	r3, [r7, #10]
 800dd52:	3b28      	subs	r3, #40	; 0x28
 800dd54:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dd56:	893a      	ldrh	r2, [r7, #8]
 800dd58:	88fb      	ldrh	r3, [r7, #6]
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	bf28      	it	cs
 800dd5e:	4613      	movcs	r3, r2
 800dd60:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800dd62:	88fb      	ldrh	r3, [r7, #6]
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dd7a:	e011      	b.n	800dda0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d108      	bne.n	800dd9a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dd8e:	68f8      	ldr	r0, [r7, #12]
 800dd90:	f7fe fece 	bl	800cb30 <tcp_abort>
      pcb = next;
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	60fb      	str	r3, [r7, #12]
 800dd98:	e002      	b.n	800dda0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d1ea      	bne.n	800dd7c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800dda6:	bf00      	nop
 800dda8:	bf00      	nop
 800ddaa:	3710      	adds	r7, #16
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d02c      	beq.n	800de1a <tcp_netif_ip_addr_changed+0x6a>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d028      	beq.n	800de1a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ddc8:	4b16      	ldr	r3, [pc, #88]	; (800de24 <tcp_netif_ip_addr_changed+0x74>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7ff ffcc 	bl	800dd6c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ddd4:	4b14      	ldr	r3, [pc, #80]	; (800de28 <tcp_netif_ip_addr_changed+0x78>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4619      	mov	r1, r3
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f7ff ffc6 	bl	800dd6c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d019      	beq.n	800de1a <tcp_netif_ip_addr_changed+0x6a>
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d015      	beq.n	800de1a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800ddee:	4b0f      	ldr	r3, [pc, #60]	; (800de2c <tcp_netif_ip_addr_changed+0x7c>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	60fb      	str	r3, [r7, #12]
 800ddf4:	e00e      	b.n	800de14 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	429a      	cmp	r2, r3
 800de06:	d103      	bne.n	800de10 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	60fb      	str	r3, [r7, #12]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1ed      	bne.n	800ddf6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800de1a:	bf00      	nop
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	2000ba20 	.word	0x2000ba20
 800de28:	2000ba18 	.word	0x2000ba18
 800de2c:	2000ba1c 	.word	0x2000ba1c

0800de30 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800de30:	b590      	push	{r4, r7, lr}
 800de32:	b08b      	sub	sp, #44	; 0x2c
 800de34:	af02      	add	r7, sp, #8
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	4a82      	ldr	r2, [pc, #520]	; (800e048 <tcp_input+0x218>)
 800de40:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	895b      	ldrh	r3, [r3, #10]
 800de46:	2b13      	cmp	r3, #19
 800de48:	f240 8398 	bls.w	800e57c <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800de4c:	4b7f      	ldr	r3, [pc, #508]	; (800e04c <tcp_input+0x21c>)
 800de4e:	695b      	ldr	r3, [r3, #20]
 800de50:	4a7e      	ldr	r2, [pc, #504]	; (800e04c <tcp_input+0x21c>)
 800de52:	6812      	ldr	r2, [r2, #0]
 800de54:	4611      	mov	r1, r2
 800de56:	4618      	mov	r0, r3
 800de58:	f005 fc8a 	bl	8013770 <ip4_addr_isbroadcast_u32>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	f040 838e 	bne.w	800e580 <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800de64:	4b79      	ldr	r3, [pc, #484]	; (800e04c <tcp_input+0x21c>)
 800de66:	695b      	ldr	r3, [r3, #20]
 800de68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800de6c:	2be0      	cmp	r3, #224	; 0xe0
 800de6e:	f000 8387 	beq.w	800e580 <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800de72:	4b75      	ldr	r3, [pc, #468]	; (800e048 <tcp_input+0x218>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	899b      	ldrh	r3, [r3, #12]
 800de78:	b29b      	uxth	r3, r3
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fc ff38 	bl	800acf0 <lwip_htons>
 800de80:	4603      	mov	r3, r0
 800de82:	0b1b      	lsrs	r3, r3, #12
 800de84:	b29b      	uxth	r3, r3
 800de86:	b2db      	uxtb	r3, r3
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800de8c:	7cbb      	ldrb	r3, [r7, #18]
 800de8e:	2b13      	cmp	r3, #19
 800de90:	f240 8378 	bls.w	800e584 <tcp_input+0x754>
 800de94:	7cbb      	ldrb	r3, [r7, #18]
 800de96:	b29a      	uxth	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	891b      	ldrh	r3, [r3, #8]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	f200 8371 	bhi.w	800e584 <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800dea2:	7cbb      	ldrb	r3, [r7, #18]
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	3b14      	subs	r3, #20
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	4b69      	ldr	r3, [pc, #420]	; (800e050 <tcp_input+0x220>)
 800deac:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800deae:	4b69      	ldr	r3, [pc, #420]	; (800e054 <tcp_input+0x224>)
 800deb0:	2200      	movs	r2, #0
 800deb2:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	895a      	ldrh	r2, [r3, #10]
 800deb8:	7cbb      	ldrb	r3, [r7, #18]
 800deba:	b29b      	uxth	r3, r3
 800debc:	429a      	cmp	r2, r3
 800debe:	d30d      	bcc.n	800dedc <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dec0:	4b63      	ldr	r3, [pc, #396]	; (800e050 <tcp_input+0x220>)
 800dec2:	881a      	ldrh	r2, [r3, #0]
 800dec4:	4b64      	ldr	r3, [pc, #400]	; (800e058 <tcp_input+0x228>)
 800dec6:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800dec8:	7cbb      	ldrb	r3, [r7, #18]
 800deca:	b29b      	uxth	r3, r3
 800decc:	425b      	negs	r3, r3
 800dece:	b29b      	uxth	r3, r3
 800ded0:	b21b      	sxth	r3, r3
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7fe f8bd 	bl	800c054 <pbuf_header>
 800deda:	e055      	b.n	800df88 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d105      	bne.n	800def0 <tcp_input+0xc0>
 800dee4:	4b5d      	ldr	r3, [pc, #372]	; (800e05c <tcp_input+0x22c>)
 800dee6:	22b2      	movs	r2, #178	; 0xb2
 800dee8:	495d      	ldr	r1, [pc, #372]	; (800e060 <tcp_input+0x230>)
 800deea:	485e      	ldr	r0, [pc, #376]	; (800e064 <tcp_input+0x234>)
 800deec:	f006 fdb4 	bl	8014a58 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800def0:	f06f 0113 	mvn.w	r1, #19
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7fe f8ad 	bl	800c054 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	895a      	ldrh	r2, [r3, #10]
 800defe:	4b56      	ldr	r3, [pc, #344]	; (800e058 <tcp_input+0x228>)
 800df00:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800df02:	4b53      	ldr	r3, [pc, #332]	; (800e050 <tcp_input+0x220>)
 800df04:	881a      	ldrh	r2, [r3, #0]
 800df06:	4b54      	ldr	r3, [pc, #336]	; (800e058 <tcp_input+0x228>)
 800df08:	881b      	ldrh	r3, [r3, #0]
 800df0a:	1ad3      	subs	r3, r2, r3
 800df0c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800df0e:	4b52      	ldr	r3, [pc, #328]	; (800e058 <tcp_input+0x228>)
 800df10:	881b      	ldrh	r3, [r3, #0]
 800df12:	425b      	negs	r3, r3
 800df14:	b29b      	uxth	r3, r3
 800df16:	b21b      	sxth	r3, r3
 800df18:	4619      	mov	r1, r3
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7fe f89a 	bl	800c054 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	895b      	ldrh	r3, [r3, #10]
 800df26:	8a3a      	ldrh	r2, [r7, #16]
 800df28:	429a      	cmp	r2, r3
 800df2a:	f200 832d 	bhi.w	800e588 <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	4a47      	ldr	r2, [pc, #284]	; (800e054 <tcp_input+0x224>)
 800df36:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	8a3b      	ldrh	r3, [r7, #16]
 800df3e:	425b      	negs	r3, r3
 800df40:	b29b      	uxth	r3, r3
 800df42:	b21b      	sxth	r3, r3
 800df44:	4619      	mov	r1, r3
 800df46:	4610      	mov	r0, r2
 800df48:	f7fe f884 	bl	800c054 <pbuf_header>
    p->tot_len -= opt2len;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	891a      	ldrh	r2, [r3, #8]
 800df50:	8a3b      	ldrh	r3, [r7, #16]
 800df52:	1ad3      	subs	r3, r2, r3
 800df54:	b29a      	uxth	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	895b      	ldrh	r3, [r3, #10]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d005      	beq.n	800df6e <tcp_input+0x13e>
 800df62:	4b3e      	ldr	r3, [pc, #248]	; (800e05c <tcp_input+0x22c>)
 800df64:	22cf      	movs	r2, #207	; 0xcf
 800df66:	4940      	ldr	r1, [pc, #256]	; (800e068 <tcp_input+0x238>)
 800df68:	483e      	ldr	r0, [pc, #248]	; (800e064 <tcp_input+0x234>)
 800df6a:	f006 fd75 	bl	8014a58 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	891a      	ldrh	r2, [r3, #8]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	891b      	ldrh	r3, [r3, #8]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d005      	beq.n	800df88 <tcp_input+0x158>
 800df7c:	4b37      	ldr	r3, [pc, #220]	; (800e05c <tcp_input+0x22c>)
 800df7e:	22d0      	movs	r2, #208	; 0xd0
 800df80:	493a      	ldr	r1, [pc, #232]	; (800e06c <tcp_input+0x23c>)
 800df82:	4838      	ldr	r0, [pc, #224]	; (800e064 <tcp_input+0x234>)
 800df84:	f006 fd68 	bl	8014a58 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800df88:	4b2f      	ldr	r3, [pc, #188]	; (800e048 <tcp_input+0x218>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	b29b      	uxth	r3, r3
 800df90:	4a2d      	ldr	r2, [pc, #180]	; (800e048 <tcp_input+0x218>)
 800df92:	6814      	ldr	r4, [r2, #0]
 800df94:	4618      	mov	r0, r3
 800df96:	f7fc feab 	bl	800acf0 <lwip_htons>
 800df9a:	4603      	mov	r3, r0
 800df9c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800df9e:	4b2a      	ldr	r3, [pc, #168]	; (800e048 <tcp_input+0x218>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	885b      	ldrh	r3, [r3, #2]
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	4a28      	ldr	r2, [pc, #160]	; (800e048 <tcp_input+0x218>)
 800dfa8:	6814      	ldr	r4, [r2, #0]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fc fea0 	bl	800acf0 <lwip_htons>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dfb4:	4b24      	ldr	r3, [pc, #144]	; (800e048 <tcp_input+0x218>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	4a23      	ldr	r2, [pc, #140]	; (800e048 <tcp_input+0x218>)
 800dfbc:	6814      	ldr	r4, [r2, #0]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fc fea3 	bl	800ad0a <lwip_htonl>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	6063      	str	r3, [r4, #4]
 800dfc8:	6863      	ldr	r3, [r4, #4]
 800dfca:	4a29      	ldr	r2, [pc, #164]	; (800e070 <tcp_input+0x240>)
 800dfcc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dfce:	4b1e      	ldr	r3, [pc, #120]	; (800e048 <tcp_input+0x218>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	4a1c      	ldr	r2, [pc, #112]	; (800e048 <tcp_input+0x218>)
 800dfd6:	6814      	ldr	r4, [r2, #0]
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fc fe96 	bl	800ad0a <lwip_htonl>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	60a3      	str	r3, [r4, #8]
 800dfe2:	68a3      	ldr	r3, [r4, #8]
 800dfe4:	4a23      	ldr	r2, [pc, #140]	; (800e074 <tcp_input+0x244>)
 800dfe6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dfe8:	4b17      	ldr	r3, [pc, #92]	; (800e048 <tcp_input+0x218>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	89db      	ldrh	r3, [r3, #14]
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	4a15      	ldr	r2, [pc, #84]	; (800e048 <tcp_input+0x218>)
 800dff2:	6814      	ldr	r4, [r2, #0]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fc fe7b 	bl	800acf0 <lwip_htons>
 800dffa:	4603      	mov	r3, r0
 800dffc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dffe:	4b12      	ldr	r3, [pc, #72]	; (800e048 <tcp_input+0x218>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	899b      	ldrh	r3, [r3, #12]
 800e004:	b29b      	uxth	r3, r3
 800e006:	4618      	mov	r0, r3
 800e008:	f7fc fe72 	bl	800acf0 <lwip_htons>
 800e00c:	4603      	mov	r3, r0
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e014:	b2da      	uxtb	r2, r3
 800e016:	4b18      	ldr	r3, [pc, #96]	; (800e078 <tcp_input+0x248>)
 800e018:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	891a      	ldrh	r2, [r3, #8]
 800e01e:	4b16      	ldr	r3, [pc, #88]	; (800e078 <tcp_input+0x248>)
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	f003 0303 	and.w	r3, r3, #3
 800e026:	2b00      	cmp	r3, #0
 800e028:	bf14      	ite	ne
 800e02a:	2301      	movne	r3, #1
 800e02c:	2300      	moveq	r3, #0
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	b29b      	uxth	r3, r3
 800e032:	4413      	add	r3, r2
 800e034:	b29a      	uxth	r2, r3
 800e036:	4b11      	ldr	r3, [pc, #68]	; (800e07c <tcp_input+0x24c>)
 800e038:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e03a:	2300      	movs	r3, #0
 800e03c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e03e:	4b10      	ldr	r3, [pc, #64]	; (800e080 <tcp_input+0x250>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	61fb      	str	r3, [r7, #28]
 800e044:	e082      	b.n	800e14c <tcp_input+0x31c>
 800e046:	bf00      	nop
 800e048:	2000ba3c 	.word	0x2000ba3c
 800e04c:	200082c4 	.word	0x200082c4
 800e050:	2000ba40 	.word	0x2000ba40
 800e054:	2000ba44 	.word	0x2000ba44
 800e058:	2000ba42 	.word	0x2000ba42
 800e05c:	08016ebc 	.word	0x08016ebc
 800e060:	08016ef0 	.word	0x08016ef0
 800e064:	08016f00 	.word	0x08016f00
 800e068:	08016f28 	.word	0x08016f28
 800e06c:	08016f34 	.word	0x08016f34
 800e070:	2000ba4c 	.word	0x2000ba4c
 800e074:	2000ba50 	.word	0x2000ba50
 800e078:	2000ba58 	.word	0x2000ba58
 800e07c:	2000ba56 	.word	0x2000ba56
 800e080:	2000ba20 	.word	0x2000ba20
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	7d1b      	ldrb	r3, [r3, #20]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d105      	bne.n	800e098 <tcp_input+0x268>
 800e08c:	4b6e      	ldr	r3, [pc, #440]	; (800e248 <tcp_input+0x418>)
 800e08e:	22e2      	movs	r2, #226	; 0xe2
 800e090:	496e      	ldr	r1, [pc, #440]	; (800e24c <tcp_input+0x41c>)
 800e092:	486f      	ldr	r0, [pc, #444]	; (800e250 <tcp_input+0x420>)
 800e094:	f006 fce0 	bl	8014a58 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e098:	69fb      	ldr	r3, [r7, #28]
 800e09a:	7d1b      	ldrb	r3, [r3, #20]
 800e09c:	2b0a      	cmp	r3, #10
 800e09e:	d105      	bne.n	800e0ac <tcp_input+0x27c>
 800e0a0:	4b69      	ldr	r3, [pc, #420]	; (800e248 <tcp_input+0x418>)
 800e0a2:	22e3      	movs	r2, #227	; 0xe3
 800e0a4:	496b      	ldr	r1, [pc, #428]	; (800e254 <tcp_input+0x424>)
 800e0a6:	486a      	ldr	r0, [pc, #424]	; (800e250 <tcp_input+0x420>)
 800e0a8:	f006 fcd6 	bl	8014a58 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	7d1b      	ldrb	r3, [r3, #20]
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d105      	bne.n	800e0c0 <tcp_input+0x290>
 800e0b4:	4b64      	ldr	r3, [pc, #400]	; (800e248 <tcp_input+0x418>)
 800e0b6:	22e4      	movs	r2, #228	; 0xe4
 800e0b8:	4967      	ldr	r1, [pc, #412]	; (800e258 <tcp_input+0x428>)
 800e0ba:	4865      	ldr	r0, [pc, #404]	; (800e250 <tcp_input+0x420>)
 800e0bc:	f006 fccc 	bl	8014a58 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	8b1a      	ldrh	r2, [r3, #24]
 800e0c4:	4b65      	ldr	r3, [pc, #404]	; (800e25c <tcp_input+0x42c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	881b      	ldrh	r3, [r3, #0]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d138      	bne.n	800e142 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	8ada      	ldrh	r2, [r3, #22]
 800e0d4:	4b61      	ldr	r3, [pc, #388]	; (800e25c <tcp_input+0x42c>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	885b      	ldrh	r3, [r3, #2]
 800e0da:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d130      	bne.n	800e142 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	685a      	ldr	r2, [r3, #4]
 800e0e4:	4b5e      	ldr	r3, [pc, #376]	; (800e260 <tcp_input+0x430>)
 800e0e6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d12a      	bne.n	800e142 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	4b5b      	ldr	r3, [pc, #364]	; (800e260 <tcp_input+0x430>)
 800e0f2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d124      	bne.n	800e142 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	69fa      	ldr	r2, [r7, #28]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d105      	bne.n	800e10e <tcp_input+0x2de>
 800e102:	4b51      	ldr	r3, [pc, #324]	; (800e248 <tcp_input+0x418>)
 800e104:	22ec      	movs	r2, #236	; 0xec
 800e106:	4957      	ldr	r1, [pc, #348]	; (800e264 <tcp_input+0x434>)
 800e108:	4851      	ldr	r0, [pc, #324]	; (800e250 <tcp_input+0x420>)
 800e10a:	f006 fca5 	bl	8014a58 <iprintf>
      if (prev != NULL) {
 800e10e:	69bb      	ldr	r3, [r7, #24]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00a      	beq.n	800e12a <tcp_input+0x2fa>
        prev->next = pcb->next;
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	68da      	ldr	r2, [r3, #12]
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e11c:	4b52      	ldr	r3, [pc, #328]	; (800e268 <tcp_input+0x438>)
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e124:	4a50      	ldr	r2, [pc, #320]	; (800e268 <tcp_input+0x438>)
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	69fa      	ldr	r2, [r7, #28]
 800e130:	429a      	cmp	r2, r3
 800e132:	d10f      	bne.n	800e154 <tcp_input+0x324>
 800e134:	4b44      	ldr	r3, [pc, #272]	; (800e248 <tcp_input+0x418>)
 800e136:	22f4      	movs	r2, #244	; 0xf4
 800e138:	494c      	ldr	r1, [pc, #304]	; (800e26c <tcp_input+0x43c>)
 800e13a:	4845      	ldr	r0, [pc, #276]	; (800e250 <tcp_input+0x420>)
 800e13c:	f006 fc8c 	bl	8014a58 <iprintf>
      break;
 800e140:	e008      	b.n	800e154 <tcp_input+0x324>
    }
    prev = pcb;
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	61fb      	str	r3, [r7, #28]
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d198      	bne.n	800e084 <tcp_input+0x254>
 800e152:	e000      	b.n	800e156 <tcp_input+0x326>
      break;
 800e154:	bf00      	nop
  }

  if (pcb == NULL) {
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f040 808f 	bne.w	800e27c <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e15e:	4b44      	ldr	r3, [pc, #272]	; (800e270 <tcp_input+0x440>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	61fb      	str	r3, [r7, #28]
 800e164:	e02f      	b.n	800e1c6 <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	7d1b      	ldrb	r3, [r3, #20]
 800e16a:	2b0a      	cmp	r3, #10
 800e16c:	d005      	beq.n	800e17a <tcp_input+0x34a>
 800e16e:	4b36      	ldr	r3, [pc, #216]	; (800e248 <tcp_input+0x418>)
 800e170:	22fe      	movs	r2, #254	; 0xfe
 800e172:	4940      	ldr	r1, [pc, #256]	; (800e274 <tcp_input+0x444>)
 800e174:	4836      	ldr	r0, [pc, #216]	; (800e250 <tcp_input+0x420>)
 800e176:	f006 fc6f 	bl	8014a58 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	8b1a      	ldrh	r2, [r3, #24]
 800e17e:	4b37      	ldr	r3, [pc, #220]	; (800e25c <tcp_input+0x42c>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	881b      	ldrh	r3, [r3, #0]
 800e184:	b29b      	uxth	r3, r3
 800e186:	429a      	cmp	r2, r3
 800e188:	d11a      	bne.n	800e1c0 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	8ada      	ldrh	r2, [r3, #22]
 800e18e:	4b33      	ldr	r3, [pc, #204]	; (800e25c <tcp_input+0x42c>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	885b      	ldrh	r3, [r3, #2]
 800e194:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e196:	429a      	cmp	r2, r3
 800e198:	d112      	bne.n	800e1c0 <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	685a      	ldr	r2, [r3, #4]
 800e19e:	4b30      	ldr	r3, [pc, #192]	; (800e260 <tcp_input+0x430>)
 800e1a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d10c      	bne.n	800e1c0 <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	4b2d      	ldr	r3, [pc, #180]	; (800e260 <tcp_input+0x430>)
 800e1ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d106      	bne.n	800e1c0 <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e1b2:	69f8      	ldr	r0, [r7, #28]
 800e1b4:	f000 fb16 	bl	800e7e4 <tcp_timewait_input>
        pbuf_free(p);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7fd ff6f 	bl	800c09c <pbuf_free>
        return;
 800e1be:	e1e9      	b.n	800e594 <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	61fb      	str	r3, [r7, #28]
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1cc      	bne.n	800e166 <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e1d0:	4b29      	ldr	r3, [pc, #164]	; (800e278 <tcp_input+0x448>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	617b      	str	r3, [r7, #20]
 800e1d6:	e019      	b.n	800e20c <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	8ada      	ldrh	r2, [r3, #22]
 800e1dc:	4b1f      	ldr	r3, [pc, #124]	; (800e25c <tcp_input+0x42c>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	885b      	ldrh	r3, [r3, #2]
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d10c      	bne.n	800e202 <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	4b1c      	ldr	r3, [pc, #112]	; (800e260 <tcp_input+0x430>)
 800e1ee:	695b      	ldr	r3, [r3, #20]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d00f      	beq.n	800e214 <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00d      	beq.n	800e216 <tcp_input+0x3e6>
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d009      	beq.n	800e216 <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	617b      	str	r3, [r7, #20]
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d1e2      	bne.n	800e1d8 <tcp_input+0x3a8>
 800e212:	e000      	b.n	800e216 <tcp_input+0x3e6>
            break;
 800e214:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d02f      	beq.n	800e27c <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00a      	beq.n	800e238 <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	68da      	ldr	r2, [r3, #12]
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e22a:	4b13      	ldr	r3, [pc, #76]	; (800e278 <tcp_input+0x448>)
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e232:	4a11      	ldr	r2, [pc, #68]	; (800e278 <tcp_input+0x448>)
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800e238:	6978      	ldr	r0, [r7, #20]
 800e23a:	f000 f9f3 	bl	800e624 <tcp_listen_input>
      pbuf_free(p);
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f7fd ff2c 	bl	800c09c <pbuf_free>
      return;
 800e244:	e1a6      	b.n	800e594 <tcp_input+0x764>
 800e246:	bf00      	nop
 800e248:	08016ebc 	.word	0x08016ebc
 800e24c:	08016f54 	.word	0x08016f54
 800e250:	08016f00 	.word	0x08016f00
 800e254:	08016f7c 	.word	0x08016f7c
 800e258:	08016fa8 	.word	0x08016fa8
 800e25c:	2000ba3c 	.word	0x2000ba3c
 800e260:	200082c4 	.word	0x200082c4
 800e264:	08016fd0 	.word	0x08016fd0
 800e268:	2000ba20 	.word	0x2000ba20
 800e26c:	08016ffc 	.word	0x08016ffc
 800e270:	2000ba24 	.word	0x2000ba24
 800e274:	08017028 	.word	0x08017028
 800e278:	2000ba1c 	.word	0x2000ba1c
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	f000 8156 	beq.w	800e530 <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e284:	4b94      	ldr	r3, [pc, #592]	; (800e4d8 <tcp_input+0x6a8>)
 800e286:	2200      	movs	r2, #0
 800e288:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	891a      	ldrh	r2, [r3, #8]
 800e28e:	4b92      	ldr	r3, [pc, #584]	; (800e4d8 <tcp_input+0x6a8>)
 800e290:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e292:	4a91      	ldr	r2, [pc, #580]	; (800e4d8 <tcp_input+0x6a8>)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e298:	4b90      	ldr	r3, [pc, #576]	; (800e4dc <tcp_input+0x6ac>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a8e      	ldr	r2, [pc, #568]	; (800e4d8 <tcp_input+0x6a8>)
 800e29e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e2a0:	4b8f      	ldr	r3, [pc, #572]	; (800e4e0 <tcp_input+0x6b0>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e2a6:	4b8f      	ldr	r3, [pc, #572]	; (800e4e4 <tcp_input+0x6b4>)
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e2ac:	4b8e      	ldr	r3, [pc, #568]	; (800e4e8 <tcp_input+0x6b8>)
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e2b2:	4b8e      	ldr	r3, [pc, #568]	; (800e4ec <tcp_input+0x6bc>)
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	f003 0308 	and.w	r3, r3, #8
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d006      	beq.n	800e2cc <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	7b5b      	ldrb	r3, [r3, #13]
 800e2c2:	f043 0301 	orr.w	r3, r3, #1
 800e2c6:	b2da      	uxtb	r2, r3
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d017      	beq.n	800e304 <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e2d4:	69f8      	ldr	r0, [r7, #28]
 800e2d6:	f7ff f983 	bl	800d5e0 <tcp_process_refused_data>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	f113 0f0d 	cmn.w	r3, #13
 800e2e0:	d007      	beq.n	800e2f2 <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00c      	beq.n	800e304 <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e2ea:	4b81      	ldr	r3, [pc, #516]	; (800e4f0 <tcp_input+0x6c0>)
 800e2ec:	881b      	ldrh	r3, [r3, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d008      	beq.n	800e304 <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f040 80e2 	bne.w	800e4c0 <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e2fc:	69f8      	ldr	r0, [r7, #28]
 800e2fe:	f002 fe1d 	bl	8010f3c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e302:	e0dd      	b.n	800e4c0 <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 800e304:	4a7b      	ldr	r2, [pc, #492]	; (800e4f4 <tcp_input+0x6c4>)
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e30a:	69f8      	ldr	r0, [r7, #28]
 800e30c:	f000 fad2 	bl	800e8b4 <tcp_process>
 800e310:	4603      	mov	r3, r0
 800e312:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e314:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e318:	f113 0f0d 	cmn.w	r3, #13
 800e31c:	f000 80d2 	beq.w	800e4c4 <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 800e320:	4b70      	ldr	r3, [pc, #448]	; (800e4e4 <tcp_input+0x6b4>)
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	f003 0308 	and.w	r3, r3, #8
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d016      	beq.n	800e35a <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e332:	2b00      	cmp	r3, #0
 800e334:	d008      	beq.n	800e348 <tcp_input+0x518>
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e33c:	69fa      	ldr	r2, [r7, #28]
 800e33e:	6912      	ldr	r2, [r2, #16]
 800e340:	f06f 010d 	mvn.w	r1, #13
 800e344:	4610      	mov	r0, r2
 800e346:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e348:	69f9      	ldr	r1, [r7, #28]
 800e34a:	486b      	ldr	r0, [pc, #428]	; (800e4f8 <tcp_input+0x6c8>)
 800e34c:	f7ff fc58 	bl	800dc00 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800e350:	69f9      	ldr	r1, [r7, #28]
 800e352:	2001      	movs	r0, #1
 800e354:	f7fd f90a 	bl	800b56c <memp_free>
 800e358:	e0d7      	b.n	800e50a <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 800e35a:	2300      	movs	r3, #0
 800e35c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e35e:	4b62      	ldr	r3, [pc, #392]	; (800e4e8 <tcp_input+0x6b8>)
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d01b      	beq.n	800e39e <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e366:	4b60      	ldr	r3, [pc, #384]	; (800e4e8 <tcp_input+0x6b8>)
 800e368:	881b      	ldrh	r3, [r3, #0]
 800e36a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e370:	2b00      	cmp	r3, #0
 800e372:	d009      	beq.n	800e388 <tcp_input+0x558>
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e378:	69fa      	ldr	r2, [r7, #28]
 800e37a:	6910      	ldr	r0, [r2, #16]
 800e37c:	89fa      	ldrh	r2, [r7, #14]
 800e37e:	69f9      	ldr	r1, [r7, #28]
 800e380:	4798      	blx	r3
 800e382:	4603      	mov	r3, r0
 800e384:	74fb      	strb	r3, [r7, #19]
 800e386:	e001      	b.n	800e38c <tcp_input+0x55c>
 800e388:	2300      	movs	r3, #0
 800e38a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e38c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e390:	f113 0f0d 	cmn.w	r3, #13
 800e394:	f000 8098 	beq.w	800e4c8 <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e398:	4b53      	ldr	r3, [pc, #332]	; (800e4e8 <tcp_input+0x6b8>)
 800e39a:	2200      	movs	r2, #0
 800e39c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e39e:	69f8      	ldr	r0, [r7, #28]
 800e3a0:	f000 f90e 	bl	800e5c0 <tcp_input_delayed_close>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f040 8090 	bne.w	800e4cc <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e3ac:	4b4c      	ldr	r3, [pc, #304]	; (800e4e0 <tcp_input+0x6b0>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d041      	beq.n	800e438 <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d006      	beq.n	800e3ca <tcp_input+0x59a>
 800e3bc:	4b4f      	ldr	r3, [pc, #316]	; (800e4fc <tcp_input+0x6cc>)
 800e3be:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800e3c2:	494f      	ldr	r1, [pc, #316]	; (800e500 <tcp_input+0x6d0>)
 800e3c4:	484f      	ldr	r0, [pc, #316]	; (800e504 <tcp_input+0x6d4>)
 800e3c6:	f006 fb47 	bl	8014a58 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	7e9b      	ldrb	r3, [r3, #26]
 800e3ce:	f003 0310 	and.w	r3, r3, #16
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d008      	beq.n	800e3e8 <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e3d6:	4b42      	ldr	r3, [pc, #264]	; (800e4e0 <tcp_input+0x6b0>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fd fe5e 	bl	800c09c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e3e0:	69f8      	ldr	r0, [r7, #28]
 800e3e2:	f7fe fba5 	bl	800cb30 <tcp_abort>
            goto aborted;
 800e3e6:	e090      	b.n	800e50a <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00c      	beq.n	800e40c <tcp_input+0x5dc>
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	6918      	ldr	r0, [r3, #16]
 800e3fc:	4b38      	ldr	r3, [pc, #224]	; (800e4e0 <tcp_input+0x6b0>)
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	2300      	movs	r3, #0
 800e402:	69f9      	ldr	r1, [r7, #28]
 800e404:	47a0      	blx	r4
 800e406:	4603      	mov	r3, r0
 800e408:	74fb      	strb	r3, [r7, #19]
 800e40a:	e008      	b.n	800e41e <tcp_input+0x5ee>
 800e40c:	4b34      	ldr	r3, [pc, #208]	; (800e4e0 <tcp_input+0x6b0>)
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	2300      	movs	r3, #0
 800e412:	69f9      	ldr	r1, [r7, #28]
 800e414:	2000      	movs	r0, #0
 800e416:	f7ff f995 	bl	800d744 <tcp_recv_null>
 800e41a:	4603      	mov	r3, r0
 800e41c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e41e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e422:	f113 0f0d 	cmn.w	r3, #13
 800e426:	d053      	beq.n	800e4d0 <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e428:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d003      	beq.n	800e438 <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e430:	4b2b      	ldr	r3, [pc, #172]	; (800e4e0 <tcp_input+0x6b0>)
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e438:	4b2a      	ldr	r3, [pc, #168]	; (800e4e4 <tcp_input+0x6b4>)
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	f003 0320 	and.w	r3, r3, #32
 800e440:	2b00      	cmp	r3, #0
 800e442:	d030      	beq.n	800e4a6 <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d009      	beq.n	800e460 <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e450:	7b5a      	ldrb	r2, [r3, #13]
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e456:	f042 0220 	orr.w	r2, r2, #32
 800e45a:	b2d2      	uxtb	r2, r2
 800e45c:	735a      	strb	r2, [r3, #13]
 800e45e:	e022      	b.n	800e4a6 <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e464:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e468:	d005      	beq.n	800e476 <tcp_input+0x646>
              pcb->rcv_wnd++;
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e46e:	3301      	adds	r3, #1
 800e470:	b29a      	uxth	r2, r3
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00b      	beq.n	800e498 <tcp_input+0x668>
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	6918      	ldr	r0, [r3, #16]
 800e48a:	2300      	movs	r3, #0
 800e48c:	2200      	movs	r2, #0
 800e48e:	69f9      	ldr	r1, [r7, #28]
 800e490:	47a0      	blx	r4
 800e492:	4603      	mov	r3, r0
 800e494:	74fb      	strb	r3, [r7, #19]
 800e496:	e001      	b.n	800e49c <tcp_input+0x66c>
 800e498:	2300      	movs	r3, #0
 800e49a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e49c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4a0:	f113 0f0d 	cmn.w	r3, #13
 800e4a4:	d016      	beq.n	800e4d4 <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e4a6:	4b13      	ldr	r3, [pc, #76]	; (800e4f4 <tcp_input+0x6c4>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e4ac:	69f8      	ldr	r0, [r7, #28]
 800e4ae:	f000 f887 	bl	800e5c0 <tcp_input_delayed_close>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d127      	bne.n	800e508 <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e4b8:	69f8      	ldr	r0, [r7, #28]
 800e4ba:	f002 fd9b 	bl	8010ff4 <tcp_output>
 800e4be:	e024      	b.n	800e50a <tcp_input+0x6da>
        goto aborted;
 800e4c0:	bf00      	nop
 800e4c2:	e022      	b.n	800e50a <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e4c4:	bf00      	nop
 800e4c6:	e020      	b.n	800e50a <tcp_input+0x6da>
              goto aborted;
 800e4c8:	bf00      	nop
 800e4ca:	e01e      	b.n	800e50a <tcp_input+0x6da>
          goto aborted;
 800e4cc:	bf00      	nop
 800e4ce:	e01c      	b.n	800e50a <tcp_input+0x6da>
            goto aborted;
 800e4d0:	bf00      	nop
 800e4d2:	e01a      	b.n	800e50a <tcp_input+0x6da>
              goto aborted;
 800e4d4:	bf00      	nop
 800e4d6:	e018      	b.n	800e50a <tcp_input+0x6da>
 800e4d8:	2000ba2c 	.word	0x2000ba2c
 800e4dc:	2000ba3c 	.word	0x2000ba3c
 800e4e0:	2000ba5c 	.word	0x2000ba5c
 800e4e4:	2000ba59 	.word	0x2000ba59
 800e4e8:	2000ba54 	.word	0x2000ba54
 800e4ec:	2000ba58 	.word	0x2000ba58
 800e4f0:	2000ba56 	.word	0x2000ba56
 800e4f4:	2000ba60 	.word	0x2000ba60
 800e4f8:	2000ba20 	.word	0x2000ba20
 800e4fc:	08016ebc 	.word	0x08016ebc
 800e500:	08017058 	.word	0x08017058
 800e504:	08016f00 	.word	0x08016f00
          goto aborted;
 800e508:	bf00      	nop
    tcp_input_pcb = NULL;
 800e50a:	4b24      	ldr	r3, [pc, #144]	; (800e59c <tcp_input+0x76c>)
 800e50c:	2200      	movs	r2, #0
 800e50e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e510:	4b23      	ldr	r3, [pc, #140]	; (800e5a0 <tcp_input+0x770>)
 800e512:	2200      	movs	r2, #0
 800e514:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800e516:	4b23      	ldr	r3, [pc, #140]	; (800e5a4 <tcp_input+0x774>)
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d039      	beq.n	800e592 <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 800e51e:	4b21      	ldr	r3, [pc, #132]	; (800e5a4 <tcp_input+0x774>)
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	4618      	mov	r0, r3
 800e524:	f7fd fdba 	bl	800c09c <pbuf_free>
      inseg.p = NULL;
 800e528:	4b1e      	ldr	r3, [pc, #120]	; (800e5a4 <tcp_input+0x774>)
 800e52a:	2200      	movs	r2, #0
 800e52c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e52e:	e030      	b.n	800e592 <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e530:	4b1d      	ldr	r3, [pc, #116]	; (800e5a8 <tcp_input+0x778>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	899b      	ldrh	r3, [r3, #12]
 800e536:	b29b      	uxth	r3, r3
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fc fbd9 	bl	800acf0 <lwip_htons>
 800e53e:	4603      	mov	r3, r0
 800e540:	f003 0304 	and.w	r3, r3, #4
 800e544:	2b00      	cmp	r3, #0
 800e546:	d115      	bne.n	800e574 <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e548:	4b18      	ldr	r3, [pc, #96]	; (800e5ac <tcp_input+0x77c>)
 800e54a:	6818      	ldr	r0, [r3, #0]
 800e54c:	4b18      	ldr	r3, [pc, #96]	; (800e5b0 <tcp_input+0x780>)
 800e54e:	881b      	ldrh	r3, [r3, #0]
 800e550:	461a      	mov	r2, r3
 800e552:	4b18      	ldr	r3, [pc, #96]	; (800e5b4 <tcp_input+0x784>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e558:	4b13      	ldr	r3, [pc, #76]	; (800e5a8 <tcp_input+0x778>)
 800e55a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e55c:	885b      	ldrh	r3, [r3, #2]
 800e55e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e560:	4a11      	ldr	r2, [pc, #68]	; (800e5a8 <tcp_input+0x778>)
 800e562:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e564:	8812      	ldrh	r2, [r2, #0]
 800e566:	b292      	uxth	r2, r2
 800e568:	9201      	str	r2, [sp, #4]
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	4b12      	ldr	r3, [pc, #72]	; (800e5b8 <tcp_input+0x788>)
 800e56e:	4a13      	ldr	r2, [pc, #76]	; (800e5bc <tcp_input+0x78c>)
 800e570:	f002 ffc4 	bl	80114fc <tcp_rst>
    pbuf_free(p);
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f7fd fd91 	bl	800c09c <pbuf_free>
  return;
 800e57a:	e00a      	b.n	800e592 <tcp_input+0x762>
    goto dropped;
 800e57c:	bf00      	nop
 800e57e:	e004      	b.n	800e58a <tcp_input+0x75a>
    goto dropped;
 800e580:	bf00      	nop
 800e582:	e002      	b.n	800e58a <tcp_input+0x75a>
    goto dropped;
 800e584:	bf00      	nop
 800e586:	e000      	b.n	800e58a <tcp_input+0x75a>
      goto dropped;
 800e588:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7fd fd86 	bl	800c09c <pbuf_free>
 800e590:	e000      	b.n	800e594 <tcp_input+0x764>
  return;
 800e592:	bf00      	nop
}
 800e594:	3724      	adds	r7, #36	; 0x24
 800e596:	46bd      	mov	sp, r7
 800e598:	bd90      	pop	{r4, r7, pc}
 800e59a:	bf00      	nop
 800e59c:	2000ba60 	.word	0x2000ba60
 800e5a0:	2000ba5c 	.word	0x2000ba5c
 800e5a4:	2000ba2c 	.word	0x2000ba2c
 800e5a8:	2000ba3c 	.word	0x2000ba3c
 800e5ac:	2000ba50 	.word	0x2000ba50
 800e5b0:	2000ba56 	.word	0x2000ba56
 800e5b4:	2000ba4c 	.word	0x2000ba4c
 800e5b8:	200082d4 	.word	0x200082d4
 800e5bc:	200082d8 	.word	0x200082d8

0800e5c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800e5c8:	4b14      	ldr	r3, [pc, #80]	; (800e61c <tcp_input_delayed_close+0x5c>)
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	f003 0310 	and.w	r3, r3, #16
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d01d      	beq.n	800e610 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	7e9b      	ldrb	r3, [r3, #26]
 800e5d8:	f003 0310 	and.w	r3, r3, #16
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d10d      	bne.n	800e5fc <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d008      	beq.n	800e5fc <tcp_input_delayed_close+0x3c>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	6912      	ldr	r2, [r2, #16]
 800e5f4:	f06f 010e 	mvn.w	r1, #14
 800e5f8:	4610      	mov	r0, r2
 800e5fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e5fc:	6879      	ldr	r1, [r7, #4]
 800e5fe:	4808      	ldr	r0, [pc, #32]	; (800e620 <tcp_input_delayed_close+0x60>)
 800e600:	f7ff fafe 	bl	800dc00 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800e604:	6879      	ldr	r1, [r7, #4]
 800e606:	2001      	movs	r0, #1
 800e608:	f7fc ffb0 	bl	800b56c <memp_free>
    return 1;
 800e60c:	2301      	movs	r3, #1
 800e60e:	e000      	b.n	800e612 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800e610:	2300      	movs	r3, #0
}
 800e612:	4618      	mov	r0, r3
 800e614:	3708      	adds	r7, #8
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	2000ba59 	.word	0x2000ba59
 800e620:	2000ba20 	.word	0x2000ba20

0800e624 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b088      	sub	sp, #32
 800e628:	af02      	add	r7, sp, #8
 800e62a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e62c:	4b63      	ldr	r3, [pc, #396]	; (800e7bc <tcp_listen_input+0x198>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	f003 0304 	and.w	r3, r3, #4
 800e634:	2b00      	cmp	r3, #0
 800e636:	f040 80bb 	bne.w	800e7b0 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e63a:	4b60      	ldr	r3, [pc, #384]	; (800e7bc <tcp_listen_input+0x198>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	f003 0310 	and.w	r3, r3, #16
 800e642:	2b00      	cmp	r3, #0
 800e644:	d016      	beq.n	800e674 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e646:	4b5e      	ldr	r3, [pc, #376]	; (800e7c0 <tcp_listen_input+0x19c>)
 800e648:	6818      	ldr	r0, [r3, #0]
 800e64a:	4b5e      	ldr	r3, [pc, #376]	; (800e7c4 <tcp_listen_input+0x1a0>)
 800e64c:	881b      	ldrh	r3, [r3, #0]
 800e64e:	461a      	mov	r2, r3
 800e650:	4b5d      	ldr	r3, [pc, #372]	; (800e7c8 <tcp_listen_input+0x1a4>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e656:	4b5d      	ldr	r3, [pc, #372]	; (800e7cc <tcp_listen_input+0x1a8>)
 800e658:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e65a:	885b      	ldrh	r3, [r3, #2]
 800e65c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e65e:	4a5b      	ldr	r2, [pc, #364]	; (800e7cc <tcp_listen_input+0x1a8>)
 800e660:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e662:	8812      	ldrh	r2, [r2, #0]
 800e664:	b292      	uxth	r2, r2
 800e666:	9201      	str	r2, [sp, #4]
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	4b59      	ldr	r3, [pc, #356]	; (800e7d0 <tcp_listen_input+0x1ac>)
 800e66c:	4a59      	ldr	r2, [pc, #356]	; (800e7d4 <tcp_listen_input+0x1b0>)
 800e66e:	f002 ff45 	bl	80114fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e672:	e09f      	b.n	800e7b4 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800e674:	4b51      	ldr	r3, [pc, #324]	; (800e7bc <tcp_listen_input+0x198>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	f003 0302 	and.w	r3, r3, #2
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f000 8099 	beq.w	800e7b4 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	7d5b      	ldrb	r3, [r3, #21]
 800e686:	4618      	mov	r0, r3
 800e688:	f7ff f93a 	bl	800d900 <tcp_alloc>
 800e68c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d111      	bne.n	800e6b8 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d00a      	beq.n	800e6b2 <tcp_listen_input+0x8e>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	6910      	ldr	r0, [r2, #16]
 800e6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	4798      	blx	r3
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	73bb      	strb	r3, [r7, #14]
      return;
 800e6b0:	e081      	b.n	800e7b6 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e6b2:	23f0      	movs	r3, #240	; 0xf0
 800e6b4:	73bb      	strb	r3, [r7, #14]
      return;
 800e6b6:	e07e      	b.n	800e7b6 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e6b8:	4b47      	ldr	r3, [pc, #284]	; (800e7d8 <tcp_listen_input+0x1b4>)
 800e6ba:	695a      	ldr	r2, [r3, #20]
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e6c0:	4b45      	ldr	r3, [pc, #276]	; (800e7d8 <tcp_listen_input+0x1b4>)
 800e6c2:	691a      	ldr	r2, [r3, #16]
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	8ada      	ldrh	r2, [r3, #22]
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e6d0:	4b3e      	ldr	r3, [pc, #248]	; (800e7cc <tcp_listen_input+0x1a8>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	881b      	ldrh	r3, [r3, #0]
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	2203      	movs	r2, #3
 800e6e0:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e6e2:	4b39      	ldr	r3, [pc, #228]	; (800e7c8 <tcp_listen_input+0x1a4>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	1c5a      	adds	r2, r3, #1
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e6f4:	6978      	ldr	r0, [r7, #20]
 800e6f6:	f7ff faff 	bl	800dcf8 <tcp_next_iss>
 800e6fa:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	693a      	ldr	r2, [r7, #16]
 800e700:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	693a      	ldr	r2, [r7, #16]
 800e706:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	693a      	ldr	r2, [r7, #16]
 800e70c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	693a      	ldr	r2, [r7, #16]
 800e712:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e714:	4b2c      	ldr	r3, [pc, #176]	; (800e7c8 <tcp_listen_input+0x1a4>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	1e5a      	subs	r2, r3, #1
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	691a      	ldr	r2, [r3, #16]
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	7a1b      	ldrb	r3, [r3, #8]
 800e730:	f003 030c 	and.w	r3, r3, #12
 800e734:	b2da      	uxtb	r2, r3
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e73a:	4b28      	ldr	r3, [pc, #160]	; (800e7dc <tcp_listen_input+0x1b8>)
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	60da      	str	r2, [r3, #12]
 800e742:	4a26      	ldr	r2, [pc, #152]	; (800e7dc <tcp_listen_input+0x1b8>)
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	6013      	str	r3, [r2, #0]
 800e748:	f003 f920 	bl	801198c <tcp_timer_needed>
 800e74c:	4b24      	ldr	r3, [pc, #144]	; (800e7e0 <tcp_listen_input+0x1bc>)
 800e74e:	2201      	movs	r2, #1
 800e750:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e752:	6978      	ldr	r0, [r7, #20]
 800e754:	f001 fd0c 	bl	8010170 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e758:	4b1c      	ldr	r3, [pc, #112]	; (800e7cc <tcp_listen_input+0x1a8>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	89db      	ldrh	r3, [r3, #14]
 800e75e:	b29a      	uxth	r2, r3
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	3304      	adds	r3, #4
 800e77a:	4619      	mov	r1, r3
 800e77c:	4610      	mov	r0, r2
 800e77e:	f7ff fad1 	bl	800dd24 <tcp_eff_send_mss_impl>
 800e782:	4603      	mov	r3, r0
 800e784:	461a      	mov	r2, r3
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e78a:	2112      	movs	r1, #18
 800e78c:	6978      	ldr	r0, [r7, #20]
 800e78e:	f002 fad9 	bl	8010d44 <tcp_enqueue_flags>
 800e792:	4603      	mov	r3, r0
 800e794:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d004      	beq.n	800e7a8 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800e79e:	2100      	movs	r1, #0
 800e7a0:	6978      	ldr	r0, [r7, #20]
 800e7a2:	f7fe f913 	bl	800c9cc <tcp_abandon>
      return;
 800e7a6:	e006      	b.n	800e7b6 <tcp_listen_input+0x192>
    tcp_output(npcb);
 800e7a8:	6978      	ldr	r0, [r7, #20]
 800e7aa:	f002 fc23 	bl	8010ff4 <tcp_output>
  return;
 800e7ae:	e001      	b.n	800e7b4 <tcp_listen_input+0x190>
    return;
 800e7b0:	bf00      	nop
 800e7b2:	e000      	b.n	800e7b6 <tcp_listen_input+0x192>
  return;
 800e7b4:	bf00      	nop
}
 800e7b6:	3718      	adds	r7, #24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	2000ba58 	.word	0x2000ba58
 800e7c0:	2000ba50 	.word	0x2000ba50
 800e7c4:	2000ba56 	.word	0x2000ba56
 800e7c8:	2000ba4c 	.word	0x2000ba4c
 800e7cc:	2000ba3c 	.word	0x2000ba3c
 800e7d0:	200082d4 	.word	0x200082d4
 800e7d4:	200082d8 	.word	0x200082d8
 800e7d8:	200082c4 	.word	0x200082c4
 800e7dc:	2000ba20 	.word	0x2000ba20
 800e7e0:	2000ba28 	.word	0x2000ba28

0800e7e4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af02      	add	r7, sp, #8
 800e7ea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e7ec:	4b29      	ldr	r3, [pc, #164]	; (800e894 <tcp_timewait_input+0xb0>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	f003 0304 	and.w	r3, r3, #4
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d146      	bne.n	800e886 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e7f8:	4b26      	ldr	r3, [pc, #152]	; (800e894 <tcp_timewait_input+0xb0>)
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	f003 0302 	and.w	r3, r3, #2
 800e800:	2b00      	cmp	r3, #0
 800e802:	d027      	beq.n	800e854 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e804:	4b24      	ldr	r3, [pc, #144]	; (800e898 <tcp_timewait_input+0xb4>)
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	2b00      	cmp	r3, #0
 800e810:	db2a      	blt.n	800e868 <tcp_timewait_input+0x84>
 800e812:	4b21      	ldr	r3, [pc, #132]	; (800e898 <tcp_timewait_input+0xb4>)
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e81a:	6879      	ldr	r1, [r7, #4]
 800e81c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e81e:	440b      	add	r3, r1
 800e820:	1ad3      	subs	r3, r2, r3
 800e822:	2b00      	cmp	r3, #0
 800e824:	dc20      	bgt.n	800e868 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e826:	4b1d      	ldr	r3, [pc, #116]	; (800e89c <tcp_timewait_input+0xb8>)
 800e828:	6818      	ldr	r0, [r3, #0]
 800e82a:	4b1d      	ldr	r3, [pc, #116]	; (800e8a0 <tcp_timewait_input+0xbc>)
 800e82c:	881b      	ldrh	r3, [r3, #0]
 800e82e:	461a      	mov	r2, r3
 800e830:	4b19      	ldr	r3, [pc, #100]	; (800e898 <tcp_timewait_input+0xb4>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e836:	4b1b      	ldr	r3, [pc, #108]	; (800e8a4 <tcp_timewait_input+0xc0>)
 800e838:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e83a:	885b      	ldrh	r3, [r3, #2]
 800e83c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e83e:	4a19      	ldr	r2, [pc, #100]	; (800e8a4 <tcp_timewait_input+0xc0>)
 800e840:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e842:	8812      	ldrh	r2, [r2, #0]
 800e844:	b292      	uxth	r2, r2
 800e846:	9201      	str	r2, [sp, #4]
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	4b17      	ldr	r3, [pc, #92]	; (800e8a8 <tcp_timewait_input+0xc4>)
 800e84c:	4a17      	ldr	r2, [pc, #92]	; (800e8ac <tcp_timewait_input+0xc8>)
 800e84e:	f002 fe55 	bl	80114fc <tcp_rst>
      return;
 800e852:	e01b      	b.n	800e88c <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800e854:	4b0f      	ldr	r3, [pc, #60]	; (800e894 <tcp_timewait_input+0xb0>)
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	f003 0301 	and.w	r3, r3, #1
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d003      	beq.n	800e868 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e860:	4b13      	ldr	r3, [pc, #76]	; (800e8b0 <tcp_timewait_input+0xcc>)
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e868:	4b0d      	ldr	r3, [pc, #52]	; (800e8a0 <tcp_timewait_input+0xbc>)
 800e86a:	881b      	ldrh	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00c      	beq.n	800e88a <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	7e9b      	ldrb	r3, [r3, #26]
 800e874:	f043 0302 	orr.w	r3, r3, #2
 800e878:	b2da      	uxtb	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f002 fbb8 	bl	8010ff4 <tcp_output>
  }
  return;
 800e884:	e001      	b.n	800e88a <tcp_timewait_input+0xa6>
    return;
 800e886:	bf00      	nop
 800e888:	e000      	b.n	800e88c <tcp_timewait_input+0xa8>
  return;
 800e88a:	bf00      	nop
}
 800e88c:	3708      	adds	r7, #8
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	2000ba58 	.word	0x2000ba58
 800e898:	2000ba4c 	.word	0x2000ba4c
 800e89c:	2000ba50 	.word	0x2000ba50
 800e8a0:	2000ba56 	.word	0x2000ba56
 800e8a4:	2000ba3c 	.word	0x2000ba3c
 800e8a8:	200082d4 	.word	0x200082d4
 800e8ac:	200082d8 	.word	0x200082d8
 800e8b0:	2000ba14 	.word	0x2000ba14

0800e8b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b08a      	sub	sp, #40	; 0x28
 800e8b8:	af02      	add	r7, sp, #8
 800e8ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e8c4:	4b93      	ldr	r3, [pc, #588]	; (800eb14 <tcp_process+0x260>)
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	f003 0304 	and.w	r3, r3, #4
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d04e      	beq.n	800e96e <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	7d1b      	ldrb	r3, [r3, #20]
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d108      	bne.n	800e8ea <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8dc:	4b8e      	ldr	r3, [pc, #568]	; (800eb18 <tcp_process+0x264>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d123      	bne.n	800e92c <tcp_process+0x78>
        acceptable = 1;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	76fb      	strb	r3, [r7, #27]
 800e8e8:	e020      	b.n	800e92c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8ee:	4b8b      	ldr	r3, [pc, #556]	; (800eb1c <tcp_process+0x268>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d102      	bne.n	800e8fc <tcp_process+0x48>
        acceptable = 1;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	76fb      	strb	r3, [r7, #27]
 800e8fa:	e017      	b.n	800e92c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e8fc:	4b87      	ldr	r3, [pc, #540]	; (800eb1c <tcp_process+0x268>)
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e904:	1ad3      	subs	r3, r2, r3
 800e906:	2b00      	cmp	r3, #0
 800e908:	db10      	blt.n	800e92c <tcp_process+0x78>
 800e90a:	4b84      	ldr	r3, [pc, #528]	; (800eb1c <tcp_process+0x268>)
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e912:	6879      	ldr	r1, [r7, #4]
 800e914:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e916:	440b      	add	r3, r1
 800e918:	1ad3      	subs	r3, r2, r3
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	dc06      	bgt.n	800e92c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	7e9b      	ldrb	r3, [r3, #26]
 800e922:	f043 0302 	orr.w	r3, r3, #2
 800e926:	b2da      	uxtb	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e92c:	7efb      	ldrb	r3, [r7, #27]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d01b      	beq.n	800e96a <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	7d1b      	ldrb	r3, [r3, #20]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d106      	bne.n	800e948 <tcp_process+0x94>
 800e93a:	4b79      	ldr	r3, [pc, #484]	; (800eb20 <tcp_process+0x26c>)
 800e93c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e940:	4978      	ldr	r1, [pc, #480]	; (800eb24 <tcp_process+0x270>)
 800e942:	4879      	ldr	r0, [pc, #484]	; (800eb28 <tcp_process+0x274>)
 800e944:	f006 f888 	bl	8014a58 <iprintf>
      recv_flags |= TF_RESET;
 800e948:	4b78      	ldr	r3, [pc, #480]	; (800eb2c <tcp_process+0x278>)
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	f043 0308 	orr.w	r3, r3, #8
 800e950:	b2da      	uxtb	r2, r3
 800e952:	4b76      	ldr	r3, [pc, #472]	; (800eb2c <tcp_process+0x278>)
 800e954:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	7e9b      	ldrb	r3, [r3, #26]
 800e95a:	f023 0301 	bic.w	r3, r3, #1
 800e95e:	b2da      	uxtb	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800e964:	f06f 030d 	mvn.w	r3, #13
 800e968:	e348      	b.n	800effc <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e96a:	2300      	movs	r3, #0
 800e96c:	e346      	b.n	800effc <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e96e:	4b69      	ldr	r3, [pc, #420]	; (800eb14 <tcp_process+0x260>)
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	f003 0302 	and.w	r3, r3, #2
 800e976:	2b00      	cmp	r3, #0
 800e978:	d010      	beq.n	800e99c <tcp_process+0xe8>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	7d1b      	ldrb	r3, [r3, #20]
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d00c      	beq.n	800e99c <tcp_process+0xe8>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	7d1b      	ldrb	r3, [r3, #20]
 800e986:	2b03      	cmp	r3, #3
 800e988:	d008      	beq.n	800e99c <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	7e9b      	ldrb	r3, [r3, #26]
 800e98e:	f043 0302 	orr.w	r3, r3, #2
 800e992:	b2da      	uxtb	r2, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800e998:	2300      	movs	r3, #0
 800e99a:	e32f      	b.n	800effc <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	7e9b      	ldrb	r3, [r3, #26]
 800e9a0:	f003 0310 	and.w	r3, r3, #16
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d103      	bne.n	800e9b0 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e9a8:	4b61      	ldr	r3, [pc, #388]	; (800eb30 <tcp_process+0x27c>)
 800e9aa:	681a      	ldr	r2, [r3, #0]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f001 fbd9 	bl	8010170 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	7d1b      	ldrb	r3, [r3, #20]
 800e9c2:	3b02      	subs	r3, #2
 800e9c4:	2b07      	cmp	r3, #7
 800e9c6:	f200 8309 	bhi.w	800efdc <tcp_process+0x728>
 800e9ca:	a201      	add	r2, pc, #4	; (adr r2, 800e9d0 <tcp_process+0x11c>)
 800e9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d0:	0800e9f1 	.word	0x0800e9f1
 800e9d4:	0800ebe7 	.word	0x0800ebe7
 800e9d8:	0800ed3f 	.word	0x0800ed3f
 800e9dc:	0800ed69 	.word	0x0800ed69
 800e9e0:	0800ee8b 	.word	0x0800ee8b
 800e9e4:	0800ed3f 	.word	0x0800ed3f
 800e9e8:	0800ef17 	.word	0x0800ef17
 800e9ec:	0800efa7 	.word	0x0800efa7
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e9f0:	4b48      	ldr	r3, [pc, #288]	; (800eb14 <tcp_process+0x260>)
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	f003 0310 	and.w	r3, r3, #16
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f000 80ca 	beq.w	800eb92 <tcp_process+0x2de>
 800e9fe:	4b45      	ldr	r3, [pc, #276]	; (800eb14 <tcp_process+0x260>)
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	f003 0302 	and.w	r3, r3, #2
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	f000 80c3 	beq.w	800eb92 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea10:	1c5a      	adds	r2, r3, #1
 800ea12:	4b41      	ldr	r3, [pc, #260]	; (800eb18 <tcp_process+0x264>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	f040 80bb 	bne.w	800eb92 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 800ea1c:	4b3f      	ldr	r3, [pc, #252]	; (800eb1c <tcp_process+0x268>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	1c5a      	adds	r2, r3, #1
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800ea2e:	4b3a      	ldr	r3, [pc, #232]	; (800eb18 <tcp_process+0x264>)
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800ea36:	4b3f      	ldr	r3, [pc, #252]	; (800eb34 <tcp_process+0x280>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	89db      	ldrh	r3, [r3, #14]
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ea50:	4b32      	ldr	r3, [pc, #200]	; (800eb1c <tcp_process+0x268>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	1e5a      	subs	r2, r3, #1
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2204      	movs	r2, #4
 800ea5e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	3304      	adds	r3, #4
 800ea68:	4619      	mov	r1, r3
 800ea6a:	4610      	mov	r0, r2
 800ea6c:	f7ff f95a 	bl	800dd24 <tcp_eff_send_mss_impl>
 800ea70:	4603      	mov	r3, r0
 800ea72:	461a      	mov	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea7c:	005b      	lsls	r3, r3, #1
 800ea7e:	f241 121c 	movw	r2, #4380	; 0x111c
 800ea82:	429a      	cmp	r2, r3
 800ea84:	bf38      	it	cc
 800ea86:	461a      	movcc	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	bf28      	it	cs
 800ea92:	4613      	movcs	r3, r2
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d106      	bne.n	800eab4 <tcp_process+0x200>
 800eaa6:	4b1e      	ldr	r3, [pc, #120]	; (800eb20 <tcp_process+0x26c>)
 800eaa8:	f240 321a 	movw	r2, #794	; 0x31a
 800eaac:	4922      	ldr	r1, [pc, #136]	; (800eb38 <tcp_process+0x284>)
 800eaae:	481e      	ldr	r0, [pc, #120]	; (800eb28 <tcp_process+0x274>)
 800eab0:	f005 ffd2 	bl	8014a58 <iprintf>
      --pcb->snd_queuelen;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eaba:	3b01      	subs	r3, #1
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eac8:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800eaca:	69fb      	ldr	r3, [r7, #28]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d111      	bne.n	800eaf4 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ead4:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d106      	bne.n	800eaea <tcp_process+0x236>
 800eadc:	4b10      	ldr	r3, [pc, #64]	; (800eb20 <tcp_process+0x26c>)
 800eade:	f240 3222 	movw	r2, #802	; 0x322
 800eae2:	4916      	ldr	r1, [pc, #88]	; (800eb3c <tcp_process+0x288>)
 800eae4:	4810      	ldr	r0, [pc, #64]	; (800eb28 <tcp_process+0x274>)
 800eae6:	f005 ffb7 	bl	8014a58 <iprintf>
        pcb->unsent = rseg->next;
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	669a      	str	r2, [r3, #104]	; 0x68
 800eaf2:	e003      	b.n	800eafc <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800eafc:	69f8      	ldr	r0, [r7, #28]
 800eafe:	f7fe fded 	bl	800d6dc <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d11a      	bne.n	800eb40 <tcp_process+0x28c>
        pcb->rtime = -1;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb10:	861a      	strh	r2, [r3, #48]	; 0x30
 800eb12:	e01c      	b.n	800eb4e <tcp_process+0x29a>
 800eb14:	2000ba58 	.word	0x2000ba58
 800eb18:	2000ba50 	.word	0x2000ba50
 800eb1c:	2000ba4c 	.word	0x2000ba4c
 800eb20:	08016ebc 	.word	0x08016ebc
 800eb24:	08017074 	.word	0x08017074
 800eb28:	08016f00 	.word	0x08016f00
 800eb2c:	2000ba59 	.word	0x2000ba59
 800eb30:	2000ba14 	.word	0x2000ba14
 800eb34:	2000ba3c 	.word	0x2000ba3c
 800eb38:	08017094 	.word	0x08017094
 800eb3c:	080170ac 	.word	0x080170ac
      } else {
        pcb->rtime = 0;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d00a      	beq.n	800eb6e <tcp_process+0x2ba>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	6910      	ldr	r0, [r2, #16]
 800eb62:	2200      	movs	r2, #0
 800eb64:	6879      	ldr	r1, [r7, #4]
 800eb66:	4798      	blx	r3
 800eb68:	4603      	mov	r3, r0
 800eb6a:	76bb      	strb	r3, [r7, #26]
 800eb6c:	e001      	b.n	800eb72 <tcp_process+0x2be>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800eb72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb76:	f113 0f0d 	cmn.w	r3, #13
 800eb7a:	d102      	bne.n	800eb82 <tcp_process+0x2ce>
        return ERR_ABRT;
 800eb7c:	f06f 030c 	mvn.w	r3, #12
 800eb80:	e23c      	b.n	800effc <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	7e9b      	ldrb	r3, [r3, #26]
 800eb86:	f043 0302 	orr.w	r3, r3, #2
 800eb8a:	b2da      	uxtb	r2, r3
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800eb90:	e226      	b.n	800efe0 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 800eb92:	4b93      	ldr	r3, [pc, #588]	; (800ede0 <tcp_process+0x52c>)
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	f003 0310 	and.w	r3, r3, #16
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f000 8220 	beq.w	800efe0 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eba0:	4b90      	ldr	r3, [pc, #576]	; (800ede4 <tcp_process+0x530>)
 800eba2:	6818      	ldr	r0, [r3, #0]
 800eba4:	4b90      	ldr	r3, [pc, #576]	; (800ede8 <tcp_process+0x534>)
 800eba6:	881b      	ldrh	r3, [r3, #0]
 800eba8:	461a      	mov	r2, r3
 800ebaa:	4b90      	ldr	r3, [pc, #576]	; (800edec <tcp_process+0x538>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebb0:	4b8f      	ldr	r3, [pc, #572]	; (800edf0 <tcp_process+0x53c>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebb4:	885b      	ldrh	r3, [r3, #2]
 800ebb6:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebb8:	4a8d      	ldr	r2, [pc, #564]	; (800edf0 <tcp_process+0x53c>)
 800ebba:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebbc:	8812      	ldrh	r2, [r2, #0]
 800ebbe:	b292      	uxth	r2, r2
 800ebc0:	9201      	str	r2, [sp, #4]
 800ebc2:	9300      	str	r3, [sp, #0]
 800ebc4:	4b8b      	ldr	r3, [pc, #556]	; (800edf4 <tcp_process+0x540>)
 800ebc6:	4a8c      	ldr	r2, [pc, #560]	; (800edf8 <tcp_process+0x544>)
 800ebc8:	f002 fc98 	bl	80114fc <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ebd2:	2b05      	cmp	r3, #5
 800ebd4:	f200 8204 	bhi.w	800efe0 <tcp_process+0x72c>
        pcb->rtime = 0;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f002 fd02 	bl	80115e8 <tcp_rexmit_rto>
    break;
 800ebe4:	e1fc      	b.n	800efe0 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800ebe6:	4b7e      	ldr	r3, [pc, #504]	; (800ede0 <tcp_process+0x52c>)
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	f003 0310 	and.w	r3, r3, #16
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f000 8091 	beq.w	800ed16 <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800ebf4:	4b7b      	ldr	r3, [pc, #492]	; (800ede4 <tcp_process+0x530>)
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebfc:	1ad3      	subs	r3, r2, r3
 800ebfe:	3b01      	subs	r3, #1
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	db71      	blt.n	800ece8 <tcp_process+0x434>
 800ec04:	4b77      	ldr	r3, [pc, #476]	; (800ede4 <tcp_process+0x530>)
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec0c:	1ad3      	subs	r3, r2, r3
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	dc6a      	bgt.n	800ece8 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2204      	movs	r2, #4
 800ec16:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00b      	beq.n	800ec38 <tcp_process+0x384>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec24:	699b      	ldr	r3, [r3, #24]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d106      	bne.n	800ec38 <tcp_process+0x384>
 800ec2a:	4b74      	ldr	r3, [pc, #464]	; (800edfc <tcp_process+0x548>)
 800ec2c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ec30:	4973      	ldr	r1, [pc, #460]	; (800ee00 <tcp_process+0x54c>)
 800ec32:	4874      	ldr	r0, [pc, #464]	; (800ee04 <tcp_process+0x550>)
 800ec34:	f005 ff10 	bl	8014a58 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d102      	bne.n	800ec46 <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800ec40:	23fa      	movs	r3, #250	; 0xfa
 800ec42:	76bb      	strb	r3, [r7, #26]
 800ec44:	e011      	b.n	800ec6a <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec4a:	699b      	ldr	r3, [r3, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d00a      	beq.n	800ec66 <tcp_process+0x3b2>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec54:	699b      	ldr	r3, [r3, #24]
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	6910      	ldr	r0, [r2, #16]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	6879      	ldr	r1, [r7, #4]
 800ec5e:	4798      	blx	r3
 800ec60:	4603      	mov	r3, r0
 800ec62:	76bb      	strb	r3, [r7, #26]
 800ec64:	e001      	b.n	800ec6a <tcp_process+0x3b6>
 800ec66:	23f0      	movs	r3, #240	; 0xf0
 800ec68:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800ec6a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d00a      	beq.n	800ec88 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800ec72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec76:	f113 0f0d 	cmn.w	r3, #13
 800ec7a:	d002      	beq.n	800ec82 <tcp_process+0x3ce>
            tcp_abort(pcb);
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f7fd ff57 	bl	800cb30 <tcp_abort>
          }
          return ERR_ABRT;
 800ec82:	f06f 030c 	mvn.w	r3, #12
 800ec86:	e1b9      	b.n	800effc <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f000 fa3d 	bl	800f108 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800ec8e:	4b5e      	ldr	r3, [pc, #376]	; (800ee08 <tcp_process+0x554>)
 800ec90:	881b      	ldrh	r3, [r3, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d005      	beq.n	800eca2 <tcp_process+0x3ee>
          recv_acked--;
 800ec96:	4b5c      	ldr	r3, [pc, #368]	; (800ee08 <tcp_process+0x554>)
 800ec98:	881b      	ldrh	r3, [r3, #0]
 800ec9a:	3b01      	subs	r3, #1
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	4b5a      	ldr	r3, [pc, #360]	; (800ee08 <tcp_process+0x554>)
 800eca0:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eca6:	005b      	lsls	r3, r3, #1
 800eca8:	f241 121c 	movw	r2, #4380	; 0x111c
 800ecac:	429a      	cmp	r2, r3
 800ecae:	bf38      	it	cc
 800ecb0:	461a      	movcc	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	bf28      	it	cs
 800ecbc:	4613      	movcs	r3, r2
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800ecc6:	4b51      	ldr	r3, [pc, #324]	; (800ee0c <tcp_process+0x558>)
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	f003 0320 	and.w	r3, r3, #32
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d034      	beq.n	800ed3c <tcp_process+0x488>
          tcp_ack_now(pcb);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	7e9b      	ldrb	r3, [r3, #26]
 800ecd6:	f043 0302 	orr.w	r3, r3, #2
 800ecda:	b2da      	uxtb	r2, r3
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2207      	movs	r2, #7
 800ece4:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800ece6:	e029      	b.n	800ed3c <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ece8:	4b3e      	ldr	r3, [pc, #248]	; (800ede4 <tcp_process+0x530>)
 800ecea:	6818      	ldr	r0, [r3, #0]
 800ecec:	4b3e      	ldr	r3, [pc, #248]	; (800ede8 <tcp_process+0x534>)
 800ecee:	881b      	ldrh	r3, [r3, #0]
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	4b3e      	ldr	r3, [pc, #248]	; (800edec <tcp_process+0x538>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecf8:	4b3d      	ldr	r3, [pc, #244]	; (800edf0 <tcp_process+0x53c>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecfc:	885b      	ldrh	r3, [r3, #2]
 800ecfe:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed00:	4a3b      	ldr	r2, [pc, #236]	; (800edf0 <tcp_process+0x53c>)
 800ed02:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed04:	8812      	ldrh	r2, [r2, #0]
 800ed06:	b292      	uxth	r2, r2
 800ed08:	9201      	str	r2, [sp, #4]
 800ed0a:	9300      	str	r3, [sp, #0]
 800ed0c:	4b39      	ldr	r3, [pc, #228]	; (800edf4 <tcp_process+0x540>)
 800ed0e:	4a3a      	ldr	r2, [pc, #232]	; (800edf8 <tcp_process+0x544>)
 800ed10:	f002 fbf4 	bl	80114fc <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800ed14:	e166      	b.n	800efe4 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ed16:	4b32      	ldr	r3, [pc, #200]	; (800ede0 <tcp_process+0x52c>)
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	f003 0302 	and.w	r3, r3, #2
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f000 8160 	beq.w	800efe4 <tcp_process+0x730>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed28:	1e5a      	subs	r2, r3, #1
 800ed2a:	4b30      	ldr	r3, [pc, #192]	; (800edec <tcp_process+0x538>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	f040 8158 	bne.w	800efe4 <tcp_process+0x730>
      tcp_rexmit(pcb);
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f002 fc8d 	bl	8011654 <tcp_rexmit>
    break;
 800ed3a:	e153      	b.n	800efe4 <tcp_process+0x730>
 800ed3c:	e152      	b.n	800efe4 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 f9e2 	bl	800f108 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ed44:	4b31      	ldr	r3, [pc, #196]	; (800ee0c <tcp_process+0x558>)
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	f003 0320 	and.w	r3, r3, #32
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	f000 814b 	beq.w	800efe8 <tcp_process+0x734>
      tcp_ack_now(pcb);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	7e9b      	ldrb	r3, [r3, #26]
 800ed56:	f043 0302 	orr.w	r3, r3, #2
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2207      	movs	r2, #7
 800ed64:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ed66:	e13f      	b.n	800efe8 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 f9cd 	bl	800f108 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ed6e:	4b27      	ldr	r3, [pc, #156]	; (800ee0c <tcp_process+0x558>)
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	f003 0320 	and.w	r3, r3, #32
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d070      	beq.n	800ee5c <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ed7a:	4b19      	ldr	r3, [pc, #100]	; (800ede0 <tcp_process+0x52c>)
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	f003 0310 	and.w	r3, r3, #16
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d05f      	beq.n	800ee46 <tcp_process+0x592>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed8a:	4b16      	ldr	r3, [pc, #88]	; (800ede4 <tcp_process+0x530>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d159      	bne.n	800ee46 <tcp_process+0x592>
          pcb->unsent == NULL) {
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d155      	bne.n	800ee46 <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	7e9b      	ldrb	r3, [r3, #26]
 800ed9e:	f043 0302 	orr.w	r3, r3, #2
 800eda2:	b2da      	uxtb	r2, r3
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f7fe fee7 	bl	800db7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800edae:	4b18      	ldr	r3, [pc, #96]	; (800ee10 <tcp_process+0x55c>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d105      	bne.n	800edc4 <tcp_process+0x510>
 800edb8:	4b15      	ldr	r3, [pc, #84]	; (800ee10 <tcp_process+0x55c>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	4a14      	ldr	r2, [pc, #80]	; (800ee10 <tcp_process+0x55c>)
 800edc0:	6013      	str	r3, [r2, #0]
 800edc2:	e02d      	b.n	800ee20 <tcp_process+0x56c>
 800edc4:	4b12      	ldr	r3, [pc, #72]	; (800ee10 <tcp_process+0x55c>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	617b      	str	r3, [r7, #20]
 800edca:	e026      	b.n	800ee1a <tcp_process+0x566>
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d11e      	bne.n	800ee14 <tcp_process+0x560>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	68da      	ldr	r2, [r3, #12]
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	60da      	str	r2, [r3, #12]
 800edde:	e01f      	b.n	800ee20 <tcp_process+0x56c>
 800ede0:	2000ba58 	.word	0x2000ba58
 800ede4:	2000ba50 	.word	0x2000ba50
 800ede8:	2000ba56 	.word	0x2000ba56
 800edec:	2000ba4c 	.word	0x2000ba4c
 800edf0:	2000ba3c 	.word	0x2000ba3c
 800edf4:	200082d4 	.word	0x200082d4
 800edf8:	200082d8 	.word	0x200082d8
 800edfc:	08016ebc 	.word	0x08016ebc
 800ee00:	080170c0 	.word	0x080170c0
 800ee04:	08016f00 	.word	0x08016f00
 800ee08:	2000ba54 	.word	0x2000ba54
 800ee0c:	2000ba59 	.word	0x2000ba59
 800ee10:	2000ba20 	.word	0x2000ba20
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	617b      	str	r3, [r7, #20]
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d1d5      	bne.n	800edcc <tcp_process+0x518>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	60da      	str	r2, [r3, #12]
 800ee26:	4b77      	ldr	r3, [pc, #476]	; (800f004 <tcp_process+0x750>)
 800ee28:	2201      	movs	r2, #1
 800ee2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	220a      	movs	r2, #10
 800ee30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ee32:	4b75      	ldr	r3, [pc, #468]	; (800f008 <tcp_process+0x754>)
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	60da      	str	r2, [r3, #12]
 800ee3a:	4a73      	ldr	r2, [pc, #460]	; (800f008 <tcp_process+0x754>)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6013      	str	r3, [r2, #0]
 800ee40:	f002 fda4 	bl	801198c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800ee44:	e0d2      	b.n	800efec <tcp_process+0x738>
        tcp_ack_now(pcb);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	7e9b      	ldrb	r3, [r3, #26]
 800ee4a:	f043 0302 	orr.w	r3, r3, #2
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2208      	movs	r2, #8
 800ee58:	751a      	strb	r2, [r3, #20]
    break;
 800ee5a:	e0c7      	b.n	800efec <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee5c:	4b6b      	ldr	r3, [pc, #428]	; (800f00c <tcp_process+0x758>)
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	f003 0310 	and.w	r3, r3, #16
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f000 80c1 	beq.w	800efec <tcp_process+0x738>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee6e:	4b68      	ldr	r3, [pc, #416]	; (800f010 <tcp_process+0x75c>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	f040 80ba 	bne.w	800efec <tcp_process+0x738>
               pcb->unsent == NULL) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f040 80b5 	bne.w	800efec <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2206      	movs	r2, #6
 800ee86:	751a      	strb	r2, [r3, #20]
    break;
 800ee88:	e0b0      	b.n	800efec <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 f93c 	bl	800f108 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ee90:	4b60      	ldr	r3, [pc, #384]	; (800f014 <tcp_process+0x760>)
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	f003 0320 	and.w	r3, r3, #32
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f000 80a9 	beq.w	800eff0 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	7e9b      	ldrb	r3, [r3, #26]
 800eea2:	f043 0302 	orr.w	r3, r3, #2
 800eea6:	b2da      	uxtb	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7fe fe65 	bl	800db7c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800eeb2:	4b59      	ldr	r3, [pc, #356]	; (800f018 <tcp_process+0x764>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d105      	bne.n	800eec8 <tcp_process+0x614>
 800eebc:	4b56      	ldr	r3, [pc, #344]	; (800f018 <tcp_process+0x764>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	4a55      	ldr	r2, [pc, #340]	; (800f018 <tcp_process+0x764>)
 800eec4:	6013      	str	r3, [r2, #0]
 800eec6:	e013      	b.n	800eef0 <tcp_process+0x63c>
 800eec8:	4b53      	ldr	r3, [pc, #332]	; (800f018 <tcp_process+0x764>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	613b      	str	r3, [r7, #16]
 800eece:	e00c      	b.n	800eeea <tcp_process+0x636>
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	68db      	ldr	r3, [r3, #12]
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d104      	bne.n	800eee4 <tcp_process+0x630>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	68da      	ldr	r2, [r3, #12]
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	60da      	str	r2, [r3, #12]
 800eee2:	e005      	b.n	800eef0 <tcp_process+0x63c>
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	613b      	str	r3, [r7, #16]
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1ef      	bne.n	800eed0 <tcp_process+0x61c>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	60da      	str	r2, [r3, #12]
 800eef6:	4b43      	ldr	r3, [pc, #268]	; (800f004 <tcp_process+0x750>)
 800eef8:	2201      	movs	r2, #1
 800eefa:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	220a      	movs	r2, #10
 800ef00:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800ef02:	4b41      	ldr	r3, [pc, #260]	; (800f008 <tcp_process+0x754>)
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	60da      	str	r2, [r3, #12]
 800ef0a:	4a3f      	ldr	r2, [pc, #252]	; (800f008 <tcp_process+0x754>)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6013      	str	r3, [r2, #0]
 800ef10:	f002 fd3c 	bl	801198c <tcp_timer_needed>
    }
    break;
 800ef14:	e06c      	b.n	800eff0 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 f8f6 	bl	800f108 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ef1c:	4b3b      	ldr	r3, [pc, #236]	; (800f00c <tcp_process+0x758>)
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	f003 0310 	and.w	r3, r3, #16
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d065      	beq.n	800eff4 <tcp_process+0x740>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef2c:	4b38      	ldr	r3, [pc, #224]	; (800f010 <tcp_process+0x75c>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d15f      	bne.n	800eff4 <tcp_process+0x740>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d15b      	bne.n	800eff4 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7fe fe1d 	bl	800db7c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ef42:	4b35      	ldr	r3, [pc, #212]	; (800f018 <tcp_process+0x764>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d105      	bne.n	800ef58 <tcp_process+0x6a4>
 800ef4c:	4b32      	ldr	r3, [pc, #200]	; (800f018 <tcp_process+0x764>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	4a31      	ldr	r2, [pc, #196]	; (800f018 <tcp_process+0x764>)
 800ef54:	6013      	str	r3, [r2, #0]
 800ef56:	e013      	b.n	800ef80 <tcp_process+0x6cc>
 800ef58:	4b2f      	ldr	r3, [pc, #188]	; (800f018 <tcp_process+0x764>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	60fb      	str	r3, [r7, #12]
 800ef5e:	e00c      	b.n	800ef7a <tcp_process+0x6c6>
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d104      	bne.n	800ef74 <tcp_process+0x6c0>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	68da      	ldr	r2, [r3, #12]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	60da      	str	r2, [r3, #12]
 800ef72:	e005      	b.n	800ef80 <tcp_process+0x6cc>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1ef      	bne.n	800ef60 <tcp_process+0x6ac>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	60da      	str	r2, [r3, #12]
 800ef86:	4b1f      	ldr	r3, [pc, #124]	; (800f004 <tcp_process+0x750>)
 800ef88:	2201      	movs	r2, #1
 800ef8a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	220a      	movs	r2, #10
 800ef90:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800ef92:	4b1d      	ldr	r3, [pc, #116]	; (800f008 <tcp_process+0x754>)
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	60da      	str	r2, [r3, #12]
 800ef9a:	4a1b      	ldr	r2, [pc, #108]	; (800f008 <tcp_process+0x754>)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6013      	str	r3, [r2, #0]
 800efa0:	f002 fcf4 	bl	801198c <tcp_timer_needed>
    }
    break;
 800efa4:	e026      	b.n	800eff4 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 f8ae 	bl	800f108 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800efac:	4b17      	ldr	r3, [pc, #92]	; (800f00c <tcp_process+0x758>)
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	f003 0310 	and.w	r3, r3, #16
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d01f      	beq.n	800eff8 <tcp_process+0x744>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efbc:	4b14      	ldr	r3, [pc, #80]	; (800f010 <tcp_process+0x75c>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d119      	bne.n	800eff8 <tcp_process+0x744>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d115      	bne.n	800eff8 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800efcc:	4b11      	ldr	r3, [pc, #68]	; (800f014 <tcp_process+0x760>)
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	f043 0310 	orr.w	r3, r3, #16
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	4b0f      	ldr	r3, [pc, #60]	; (800f014 <tcp_process+0x760>)
 800efd8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800efda:	e00d      	b.n	800eff8 <tcp_process+0x744>
  default:
    break;
 800efdc:	bf00      	nop
 800efde:	e00c      	b.n	800effa <tcp_process+0x746>
    break;
 800efe0:	bf00      	nop
 800efe2:	e00a      	b.n	800effa <tcp_process+0x746>
    break;
 800efe4:	bf00      	nop
 800efe6:	e008      	b.n	800effa <tcp_process+0x746>
    break;
 800efe8:	bf00      	nop
 800efea:	e006      	b.n	800effa <tcp_process+0x746>
    break;
 800efec:	bf00      	nop
 800efee:	e004      	b.n	800effa <tcp_process+0x746>
    break;
 800eff0:	bf00      	nop
 800eff2:	e002      	b.n	800effa <tcp_process+0x746>
    break;
 800eff4:	bf00      	nop
 800eff6:	e000      	b.n	800effa <tcp_process+0x746>
    break;
 800eff8:	bf00      	nop
  }
  return ERR_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3720      	adds	r7, #32
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	2000ba28 	.word	0x2000ba28
 800f008:	2000ba24 	.word	0x2000ba24
 800f00c:	2000ba58 	.word	0x2000ba58
 800f010:	2000ba50 	.word	0x2000ba50
 800f014:	2000ba59 	.word	0x2000ba59
 800f018:	2000ba20 	.word	0x2000ba20

0800f01c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f01c:	b590      	push	{r4, r7, lr}
 800f01e:	b085      	sub	sp, #20
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	899b      	ldrh	r3, [r3, #12]
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fb fe5e 	bl	800acf0 <lwip_htons>
 800f034:	4603      	mov	r3, r0
 800f036:	f003 0301 	and.w	r3, r3, #1
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d027      	beq.n	800f08e <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f03e:	6838      	ldr	r0, [r7, #0]
 800f040:	f7fe fb37 	bl	800d6b2 <tcp_segs_free>
    next = NULL;
 800f044:	2300      	movs	r3, #0
 800f046:	603b      	str	r3, [r7, #0]
 800f048:	e055      	b.n	800f0f6 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	68db      	ldr	r3, [r3, #12]
 800f04e:	899b      	ldrh	r3, [r3, #12]
 800f050:	b29b      	uxth	r3, r3
 800f052:	4618      	mov	r0, r3
 800f054:	f7fb fe4c 	bl	800acf0 <lwip_htons>
 800f058:	4603      	mov	r3, r0
 800f05a:	f003 0301 	and.w	r3, r3, #1
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d00d      	beq.n	800f07e <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	899b      	ldrh	r3, [r3, #12]
 800f068:	b29c      	uxth	r4, r3
 800f06a:	2001      	movs	r0, #1
 800f06c:	f7fb fe40 	bl	800acf0 <lwip_htons>
 800f070:	4603      	mov	r3, r0
 800f072:	461a      	mov	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	4322      	orrs	r2, r4
 800f07a:	b292      	uxth	r2, r2
 800f07c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f7fe fb27 	bl	800d6dc <tcp_seg_free>
    while (next &&
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00e      	beq.n	800f0b2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	891b      	ldrh	r3, [r3, #8]
 800f098:	461a      	mov	r2, r3
 800f09a:	4b1a      	ldr	r3, [pc, #104]	; (800f104 <tcp_oos_insert_segment+0xe8>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	441a      	add	r2, r3
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	6839      	ldr	r1, [r7, #0]
 800f0a8:	8909      	ldrh	r1, [r1, #8]
 800f0aa:	440b      	add	r3, r1
 800f0ac:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	dacb      	bge.n	800f04a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d01e      	beq.n	800f0f6 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	891b      	ldrh	r3, [r3, #8]
 800f0bc:	461a      	mov	r2, r3
 800f0be:	4b11      	ldr	r3, [pc, #68]	; (800f104 <tcp_oos_insert_segment+0xe8>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	441a      	add	r2, r3
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	dd12      	ble.n	800f0f6 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	4b0a      	ldr	r3, [pc, #40]	; (800f104 <tcp_oos_insert_segment+0xe8>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	685a      	ldr	r2, [r3, #4]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	891b      	ldrh	r3, [r3, #8]
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	4610      	mov	r0, r2
 800f0f2:	f7fc fe5f 	bl	800bdb4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	683a      	ldr	r2, [r7, #0]
 800f0fa:	601a      	str	r2, [r3, #0]
}
 800f0fc:	bf00      	nop
 800f0fe:	3714      	adds	r7, #20
 800f100:	46bd      	mov	sp, r7
 800f102:	bd90      	pop	{r4, r7, pc}
 800f104:	2000ba4c 	.word	0x2000ba4c

0800f108 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f10a:	b08d      	sub	sp, #52	; 0x34
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800f110:	2300      	movs	r3, #0
 800f112:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	7d1b      	ldrb	r3, [r3, #20]
 800f118:	2b03      	cmp	r3, #3
 800f11a:	d806      	bhi.n	800f12a <tcp_receive+0x22>
 800f11c:	4b98      	ldr	r3, [pc, #608]	; (800f380 <tcp_receive+0x278>)
 800f11e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f122:	4998      	ldr	r1, [pc, #608]	; (800f384 <tcp_receive+0x27c>)
 800f124:	4898      	ldr	r0, [pc, #608]	; (800f388 <tcp_receive+0x280>)
 800f126:	f005 fc97 	bl	8014a58 <iprintf>

  if (flags & TCP_ACK) {
 800f12a:	4b98      	ldr	r3, [pc, #608]	; (800f38c <tcp_receive+0x284>)
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	f003 0310 	and.w	r3, r3, #16
 800f132:	2b00      	cmp	r3, #0
 800f134:	f000 82c1 	beq.w	800f6ba <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f13e:	461a      	mov	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f144:	4413      	add	r3, r2
 800f146:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f14c:	4b90      	ldr	r3, [pc, #576]	; (800f390 <tcp_receive+0x288>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	2b00      	cmp	r3, #0
 800f154:	db1b      	blt.n	800f18e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f15a:	4b8d      	ldr	r3, [pc, #564]	; (800f390 <tcp_receive+0x288>)
 800f15c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f15e:	429a      	cmp	r2, r3
 800f160:	d106      	bne.n	800f170 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f166:	4b8b      	ldr	r3, [pc, #556]	; (800f394 <tcp_receive+0x28c>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	1ad3      	subs	r3, r2, r3
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	db0e      	blt.n	800f18e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f174:	4b87      	ldr	r3, [pc, #540]	; (800f394 <tcp_receive+0x28c>)
 800f176:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f178:	429a      	cmp	r2, r3
 800f17a:	d141      	bne.n	800f200 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f17c:	4b86      	ldr	r3, [pc, #536]	; (800f398 <tcp_receive+0x290>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	89db      	ldrh	r3, [r3, #14]
 800f182:	b29a      	uxth	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d938      	bls.n	800f200 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f18e:	4b82      	ldr	r3, [pc, #520]	; (800f398 <tcp_receive+0x290>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	89db      	ldrh	r3, [r3, #14]
 800f194:	b29a      	uxth	r2, r3
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d205      	bcs.n	800f1b8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f1b8:	4b75      	ldr	r3, [pc, #468]	; (800f390 <tcp_receive+0x288>)
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800f1c0:	4b74      	ldr	r3, [pc, #464]	; (800f394 <tcp_receive+0x28c>)
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d10d      	bne.n	800f1ee <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d111      	bne.n	800f200 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800f1ec:	e008      	b.n	800f200 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d003      	beq.n	800f200 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f200:	4b64      	ldr	r3, [pc, #400]	; (800f394 <tcp_receive+0x28c>)
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f208:	1ad3      	subs	r3, r2, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	dc53      	bgt.n	800f2b6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800f20e:	4b63      	ldr	r3, [pc, #396]	; (800f39c <tcp_receive+0x294>)
 800f210:	881b      	ldrh	r3, [r3, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d146      	bne.n	800f2a4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f220:	4413      	add	r3, r2
 800f222:	697a      	ldr	r2, [r7, #20]
 800f224:	429a      	cmp	r2, r3
 800f226:	d13d      	bne.n	800f2a4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f22e:	2b00      	cmp	r3, #0
 800f230:	db38      	blt.n	800f2a4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f236:	4b57      	ldr	r3, [pc, #348]	; (800f394 <tcp_receive+0x28c>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d132      	bne.n	800f2a4 <tcp_receive+0x19c>
              found_dupack = 1;
 800f23e:	2301      	movs	r3, #1
 800f240:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f248:	2bff      	cmp	r3, #255	; 0xff
 800f24a:	d007      	beq.n	800f25c <tcp_receive+0x154>
                ++pcb->dupacks;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f252:	3301      	adds	r3, #1
 800f254:	b2da      	uxtb	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f262:	2b03      	cmp	r3, #3
 800f264:	d916      	bls.n	800f294 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f270:	4413      	add	r3, r2
 800f272:	b29a      	uxth	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d912      	bls.n	800f2a4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f288:	4413      	add	r3, r2
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f292:	e007      	b.n	800f2a4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f29a:	2b03      	cmp	r3, #3
 800f29c:	d102      	bne.n	800f2a4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f002 fa28 	bl	80116f4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f040 816a 	bne.w	800f580 <tcp_receive+0x478>
        pcb->dupacks = 0;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f2b4:	e164      	b.n	800f580 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f2b6:	4b37      	ldr	r3, [pc, #220]	; (800f394 <tcp_receive+0x28c>)
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2be:	1ad3      	subs	r3, r2, r3
 800f2c0:	3b01      	subs	r3, #1
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f2c0 8108 	blt.w	800f4d8 <tcp_receive+0x3d0>
 800f2c8:	4b32      	ldr	r3, [pc, #200]	; (800f394 <tcp_receive+0x28c>)
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	f300 8100 	bgt.w	800f4d8 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	7e9b      	ldrb	r3, [r3, #26]
 800f2dc:	f003 0304 	and.w	r3, r3, #4
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00c      	beq.n	800f2fe <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	7e9b      	ldrb	r3, [r3, #26]
 800f2e8:	f023 0304 	bic.w	r3, r3, #4
 800f2ec:	b2da      	uxtb	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2200      	movs	r2, #0
 800f302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f30c:	10db      	asrs	r3, r3, #3
 800f30e:	b21b      	sxth	r3, r3
 800f310:	b29a      	uxth	r2, r3
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f318:	b29b      	uxth	r3, r3
 800f31a:	4413      	add	r3, r2
 800f31c:	b29b      	uxth	r3, r3
 800f31e:	b21a      	sxth	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f32e:	4b19      	ldr	r3, [pc, #100]	; (800f394 <tcp_receive+0x28c>)
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	7d1b      	ldrb	r3, [r3, #20]
 800f33a:	2b03      	cmp	r3, #3
 800f33c:	f240 8095 	bls.w	800f46a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d227      	bcs.n	800f3a0 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f35a:	4413      	add	r3, r2
 800f35c:	b29a      	uxth	r2, r3
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f364:	429a      	cmp	r2, r3
 800f366:	f240 8080 	bls.w	800f46a <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f374:	4413      	add	r3, r2
 800f376:	b29a      	uxth	r2, r3
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f37e:	e074      	b.n	800f46a <tcp_receive+0x362>
 800f380:	08016ebc 	.word	0x08016ebc
 800f384:	080170e0 	.word	0x080170e0
 800f388:	08016f00 	.word	0x08016f00
 800f38c:	2000ba58 	.word	0x2000ba58
 800f390:	2000ba4c 	.word	0x2000ba4c
 800f394:	2000ba50 	.word	0x2000ba50
 800f398:	2000ba3c 	.word	0x2000ba3c
 800f39c:	2000ba56 	.word	0x2000ba56
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3b0:	fb01 f303 	mul.w	r3, r1, r3
 800f3b4:	6879      	ldr	r1, [r7, #4]
 800f3b6:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800f3ba:	fb93 f3f1 	sdiv	r3, r3, r1
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	4413      	add	r3, r2
 800f3c2:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3ca:	8a7a      	ldrh	r2, [r7, #18]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d94c      	bls.n	800f46a <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	8a7a      	ldrh	r2, [r7, #18]
 800f3d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800f3d8:	e047      	b.n	800f46a <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3de:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7fc feeb 	bl	800c1d0 <pbuf_clen>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	429c      	cmp	r4, r3
 800f3fe:	d206      	bcs.n	800f40e <tcp_receive+0x306>
 800f400:	4b70      	ldr	r3, [pc, #448]	; (800f5c4 <tcp_receive+0x4bc>)
 800f402:	f240 429e 	movw	r2, #1182	; 0x49e
 800f406:	4970      	ldr	r1, [pc, #448]	; (800f5c8 <tcp_receive+0x4c0>)
 800f408:	4870      	ldr	r0, [pc, #448]	; (800f5cc <tcp_receive+0x4c4>)
 800f40a:	f005 fb25 	bl	8014a58 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800f40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	4618      	mov	r0, r3
 800f414:	f7fc fedc 	bl	800c1d0 <pbuf_clen>
 800f418:	4603      	mov	r3, r0
 800f41a:	461a      	mov	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f422:	1a9b      	subs	r3, r3, r2
 800f424:	b29a      	uxth	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800f42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42e:	891a      	ldrh	r2, [r3, #8]
 800f430:	4b67      	ldr	r3, [pc, #412]	; (800f5d0 <tcp_receive+0x4c8>)
 800f432:	881b      	ldrh	r3, [r3, #0]
 800f434:	4413      	add	r3, r2
 800f436:	b29a      	uxth	r2, r3
 800f438:	4b65      	ldr	r3, [pc, #404]	; (800f5d0 <tcp_receive+0x4c8>)
 800f43a:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800f43c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f43e:	f7fe f94d 	bl	800d6dc <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00e      	beq.n	800f46a <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f450:	2b00      	cmp	r3, #0
 800f452:	d10a      	bne.n	800f46a <tcp_receive+0x362>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d106      	bne.n	800f46a <tcp_receive+0x362>
 800f45c:	4b59      	ldr	r3, [pc, #356]	; (800f5c4 <tcp_receive+0x4bc>)
 800f45e:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800f462:	495c      	ldr	r1, [pc, #368]	; (800f5d4 <tcp_receive+0x4cc>)
 800f464:	4859      	ldr	r0, [pc, #356]	; (800f5cc <tcp_receive+0x4c4>)
 800f466:	f005 faf7 	bl	8014a58 <iprintf>
      while (pcb->unacked != NULL &&
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d022      	beq.n	800f4b8 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f476:	68db      	ldr	r3, [r3, #12]
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fb fc45 	bl	800ad0a <lwip_htonl>
 800f480:	4604      	mov	r4, r0
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f486:	891b      	ldrh	r3, [r3, #8]
 800f488:	461d      	mov	r5, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	899b      	ldrh	r3, [r3, #12]
 800f492:	b29b      	uxth	r3, r3
 800f494:	4618      	mov	r0, r3
 800f496:	f7fb fc2b 	bl	800acf0 <lwip_htons>
 800f49a:	4603      	mov	r3, r0
 800f49c:	f003 0303 	and.w	r3, r3, #3
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d001      	beq.n	800f4a8 <tcp_receive+0x3a0>
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	e000      	b.n	800f4aa <tcp_receive+0x3a2>
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	442b      	add	r3, r5
 800f4ac:	18e2      	adds	r2, r4, r3
 800f4ae:	4b4a      	ldr	r3, [pc, #296]	; (800f5d8 <tcp_receive+0x4d0>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	dd90      	ble.n	800f3da <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d104      	bne.n	800f4ca <tcp_receive+0x3c2>
        pcb->rtime = -1;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4c6:	861a      	strh	r2, [r3, #48]	; 0x30
 800f4c8:	e002      	b.n	800f4d0 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	76da      	strb	r2, [r3, #27]
 800f4d6:	e002      	b.n	800f4de <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f001 fd2f 	bl	8010f3c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800f4de:	e04f      	b.n	800f580 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d103      	bne.n	800f500 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7fc fe60 	bl	800c1d0 <pbuf_clen>
 800f510:	4603      	mov	r3, r0
 800f512:	429c      	cmp	r4, r3
 800f514:	d206      	bcs.n	800f524 <tcp_receive+0x41c>
 800f516:	4b2b      	ldr	r3, [pc, #172]	; (800f5c4 <tcp_receive+0x4bc>)
 800f518:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f51c:	492a      	ldr	r1, [pc, #168]	; (800f5c8 <tcp_receive+0x4c0>)
 800f51e:	482b      	ldr	r0, [pc, #172]	; (800f5cc <tcp_receive+0x4c4>)
 800f520:	f005 fa9a 	bl	8014a58 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800f524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	4618      	mov	r0, r3
 800f52a:	f7fc fe51 	bl	800c1d0 <pbuf_clen>
 800f52e:	4603      	mov	r3, r0
 800f530:	461a      	mov	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f538:	1a9b      	subs	r3, r3, r2
 800f53a:	b29a      	uxth	r2, r3
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800f542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f544:	891a      	ldrh	r2, [r3, #8]
 800f546:	4b22      	ldr	r3, [pc, #136]	; (800f5d0 <tcp_receive+0x4c8>)
 800f548:	881b      	ldrh	r3, [r3, #0]
 800f54a:	4413      	add	r3, r2
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	4b20      	ldr	r3, [pc, #128]	; (800f5d0 <tcp_receive+0x4c8>)
 800f550:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800f552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f554:	f7fe f8c2 	bl	800d6dc <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d00e      	beq.n	800f580 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f566:	2b00      	cmp	r3, #0
 800f568:	d10a      	bne.n	800f580 <tcp_receive+0x478>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d106      	bne.n	800f580 <tcp_receive+0x478>
 800f572:	4b14      	ldr	r3, [pc, #80]	; (800f5c4 <tcp_receive+0x4bc>)
 800f574:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800f578:	4916      	ldr	r1, [pc, #88]	; (800f5d4 <tcp_receive+0x4cc>)
 800f57a:	4814      	ldr	r0, [pc, #80]	; (800f5cc <tcp_receive+0x4c4>)
 800f57c:	f005 fa6c 	bl	8014a58 <iprintf>
    while (pcb->unsent != NULL &&
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f584:	2b00      	cmp	r3, #0
 800f586:	d037      	beq.n	800f5f8 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800f588:	4b13      	ldr	r3, [pc, #76]	; (800f5d8 <tcp_receive+0x4d0>)
 800f58a:	681c      	ldr	r4, [r3, #0]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	685b      	ldr	r3, [r3, #4]
 800f594:	4618      	mov	r0, r3
 800f596:	f7fb fbb8 	bl	800ad0a <lwip_htonl>
 800f59a:	4605      	mov	r5, r0
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5a0:	891b      	ldrh	r3, [r3, #8]
 800f5a2:	461e      	mov	r6, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	899b      	ldrh	r3, [r3, #12]
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fb fb9e 	bl	800acf0 <lwip_htons>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	f003 0303 	and.w	r3, r3, #3
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d00e      	beq.n	800f5dc <tcp_receive+0x4d4>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e00d      	b.n	800f5de <tcp_receive+0x4d6>
 800f5c2:	bf00      	nop
 800f5c4:	08016ebc 	.word	0x08016ebc
 800f5c8:	080170fc 	.word	0x080170fc
 800f5cc:	08016f00 	.word	0x08016f00
 800f5d0:	2000ba54 	.word	0x2000ba54
 800f5d4:	08017124 	.word	0x08017124
 800f5d8:	2000ba50 	.word	0x2000ba50
 800f5dc:	2300      	movs	r3, #0
 800f5de:	4433      	add	r3, r6
 800f5e0:	442b      	add	r3, r5
 800f5e2:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	db07      	blt.n	800f5f8 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800f5e8:	4b8d      	ldr	r3, [pc, #564]	; (800f820 <tcp_receive+0x718>)
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	f77f af74 	ble.w	800f4e0 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f5fe:	4b89      	ldr	r3, [pc, #548]	; (800f824 <tcp_receive+0x71c>)
 800f600:	881b      	ldrh	r3, [r3, #0]
 800f602:	4413      	add	r3, r2
 800f604:	b29a      	uxth	r2, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f610:	2b00      	cmp	r3, #0
 800f612:	d052      	beq.n	800f6ba <tcp_receive+0x5b2>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f618:	4b81      	ldr	r3, [pc, #516]	; (800f820 <tcp_receive+0x718>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	1ad3      	subs	r3, r2, r3
 800f61e:	2b00      	cmp	r3, #0
 800f620:	da4b      	bge.n	800f6ba <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f622:	4b81      	ldr	r3, [pc, #516]	; (800f828 <tcp_receive+0x720>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	b29a      	uxth	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	1ad3      	subs	r3, r2, r3
 800f630:	b29b      	uxth	r3, r3
 800f632:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800f634:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f63c:	10db      	asrs	r3, r3, #3
 800f63e:	b21b      	sxth	r3, r3
 800f640:	b29b      	uxth	r3, r3
 800f642:	1ad3      	subs	r3, r2, r3
 800f644:	b29b      	uxth	r3, r3
 800f646:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f64e:	b29a      	uxth	r2, r3
 800f650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f652:	4413      	add	r3, r2
 800f654:	b29b      	uxth	r3, r3
 800f656:	b21a      	sxth	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f65c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f660:	2b00      	cmp	r3, #0
 800f662:	da03      	bge.n	800f66c <tcp_receive+0x564>
        m = -m;
 800f664:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f666:	425b      	negs	r3, r3
 800f668:	b29b      	uxth	r3, r3
 800f66a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800f66c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f674:	109b      	asrs	r3, r3, #2
 800f676:	b21b      	sxth	r3, r3
 800f678:	b29b      	uxth	r3, r3
 800f67a:	1ad3      	subs	r3, r2, r3
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f686:	b29a      	uxth	r2, r3
 800f688:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f68a:	4413      	add	r3, r2
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	b21a      	sxth	r2, r3
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f69a:	10db      	asrs	r3, r3, #3
 800f69c:	b21b      	sxth	r3, r3
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	4413      	add	r3, r2
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	b21a      	sxth	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f6ba:	4b5c      	ldr	r3, [pc, #368]	; (800f82c <tcp_receive+0x724>)
 800f6bc:	881b      	ldrh	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	f000 84f1 	beq.w	80100a6 <tcp_receive+0xf9e>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	7d1b      	ldrb	r3, [r3, #20]
 800f6c8:	2b06      	cmp	r3, #6
 800f6ca:	f200 84ec 	bhi.w	80100a6 <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6d2:	4b57      	ldr	r3, [pc, #348]	; (800f830 <tcp_receive+0x728>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	1ad3      	subs	r3, r2, r3
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f2c0 80b8 	blt.w	800f850 <tcp_receive+0x748>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6e4:	4b51      	ldr	r3, [pc, #324]	; (800f82c <tcp_receive+0x724>)
 800f6e6:	881b      	ldrh	r3, [r3, #0]
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	4b51      	ldr	r3, [pc, #324]	; (800f830 <tcp_receive+0x728>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	440b      	add	r3, r1
 800f6f0:	1ad3      	subs	r3, r2, r3
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	f300 80ab 	bgt.w	800f850 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f6fa:	4b4e      	ldr	r3, [pc, #312]	; (800f834 <tcp_receive+0x72c>)
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f704:	4b4a      	ldr	r3, [pc, #296]	; (800f830 <tcp_receive+0x728>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	1ad3      	subs	r3, r2, r3
 800f70a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f70c:	4b49      	ldr	r3, [pc, #292]	; (800f834 <tcp_receive+0x72c>)
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d106      	bne.n	800f722 <tcp_receive+0x61a>
 800f714:	4b48      	ldr	r3, [pc, #288]	; (800f838 <tcp_receive+0x730>)
 800f716:	f240 523c 	movw	r2, #1340	; 0x53c
 800f71a:	4948      	ldr	r1, [pc, #288]	; (800f83c <tcp_receive+0x734>)
 800f71c:	4848      	ldr	r0, [pc, #288]	; (800f840 <tcp_receive+0x738>)
 800f71e:	f005 f99b 	bl	8014a58 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800f722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f724:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f728:	4293      	cmp	r3, r2
 800f72a:	dd06      	ble.n	800f73a <tcp_receive+0x632>
 800f72c:	4b42      	ldr	r3, [pc, #264]	; (800f838 <tcp_receive+0x730>)
 800f72e:	f240 523d 	movw	r2, #1341	; 0x53d
 800f732:	4944      	ldr	r1, [pc, #272]	; (800f844 <tcp_receive+0x73c>)
 800f734:	4842      	ldr	r0, [pc, #264]	; (800f840 <tcp_receive+0x738>)
 800f736:	f005 f98f 	bl	8014a58 <iprintf>
      if (inseg.p->len < off) {
 800f73a:	4b3e      	ldr	r3, [pc, #248]	; (800f834 <tcp_receive+0x72c>)
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	895b      	ldrh	r3, [r3, #10]
 800f740:	461a      	mov	r2, r3
 800f742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f744:	4293      	cmp	r3, r2
 800f746:	dd3e      	ble.n	800f7c6 <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f748:	4b3a      	ldr	r3, [pc, #232]	; (800f834 <tcp_receive+0x72c>)
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	891b      	ldrh	r3, [r3, #8]
 800f74e:	461a      	mov	r2, r3
 800f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f752:	4293      	cmp	r3, r2
 800f754:	dd06      	ble.n	800f764 <tcp_receive+0x65c>
 800f756:	4b38      	ldr	r3, [pc, #224]	; (800f838 <tcp_receive+0x730>)
 800f758:	f240 523f 	movw	r2, #1343	; 0x53f
 800f75c:	493a      	ldr	r1, [pc, #232]	; (800f848 <tcp_receive+0x740>)
 800f75e:	4838      	ldr	r0, [pc, #224]	; (800f840 <tcp_receive+0x738>)
 800f760:	f005 f97a 	bl	8014a58 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f764:	4b33      	ldr	r3, [pc, #204]	; (800f834 <tcp_receive+0x72c>)
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	891a      	ldrh	r2, [r3, #8]
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800f772:	e00e      	b.n	800f792 <tcp_receive+0x68a>
          off -= p->len;
 800f774:	69bb      	ldr	r3, [r7, #24]
 800f776:	895b      	ldrh	r3, [r3, #10]
 800f778:	461a      	mov	r2, r3
 800f77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77c:	1a9b      	subs	r3, r3, r2
 800f77e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	8a3a      	ldrh	r2, [r7, #16]
 800f784:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	2200      	movs	r2, #0
 800f78a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	895b      	ldrh	r3, [r3, #10]
 800f796:	461a      	mov	r2, r3
 800f798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79a:	4293      	cmp	r3, r2
 800f79c:	dcea      	bgt.n	800f774 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	425b      	negs	r3, r3
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	b21b      	sxth	r3, r3
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	69b8      	ldr	r0, [r7, #24]
 800f7ac:	f7fc fc52 	bl	800c054 <pbuf_header>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d01c      	beq.n	800f7f0 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800f7b6:	4b20      	ldr	r3, [pc, #128]	; (800f838 <tcp_receive+0x730>)
 800f7b8:	f240 524c 	movw	r2, #1356	; 0x54c
 800f7bc:	4923      	ldr	r1, [pc, #140]	; (800f84c <tcp_receive+0x744>)
 800f7be:	4820      	ldr	r0, [pc, #128]	; (800f840 <tcp_receive+0x738>)
 800f7c0:	f005 f94a 	bl	8014a58 <iprintf>
 800f7c4:	e014      	b.n	800f7f0 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800f7c6:	4b1b      	ldr	r3, [pc, #108]	; (800f834 <tcp_receive+0x72c>)
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7cc:	b292      	uxth	r2, r2
 800f7ce:	4252      	negs	r2, r2
 800f7d0:	b292      	uxth	r2, r2
 800f7d2:	b212      	sxth	r2, r2
 800f7d4:	4611      	mov	r1, r2
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fc fc3c 	bl	800c054 <pbuf_header>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d006      	beq.n	800f7f0 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800f7e2:	4b15      	ldr	r3, [pc, #84]	; (800f838 <tcp_receive+0x730>)
 800f7e4:	f240 5251 	movw	r2, #1361	; 0x551
 800f7e8:	4918      	ldr	r1, [pc, #96]	; (800f84c <tcp_receive+0x744>)
 800f7ea:	4815      	ldr	r0, [pc, #84]	; (800f840 <tcp_receive+0x738>)
 800f7ec:	f005 f934 	bl	8014a58 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800f7f0:	4b10      	ldr	r3, [pc, #64]	; (800f834 <tcp_receive+0x72c>)
 800f7f2:	891a      	ldrh	r2, [r3, #8]
 800f7f4:	4b0e      	ldr	r3, [pc, #56]	; (800f830 <tcp_receive+0x728>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	b299      	uxth	r1, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	1acb      	subs	r3, r1, r3
 800f802:	b29b      	uxth	r3, r3
 800f804:	4413      	add	r3, r2
 800f806:	b29a      	uxth	r2, r3
 800f808:	4b0a      	ldr	r3, [pc, #40]	; (800f834 <tcp_receive+0x72c>)
 800f80a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f810:	4a07      	ldr	r2, [pc, #28]	; (800f830 <tcp_receive+0x728>)
 800f812:	6013      	str	r3, [r2, #0]
 800f814:	4b07      	ldr	r3, [pc, #28]	; (800f834 <tcp_receive+0x72c>)
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	4a05      	ldr	r2, [pc, #20]	; (800f830 <tcp_receive+0x728>)
 800f81a:	6812      	ldr	r2, [r2, #0]
 800f81c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f81e:	e025      	b.n	800f86c <tcp_receive+0x764>
 800f820:	2000ba50 	.word	0x2000ba50
 800f824:	2000ba54 	.word	0x2000ba54
 800f828:	2000ba14 	.word	0x2000ba14
 800f82c:	2000ba56 	.word	0x2000ba56
 800f830:	2000ba4c 	.word	0x2000ba4c
 800f834:	2000ba2c 	.word	0x2000ba2c
 800f838:	08016ebc 	.word	0x08016ebc
 800f83c:	08017144 	.word	0x08017144
 800f840:	08016f00 	.word	0x08016f00
 800f844:	08017154 	.word	0x08017154
 800f848:	08017164 	.word	0x08017164
 800f84c:	08017174 	.word	0x08017174
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f850:	4b87      	ldr	r3, [pc, #540]	; (800fa70 <tcp_receive+0x968>)
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	da06      	bge.n	800f86c <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	7e9b      	ldrb	r3, [r3, #26]
 800f862:	f043 0302 	orr.w	r3, r3, #2
 800f866:	b2da      	uxtb	r2, r3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f86c:	4b80      	ldr	r3, [pc, #512]	; (800fa70 <tcp_receive+0x968>)
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	2b00      	cmp	r3, #0
 800f878:	f2c0 8410 	blt.w	801009c <tcp_receive+0xf94>
 800f87c:	4b7c      	ldr	r3, [pc, #496]	; (800fa70 <tcp_receive+0x968>)
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f884:	6879      	ldr	r1, [r7, #4]
 800f886:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f888:	440b      	add	r3, r1
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	3301      	adds	r3, #1
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f300 8404 	bgt.w	801009c <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f898:	4b75      	ldr	r3, [pc, #468]	; (800fa70 <tcp_receive+0x968>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	f040 8287 	bne.w	800fdb0 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f8a2:	4b74      	ldr	r3, [pc, #464]	; (800fa74 <tcp_receive+0x96c>)
 800f8a4:	891c      	ldrh	r4, [r3, #8]
 800f8a6:	4b73      	ldr	r3, [pc, #460]	; (800fa74 <tcp_receive+0x96c>)
 800f8a8:	68db      	ldr	r3, [r3, #12]
 800f8aa:	899b      	ldrh	r3, [r3, #12]
 800f8ac:	b29b      	uxth	r3, r3
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fb fa1e 	bl	800acf0 <lwip_htons>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	f003 0303 	and.w	r3, r3, #3
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d001      	beq.n	800f8c2 <tcp_receive+0x7ba>
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e000      	b.n	800f8c4 <tcp_receive+0x7bc>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	4423      	add	r3, r4
 800f8c6:	b29a      	uxth	r2, r3
 800f8c8:	4b6b      	ldr	r3, [pc, #428]	; (800fa78 <tcp_receive+0x970>)
 800f8ca:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f8d0:	4b69      	ldr	r3, [pc, #420]	; (800fa78 <tcp_receive+0x970>)
 800f8d2:	881b      	ldrh	r3, [r3, #0]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d26e      	bcs.n	800f9b6 <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f8d8:	4b66      	ldr	r3, [pc, #408]	; (800fa74 <tcp_receive+0x96c>)
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	899b      	ldrh	r3, [r3, #12]
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fb fa05 	bl	800acf0 <lwip_htons>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	f003 0301 	and.w	r3, r3, #1
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d01b      	beq.n	800f928 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f8f0:	4b60      	ldr	r3, [pc, #384]	; (800fa74 <tcp_receive+0x96c>)
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	899b      	ldrh	r3, [r3, #12]
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f8fc:	b29c      	uxth	r4, r3
 800f8fe:	4b5d      	ldr	r3, [pc, #372]	; (800fa74 <tcp_receive+0x96c>)
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	899b      	ldrh	r3, [r3, #12]
 800f904:	b29b      	uxth	r3, r3
 800f906:	4618      	mov	r0, r3
 800f908:	f7fb f9f2 	bl	800acf0 <lwip_htons>
 800f90c:	4603      	mov	r3, r0
 800f90e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f912:	b29b      	uxth	r3, r3
 800f914:	4618      	mov	r0, r3
 800f916:	f7fb f9eb 	bl	800acf0 <lwip_htons>
 800f91a:	4603      	mov	r3, r0
 800f91c:	461a      	mov	r2, r3
 800f91e:	4b55      	ldr	r3, [pc, #340]	; (800fa74 <tcp_receive+0x96c>)
 800f920:	68db      	ldr	r3, [r3, #12]
 800f922:	4322      	orrs	r2, r4
 800f924:	b292      	uxth	r2, r2
 800f926:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f92c:	4b51      	ldr	r3, [pc, #324]	; (800fa74 <tcp_receive+0x96c>)
 800f92e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f930:	4b50      	ldr	r3, [pc, #320]	; (800fa74 <tcp_receive+0x96c>)
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	899b      	ldrh	r3, [r3, #12]
 800f936:	b29b      	uxth	r3, r3
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fb f9d9 	bl	800acf0 <lwip_htons>
 800f93e:	4603      	mov	r3, r0
 800f940:	f003 0302 	and.w	r3, r3, #2
 800f944:	2b00      	cmp	r3, #0
 800f946:	d005      	beq.n	800f954 <tcp_receive+0x84c>
            inseg.len -= 1;
 800f948:	4b4a      	ldr	r3, [pc, #296]	; (800fa74 <tcp_receive+0x96c>)
 800f94a:	891b      	ldrh	r3, [r3, #8]
 800f94c:	3b01      	subs	r3, #1
 800f94e:	b29a      	uxth	r2, r3
 800f950:	4b48      	ldr	r3, [pc, #288]	; (800fa74 <tcp_receive+0x96c>)
 800f952:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f954:	4b47      	ldr	r3, [pc, #284]	; (800fa74 <tcp_receive+0x96c>)
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	4a46      	ldr	r2, [pc, #280]	; (800fa74 <tcp_receive+0x96c>)
 800f95a:	8912      	ldrh	r2, [r2, #8]
 800f95c:	4611      	mov	r1, r2
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fc fa28 	bl	800bdb4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f964:	4b43      	ldr	r3, [pc, #268]	; (800fa74 <tcp_receive+0x96c>)
 800f966:	891c      	ldrh	r4, [r3, #8]
 800f968:	4b42      	ldr	r3, [pc, #264]	; (800fa74 <tcp_receive+0x96c>)
 800f96a:	68db      	ldr	r3, [r3, #12]
 800f96c:	899b      	ldrh	r3, [r3, #12]
 800f96e:	b29b      	uxth	r3, r3
 800f970:	4618      	mov	r0, r3
 800f972:	f7fb f9bd 	bl	800acf0 <lwip_htons>
 800f976:	4603      	mov	r3, r0
 800f978:	f003 0303 	and.w	r3, r3, #3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d001      	beq.n	800f984 <tcp_receive+0x87c>
 800f980:	2301      	movs	r3, #1
 800f982:	e000      	b.n	800f986 <tcp_receive+0x87e>
 800f984:	2300      	movs	r3, #0
 800f986:	4423      	add	r3, r4
 800f988:	b29a      	uxth	r2, r3
 800f98a:	4b3b      	ldr	r3, [pc, #236]	; (800fa78 <tcp_receive+0x970>)
 800f98c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f98e:	4b3a      	ldr	r3, [pc, #232]	; (800fa78 <tcp_receive+0x970>)
 800f990:	881b      	ldrh	r3, [r3, #0]
 800f992:	461a      	mov	r2, r3
 800f994:	4b36      	ldr	r3, [pc, #216]	; (800fa70 <tcp_receive+0x968>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	441a      	add	r2, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99e:	6879      	ldr	r1, [r7, #4]
 800f9a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9a2:	440b      	add	r3, r1
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d006      	beq.n	800f9b6 <tcp_receive+0x8ae>
 800f9a8:	4b34      	ldr	r3, [pc, #208]	; (800fa7c <tcp_receive+0x974>)
 800f9aa:	f240 527e 	movw	r2, #1406	; 0x57e
 800f9ae:	4934      	ldr	r1, [pc, #208]	; (800fa80 <tcp_receive+0x978>)
 800f9b0:	4834      	ldr	r0, [pc, #208]	; (800fa84 <tcp_receive+0x97c>)
 800f9b2:	f005 f851 	bl	8014a58 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f000 80e1 	beq.w	800fb82 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9c0:	4b2c      	ldr	r3, [pc, #176]	; (800fa74 <tcp_receive+0x96c>)
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	899b      	ldrh	r3, [r3, #12]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fb f991 	bl	800acf0 <lwip_htons>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	f003 0301 	and.w	r3, r3, #1
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d010      	beq.n	800f9fa <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f9d8:	e00a      	b.n	800f9f0 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9de:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9e4:	681a      	ldr	r2, [r3, #0]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800f9ea:	68b8      	ldr	r0, [r7, #8]
 800f9ec:	f7fd fe76 	bl	800d6dc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d1f0      	bne.n	800f9da <tcp_receive+0x8d2>
 800f9f8:	e0c3      	b.n	800fb82 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fa00:	e04f      	b.n	800faa2 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	899b      	ldrh	r3, [r3, #12]
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fb f970 	bl	800acf0 <lwip_htons>
 800fa10:	4603      	mov	r3, r0
 800fa12:	f003 0301 	and.w	r3, r3, #1
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d03b      	beq.n	800fa92 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fa1a:	4b16      	ldr	r3, [pc, #88]	; (800fa74 <tcp_receive+0x96c>)
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	899b      	ldrh	r3, [r3, #12]
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fb f964 	bl	800acf0 <lwip_htons>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d12f      	bne.n	800fa92 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fa32:	4b10      	ldr	r3, [pc, #64]	; (800fa74 <tcp_receive+0x96c>)
 800fa34:	68db      	ldr	r3, [r3, #12]
 800fa36:	899b      	ldrh	r3, [r3, #12]
 800fa38:	b29c      	uxth	r4, r3
 800fa3a:	2001      	movs	r0, #1
 800fa3c:	f7fb f958 	bl	800acf0 <lwip_htons>
 800fa40:	4603      	mov	r3, r0
 800fa42:	461a      	mov	r2, r3
 800fa44:	4b0b      	ldr	r3, [pc, #44]	; (800fa74 <tcp_receive+0x96c>)
 800fa46:	68db      	ldr	r3, [r3, #12]
 800fa48:	4322      	orrs	r2, r4
 800fa4a:	b292      	uxth	r2, r2
 800fa4c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fa4e:	4b09      	ldr	r3, [pc, #36]	; (800fa74 <tcp_receive+0x96c>)
 800fa50:	891c      	ldrh	r4, [r3, #8]
 800fa52:	4b08      	ldr	r3, [pc, #32]	; (800fa74 <tcp_receive+0x96c>)
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	899b      	ldrh	r3, [r3, #12]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fb f948 	bl	800acf0 <lwip_htons>
 800fa60:	4603      	mov	r3, r0
 800fa62:	f003 0303 	and.w	r3, r3, #3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00e      	beq.n	800fa88 <tcp_receive+0x980>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	e00d      	b.n	800fa8a <tcp_receive+0x982>
 800fa6e:	bf00      	nop
 800fa70:	2000ba4c 	.word	0x2000ba4c
 800fa74:	2000ba2c 	.word	0x2000ba2c
 800fa78:	2000ba56 	.word	0x2000ba56
 800fa7c:	08016ebc 	.word	0x08016ebc
 800fa80:	08017188 	.word	0x08017188
 800fa84:	08016f00 	.word	0x08016f00
 800fa88:	2300      	movs	r3, #0
 800fa8a:	4423      	add	r3, r4
 800fa8c:	b29a      	uxth	r2, r3
 800fa8e:	4b95      	ldr	r3, [pc, #596]	; (800fce4 <tcp_receive+0xbdc>)
 800fa90:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800fa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa94:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800fa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800fa9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa9e:	f7fd fe1d 	bl	800d6dc <tcp_seg_free>
            while (next &&
 800faa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d00e      	beq.n	800fac6 <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800faa8:	4b8e      	ldr	r3, [pc, #568]	; (800fce4 <tcp_receive+0xbdc>)
 800faaa:	881b      	ldrh	r3, [r3, #0]
 800faac:	461a      	mov	r2, r3
 800faae:	4b8e      	ldr	r3, [pc, #568]	; (800fce8 <tcp_receive+0xbe0>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	441a      	add	r2, r3
 800fab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	685b      	ldr	r3, [r3, #4]
 800faba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fabc:	8909      	ldrh	r1, [r1, #8]
 800fabe:	440b      	add	r3, r1
 800fac0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	da9d      	bge.n	800fa02 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d057      	beq.n	800fb7c <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 800facc:	4b85      	ldr	r3, [pc, #532]	; (800fce4 <tcp_receive+0xbdc>)
 800face:	881b      	ldrh	r3, [r3, #0]
 800fad0:	461a      	mov	r2, r3
 800fad2:	4b85      	ldr	r3, [pc, #532]	; (800fce8 <tcp_receive+0xbe0>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	441a      	add	r2, r3
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	68db      	ldr	r3, [r3, #12]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	dd4b      	ble.n	800fb7c <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	b29a      	uxth	r2, r3
 800faec:	4b7e      	ldr	r3, [pc, #504]	; (800fce8 <tcp_receive+0xbe0>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	1ad3      	subs	r3, r2, r3
 800faf4:	b29a      	uxth	r2, r3
 800faf6:	4b7d      	ldr	r3, [pc, #500]	; (800fcec <tcp_receive+0xbe4>)
 800faf8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fafa:	4b7c      	ldr	r3, [pc, #496]	; (800fcec <tcp_receive+0xbe4>)
 800fafc:	68db      	ldr	r3, [r3, #12]
 800fafe:	899b      	ldrh	r3, [r3, #12]
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fb f8f4 	bl	800acf0 <lwip_htons>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	f003 0302 	and.w	r3, r3, #2
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d005      	beq.n	800fb1e <tcp_receive+0xa16>
                inseg.len -= 1;
 800fb12:	4b76      	ldr	r3, [pc, #472]	; (800fcec <tcp_receive+0xbe4>)
 800fb14:	891b      	ldrh	r3, [r3, #8]
 800fb16:	3b01      	subs	r3, #1
 800fb18:	b29a      	uxth	r2, r3
 800fb1a:	4b74      	ldr	r3, [pc, #464]	; (800fcec <tcp_receive+0xbe4>)
 800fb1c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fb1e:	4b73      	ldr	r3, [pc, #460]	; (800fcec <tcp_receive+0xbe4>)
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	4a72      	ldr	r2, [pc, #456]	; (800fcec <tcp_receive+0xbe4>)
 800fb24:	8912      	ldrh	r2, [r2, #8]
 800fb26:	4611      	mov	r1, r2
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fc f943 	bl	800bdb4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fb2e:	4b6f      	ldr	r3, [pc, #444]	; (800fcec <tcp_receive+0xbe4>)
 800fb30:	891c      	ldrh	r4, [r3, #8]
 800fb32:	4b6e      	ldr	r3, [pc, #440]	; (800fcec <tcp_receive+0xbe4>)
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	899b      	ldrh	r3, [r3, #12]
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fb f8d8 	bl	800acf0 <lwip_htons>
 800fb40:	4603      	mov	r3, r0
 800fb42:	f003 0303 	and.w	r3, r3, #3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d001      	beq.n	800fb4e <tcp_receive+0xa46>
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	e000      	b.n	800fb50 <tcp_receive+0xa48>
 800fb4e:	2300      	movs	r3, #0
 800fb50:	4423      	add	r3, r4
 800fb52:	b29a      	uxth	r2, r3
 800fb54:	4b63      	ldr	r3, [pc, #396]	; (800fce4 <tcp_receive+0xbdc>)
 800fb56:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fb58:	4b62      	ldr	r3, [pc, #392]	; (800fce4 <tcp_receive+0xbdc>)
 800fb5a:	881b      	ldrh	r3, [r3, #0]
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	4b62      	ldr	r3, [pc, #392]	; (800fce8 <tcp_receive+0xbe0>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	441a      	add	r2, r3
 800fb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d006      	beq.n	800fb7c <tcp_receive+0xa74>
 800fb6e:	4b60      	ldr	r3, [pc, #384]	; (800fcf0 <tcp_receive+0xbe8>)
 800fb70:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800fb74:	495f      	ldr	r1, [pc, #380]	; (800fcf4 <tcp_receive+0xbec>)
 800fb76:	4860      	ldr	r0, [pc, #384]	; (800fcf8 <tcp_receive+0xbf0>)
 800fb78:	f004 ff6e 	bl	8014a58 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb80:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fb82:	4b58      	ldr	r3, [pc, #352]	; (800fce4 <tcp_receive+0xbdc>)
 800fb84:	881b      	ldrh	r3, [r3, #0]
 800fb86:	461a      	mov	r2, r3
 800fb88:	4b57      	ldr	r3, [pc, #348]	; (800fce8 <tcp_receive+0xbe0>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	441a      	add	r2, r3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb96:	4b53      	ldr	r3, [pc, #332]	; (800fce4 <tcp_receive+0xbdc>)
 800fb98:	881b      	ldrh	r3, [r3, #0]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d206      	bcs.n	800fbac <tcp_receive+0xaa4>
 800fb9e:	4b54      	ldr	r3, [pc, #336]	; (800fcf0 <tcp_receive+0xbe8>)
 800fba0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800fba4:	4955      	ldr	r1, [pc, #340]	; (800fcfc <tcp_receive+0xbf4>)
 800fba6:	4854      	ldr	r0, [pc, #336]	; (800fcf8 <tcp_receive+0xbf0>)
 800fba8:	f004 ff56 	bl	8014a58 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fbb0:	4b4c      	ldr	r3, [pc, #304]	; (800fce4 <tcp_receive+0xbdc>)
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f7fd f8fd 	bl	800cdbc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fbc2:	4b4a      	ldr	r3, [pc, #296]	; (800fcec <tcp_receive+0xbe4>)
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	891b      	ldrh	r3, [r3, #8]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d006      	beq.n	800fbda <tcp_receive+0xad2>
          recv_data = inseg.p;
 800fbcc:	4b47      	ldr	r3, [pc, #284]	; (800fcec <tcp_receive+0xbe4>)
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	4a4b      	ldr	r2, [pc, #300]	; (800fd00 <tcp_receive+0xbf8>)
 800fbd2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fbd4:	4b45      	ldr	r3, [pc, #276]	; (800fcec <tcp_receive+0xbe4>)
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fbda:	4b44      	ldr	r3, [pc, #272]	; (800fcec <tcp_receive+0xbe4>)
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	899b      	ldrh	r3, [r3, #12]
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7fb f884 	bl	800acf0 <lwip_htons>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	f003 0301 	and.w	r3, r3, #1
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	f000 80b4 	beq.w	800fd5c <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fbf4:	4b43      	ldr	r3, [pc, #268]	; (800fd04 <tcp_receive+0xbfc>)
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	f043 0320 	orr.w	r3, r3, #32
 800fbfc:	b2da      	uxtb	r2, r3
 800fbfe:	4b41      	ldr	r3, [pc, #260]	; (800fd04 <tcp_receive+0xbfc>)
 800fc00:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fc02:	e0ab      	b.n	800fd5c <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc08:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	4a35      	ldr	r2, [pc, #212]	; (800fce8 <tcp_receive+0xbe0>)
 800fc14:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	891b      	ldrh	r3, [r3, #8]
 800fc1a:	461c      	mov	r4, r3
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	899b      	ldrh	r3, [r3, #12]
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fb f863 	bl	800acf0 <lwip_htons>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	f003 0303 	and.w	r3, r3, #3
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d001      	beq.n	800fc38 <tcp_receive+0xb30>
 800fc34:	2301      	movs	r3, #1
 800fc36:	e000      	b.n	800fc3a <tcp_receive+0xb32>
 800fc38:	2300      	movs	r3, #0
 800fc3a:	191a      	adds	r2, r3, r4
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc40:	441a      	add	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc4a:	461c      	mov	r4, r3
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	891b      	ldrh	r3, [r3, #8]
 800fc50:	461d      	mov	r5, r3
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	899b      	ldrh	r3, [r3, #12]
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7fb f848 	bl	800acf0 <lwip_htons>
 800fc60:	4603      	mov	r3, r0
 800fc62:	f003 0303 	and.w	r3, r3, #3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d001      	beq.n	800fc6e <tcp_receive+0xb66>
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e000      	b.n	800fc70 <tcp_receive+0xb68>
 800fc6e:	2300      	movs	r3, #0
 800fc70:	442b      	add	r3, r5
 800fc72:	429c      	cmp	r4, r3
 800fc74:	d206      	bcs.n	800fc84 <tcp_receive+0xb7c>
 800fc76:	4b1e      	ldr	r3, [pc, #120]	; (800fcf0 <tcp_receive+0xbe8>)
 800fc78:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800fc7c:	4922      	ldr	r1, [pc, #136]	; (800fd08 <tcp_receive+0xc00>)
 800fc7e:	481e      	ldr	r0, [pc, #120]	; (800fcf8 <tcp_receive+0xbf0>)
 800fc80:	f004 feea 	bl	8014a58 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	891b      	ldrh	r3, [r3, #8]
 800fc88:	461c      	mov	r4, r3
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	899b      	ldrh	r3, [r3, #12]
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fb f82c 	bl	800acf0 <lwip_htons>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	f003 0303 	and.w	r3, r3, #3
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d001      	beq.n	800fca6 <tcp_receive+0xb9e>
 800fca2:	2301      	movs	r3, #1
 800fca4:	e000      	b.n	800fca8 <tcp_receive+0xba0>
 800fca6:	2300      	movs	r3, #0
 800fca8:	1919      	adds	r1, r3, r4
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcae:	b28b      	uxth	r3, r1
 800fcb0:	1ad3      	subs	r3, r2, r3
 800fcb2:	b29a      	uxth	r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f7fd f87f 	bl	800cdbc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	891b      	ldrh	r3, [r3, #8]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d028      	beq.n	800fd1a <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fcc8:	4b0d      	ldr	r3, [pc, #52]	; (800fd00 <tcp_receive+0xbf8>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d01d      	beq.n	800fd0c <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 800fcd0:	4b0b      	ldr	r3, [pc, #44]	; (800fd00 <tcp_receive+0xbf8>)
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	4619      	mov	r1, r3
 800fcda:	4610      	mov	r0, r2
 800fcdc:	f7fc fab6 	bl	800c24c <pbuf_cat>
 800fce0:	e018      	b.n	800fd14 <tcp_receive+0xc0c>
 800fce2:	bf00      	nop
 800fce4:	2000ba56 	.word	0x2000ba56
 800fce8:	2000ba4c 	.word	0x2000ba4c
 800fcec:	2000ba2c 	.word	0x2000ba2c
 800fcf0:	08016ebc 	.word	0x08016ebc
 800fcf4:	080171c0 	.word	0x080171c0
 800fcf8:	08016f00 	.word	0x08016f00
 800fcfc:	080171fc 	.word	0x080171fc
 800fd00:	2000ba5c 	.word	0x2000ba5c
 800fd04:	2000ba59 	.word	0x2000ba59
 800fd08:	0801721c 	.word	0x0801721c
            } else {
              recv_data = cseg->p;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	4a71      	ldr	r2, [pc, #452]	; (800fed8 <tcp_receive+0xdd0>)
 800fd12:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2200      	movs	r2, #0
 800fd18:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	899b      	ldrh	r3, [r3, #12]
 800fd20:	b29b      	uxth	r3, r3
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fa ffe4 	bl	800acf0 <lwip_htons>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	f003 0301 	and.w	r3, r3, #1
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00d      	beq.n	800fd4e <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fd32:	4b6a      	ldr	r3, [pc, #424]	; (800fedc <tcp_receive+0xdd4>)
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	f043 0320 	orr.w	r3, r3, #32
 800fd3a:	b2da      	uxtb	r2, r3
 800fd3c:	4b67      	ldr	r3, [pc, #412]	; (800fedc <tcp_receive+0xdd4>)
 800fd3e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	7d1b      	ldrb	r3, [r3, #20]
 800fd44:	2b04      	cmp	r3, #4
 800fd46:	d102      	bne.n	800fd4e <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2207      	movs	r2, #7
 800fd4c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f7fd fcc0 	bl	800d6dc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d008      	beq.n	800fd76 <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	685a      	ldr	r2, [r3, #4]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fd70:	429a      	cmp	r2, r3
 800fd72:	f43f af47 	beq.w	800fc04 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	7e9b      	ldrb	r3, [r3, #26]
 800fd7a:	f003 0301 	and.w	r3, r3, #1
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00e      	beq.n	800fda0 <tcp_receive+0xc98>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	7e9b      	ldrb	r3, [r3, #26]
 800fd86:	f023 0301 	bic.w	r3, r3, #1
 800fd8a:	b2da      	uxtb	r2, r3
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	769a      	strb	r2, [r3, #26]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	7e9b      	ldrb	r3, [r3, #26]
 800fd94:	f043 0302 	orr.w	r3, r3, #2
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fd9e:	e181      	b.n	80100a4 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	7e9b      	ldrb	r3, [r3, #26]
 800fda4:	f043 0301 	orr.w	r3, r3, #1
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fdae:	e179      	b.n	80100a4 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f001 f8c3 	bl	8010f3c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d106      	bne.n	800fdcc <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fdbe:	4848      	ldr	r0, [pc, #288]	; (800fee0 <tcp_receive+0xdd8>)
 800fdc0:	f7fd fca4 	bl	800d70c <tcp_seg_copy>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800fdca:	e16b      	b.n	80100a4 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdd6:	e150      	b.n	801007a <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 800fdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdda:	68db      	ldr	r3, [r3, #12]
 800fddc:	685a      	ldr	r2, [r3, #4]
 800fdde:	4b41      	ldr	r3, [pc, #260]	; (800fee4 <tcp_receive+0xddc>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d11d      	bne.n	800fe22 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fde6:	4b3e      	ldr	r3, [pc, #248]	; (800fee0 <tcp_receive+0xdd8>)
 800fde8:	891a      	ldrh	r2, [r3, #8]
 800fdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdec:	891b      	ldrh	r3, [r3, #8]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	f240 8148 	bls.w	8010084 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800fdf4:	483a      	ldr	r0, [pc, #232]	; (800fee0 <tcp_receive+0xdd8>)
 800fdf6:	f7fd fc89 	bl	800d70c <tcp_seg_copy>
 800fdfa:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	f000 8142 	beq.w	8010088 <tcp_receive+0xf80>
                  if (prev != NULL) {
 800fe04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d003      	beq.n	800fe12 <tcp_receive+0xd0a>
                    prev->next = cseg;
 800fe0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0c:	68fa      	ldr	r2, [r7, #12]
 800fe0e:	601a      	str	r2, [r3, #0]
 800fe10:	e002      	b.n	800fe18 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	68fa      	ldr	r2, [r7, #12]
 800fe16:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fe18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f7ff f8fe 	bl	800f01c <tcp_oos_insert_segment>
                }
                break;
 800fe20:	e132      	b.n	8010088 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fe22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d117      	bne.n	800fe58 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fe28:	4b2e      	ldr	r3, [pc, #184]	; (800fee4 <tcp_receive+0xddc>)
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2e:	68db      	ldr	r3, [r3, #12]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	1ad3      	subs	r3, r2, r3
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	da57      	bge.n	800fee8 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800fe38:	4829      	ldr	r0, [pc, #164]	; (800fee0 <tcp_receive+0xdd8>)
 800fe3a:	f7fd fc67 	bl	800d70c <tcp_seg_copy>
 800fe3e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	f000 8122 	beq.w	801008c <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	68fa      	ldr	r2, [r7, #12]
 800fe4c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800fe4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f7ff f8e3 	bl	800f01c <tcp_oos_insert_segment>
                  }
                  break;
 800fe56:	e119      	b.n	801008c <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800fe58:	4b22      	ldr	r3, [pc, #136]	; (800fee4 <tcp_receive+0xddc>)
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	1ad3      	subs	r3, r2, r3
 800fe64:	3b01      	subs	r3, #1
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	db3e      	blt.n	800fee8 <tcp_receive+0xde0>
 800fe6a:	4b1e      	ldr	r3, [pc, #120]	; (800fee4 <tcp_receive+0xddc>)
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	1ad3      	subs	r3, r2, r3
 800fe76:	3301      	adds	r3, #1
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	dc35      	bgt.n	800fee8 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800fe7c:	4818      	ldr	r0, [pc, #96]	; (800fee0 <tcp_receive+0xdd8>)
 800fe7e:	f7fd fc45 	bl	800d70c <tcp_seg_copy>
 800fe82:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	f000 8102 	beq.w	8010090 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fe8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8e:	68db      	ldr	r3, [r3, #12]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe94:	8912      	ldrh	r2, [r2, #8]
 800fe96:	441a      	add	r2, r3
 800fe98:	4b12      	ldr	r3, [pc, #72]	; (800fee4 <tcp_receive+0xddc>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	1ad3      	subs	r3, r2, r3
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	dd12      	ble.n	800fec8 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fea2:	4b10      	ldr	r3, [pc, #64]	; (800fee4 <tcp_receive+0xddc>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	b29b      	uxth	r3, r3
 800feb0:	1ad3      	subs	r3, r2, r3
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800feb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800febe:	891b      	ldrh	r3, [r3, #8]
 800fec0:	4619      	mov	r1, r3
 800fec2:	4610      	mov	r0, r2
 800fec4:	f7fb ff76 	bl	800bdb4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feca:	68fa      	ldr	r2, [r7, #12]
 800fecc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f7ff f8a3 	bl	800f01c <tcp_oos_insert_segment>
                  }
                  break;
 800fed6:	e0db      	b.n	8010090 <tcp_receive+0xf88>
 800fed8:	2000ba5c 	.word	0x2000ba5c
 800fedc:	2000ba59 	.word	0x2000ba59
 800fee0:	2000ba2c 	.word	0x2000ba2c
 800fee4:	2000ba4c 	.word	0x2000ba4c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	2b00      	cmp	r3, #0
 800feee:	f040 80bf 	bne.w	8010070 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fef2:	4b7c      	ldr	r3, [pc, #496]	; (80100e4 <tcp_receive+0xfdc>)
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef8:	68db      	ldr	r3, [r3, #12]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	f340 80b6 	ble.w	8010070 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ff04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	899b      	ldrh	r3, [r3, #12]
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7fa feef 	bl	800acf0 <lwip_htons>
 800ff12:	4603      	mov	r3, r0
 800ff14:	f003 0301 	and.w	r3, r3, #1
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f040 80bb 	bne.w	8010094 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ff1e:	4872      	ldr	r0, [pc, #456]	; (80100e8 <tcp_receive+0xfe0>)
 800ff20:	f7fd fbf4 	bl	800d70c <tcp_seg_copy>
 800ff24:	4602      	mov	r2, r0
 800ff26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff28:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ff2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	f000 80b2 	beq.w	8010098 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ff34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff3c:	8912      	ldrh	r2, [r2, #8]
 800ff3e:	441a      	add	r2, r3
 800ff40:	4b68      	ldr	r3, [pc, #416]	; (80100e4 <tcp_receive+0xfdc>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	1ad3      	subs	r3, r2, r3
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	dd12      	ble.n	800ff70 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ff4a:	4b66      	ldr	r3, [pc, #408]	; (80100e4 <tcp_receive+0xfdc>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	1ad3      	subs	r3, r2, r3
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ff60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff62:	685a      	ldr	r2, [r3, #4]
 800ff64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff66:	891b      	ldrh	r3, [r3, #8]
 800ff68:	4619      	mov	r1, r3
 800ff6a:	4610      	mov	r0, r2
 800ff6c:	f7fb ff22 	bl	800bdb4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ff70:	4b5e      	ldr	r3, [pc, #376]	; (80100ec <tcp_receive+0xfe4>)
 800ff72:	881b      	ldrh	r3, [r3, #0]
 800ff74:	461a      	mov	r2, r3
 800ff76:	4b5b      	ldr	r3, [pc, #364]	; (80100e4 <tcp_receive+0xfdc>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	441a      	add	r2, r3
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff80:	6879      	ldr	r1, [r7, #4]
 800ff82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff84:	440b      	add	r3, r1
 800ff86:	1ad3      	subs	r3, r2, r3
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	f340 8085 	ble.w	8010098 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ff8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	899b      	ldrh	r3, [r3, #12]
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7fa fea9 	bl	800acf0 <lwip_htons>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	f003 0301 	and.w	r3, r3, #1
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d01e      	beq.n	800ffe6 <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ffa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	899b      	ldrh	r3, [r3, #12]
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ffb6:	b29c      	uxth	r4, r3
 800ffb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	899b      	ldrh	r3, [r3, #12]
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fa fe94 	bl	800acf0 <lwip_htons>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fa fe8d 	bl	800acf0 <lwip_htons>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	461a      	mov	r2, r3
 800ffda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	4322      	orrs	r2, r4
 800ffe2:	b292      	uxth	r2, r2
 800ffe4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fff0:	4413      	add	r3, r2
 800fff2:	b299      	uxth	r1, r3
 800fff4:	4b3b      	ldr	r3, [pc, #236]	; (80100e4 <tcp_receive+0xfdc>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	b29a      	uxth	r2, r3
 800fffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	1a8a      	subs	r2, r1, r2
 8010000:	b292      	uxth	r2, r2
 8010002:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	685a      	ldr	r2, [r3, #4]
 801000a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	891b      	ldrh	r3, [r3, #8]
 8010010:	4619      	mov	r1, r3
 8010012:	4610      	mov	r0, r2
 8010014:	f7fb fece 	bl	800bdb4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	891c      	ldrh	r4, [r3, #8]
 801001e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	899b      	ldrh	r3, [r3, #12]
 8010026:	b29b      	uxth	r3, r3
 8010028:	4618      	mov	r0, r3
 801002a:	f7fa fe61 	bl	800acf0 <lwip_htons>
 801002e:	4603      	mov	r3, r0
 8010030:	f003 0303 	and.w	r3, r3, #3
 8010034:	2b00      	cmp	r3, #0
 8010036:	d001      	beq.n	801003c <tcp_receive+0xf34>
 8010038:	2301      	movs	r3, #1
 801003a:	e000      	b.n	801003e <tcp_receive+0xf36>
 801003c:	2300      	movs	r3, #0
 801003e:	4423      	add	r3, r4
 8010040:	b29a      	uxth	r2, r3
 8010042:	4b2a      	ldr	r3, [pc, #168]	; (80100ec <tcp_receive+0xfe4>)
 8010044:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010046:	4b29      	ldr	r3, [pc, #164]	; (80100ec <tcp_receive+0xfe4>)
 8010048:	881b      	ldrh	r3, [r3, #0]
 801004a:	461a      	mov	r2, r3
 801004c:	4b25      	ldr	r3, [pc, #148]	; (80100e4 <tcp_receive+0xfdc>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	441a      	add	r2, r3
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010056:	6879      	ldr	r1, [r7, #4]
 8010058:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801005a:	440b      	add	r3, r1
 801005c:	429a      	cmp	r2, r3
 801005e:	d01b      	beq.n	8010098 <tcp_receive+0xf90>
 8010060:	4b23      	ldr	r3, [pc, #140]	; (80100f0 <tcp_receive+0xfe8>)
 8010062:	f240 627a 	movw	r2, #1658	; 0x67a
 8010066:	4923      	ldr	r1, [pc, #140]	; (80100f4 <tcp_receive+0xfec>)
 8010068:	4823      	ldr	r0, [pc, #140]	; (80100f8 <tcp_receive+0xff0>)
 801006a:	f004 fcf5 	bl	8014a58 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801006e:	e013      	b.n	8010098 <tcp_receive+0xf90>
              }
            }
            prev = next;
 8010070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010072:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	62fb      	str	r3, [r7, #44]	; 0x2c
 801007a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007c:	2b00      	cmp	r3, #0
 801007e:	f47f aeab 	bne.w	800fdd8 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 8010082:	e00f      	b.n	80100a4 <tcp_receive+0xf9c>
                break;
 8010084:	bf00      	nop
 8010086:	e00d      	b.n	80100a4 <tcp_receive+0xf9c>
                break;
 8010088:	bf00      	nop
 801008a:	e00b      	b.n	80100a4 <tcp_receive+0xf9c>
                  break;
 801008c:	bf00      	nop
 801008e:	e009      	b.n	80100a4 <tcp_receive+0xf9c>
                  break;
 8010090:	bf00      	nop
 8010092:	e007      	b.n	80100a4 <tcp_receive+0xf9c>
                  break;
 8010094:	bf00      	nop
 8010096:	e005      	b.n	80100a4 <tcp_receive+0xf9c>
                break;
 8010098:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 801009a:	e003      	b.n	80100a4 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f000 ff4d 	bl	8010f3c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80100a2:	e01a      	b.n	80100da <tcp_receive+0xfd2>
 80100a4:	e019      	b.n	80100da <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80100a6:	4b0f      	ldr	r3, [pc, #60]	; (80100e4 <tcp_receive+0xfdc>)
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ae:	1ad3      	subs	r3, r2, r3
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	db0a      	blt.n	80100ca <tcp_receive+0xfc2>
 80100b4:	4b0b      	ldr	r3, [pc, #44]	; (80100e4 <tcp_receive+0xfdc>)
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100bc:	6879      	ldr	r1, [r7, #4]
 80100be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100c0:	440b      	add	r3, r1
 80100c2:	1ad3      	subs	r3, r2, r3
 80100c4:	3301      	adds	r3, #1
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	dd07      	ble.n	80100da <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	7e9b      	ldrb	r3, [r3, #26]
 80100ce:	f043 0302 	orr.w	r3, r3, #2
 80100d2:	b2da      	uxtb	r2, r3
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80100d8:	e7ff      	b.n	80100da <tcp_receive+0xfd2>
 80100da:	bf00      	nop
 80100dc:	3734      	adds	r7, #52	; 0x34
 80100de:	46bd      	mov	sp, r7
 80100e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100e2:	bf00      	nop
 80100e4:	2000ba4c 	.word	0x2000ba4c
 80100e8:	2000ba2c 	.word	0x2000ba2c
 80100ec:	2000ba56 	.word	0x2000ba56
 80100f0:	08016ebc 	.word	0x08016ebc
 80100f4:	08017188 	.word	0x08017188
 80100f8:	08016f00 	.word	0x08016f00

080100fc <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8010102:	4b17      	ldr	r3, [pc, #92]	; (8010160 <tcp_getoptbyte+0x64>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d005      	beq.n	8010116 <tcp_getoptbyte+0x1a>
 801010a:	4b16      	ldr	r3, [pc, #88]	; (8010164 <tcp_getoptbyte+0x68>)
 801010c:	881a      	ldrh	r2, [r3, #0]
 801010e:	4b16      	ldr	r3, [pc, #88]	; (8010168 <tcp_getoptbyte+0x6c>)
 8010110:	881b      	ldrh	r3, [r3, #0]
 8010112:	429a      	cmp	r2, r3
 8010114:	d20e      	bcs.n	8010134 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8010116:	4b15      	ldr	r3, [pc, #84]	; (801016c <tcp_getoptbyte+0x70>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	3314      	adds	r3, #20
 801011c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801011e:	4b11      	ldr	r3, [pc, #68]	; (8010164 <tcp_getoptbyte+0x68>)
 8010120:	881b      	ldrh	r3, [r3, #0]
 8010122:	1c5a      	adds	r2, r3, #1
 8010124:	b291      	uxth	r1, r2
 8010126:	4a0f      	ldr	r2, [pc, #60]	; (8010164 <tcp_getoptbyte+0x68>)
 8010128:	8011      	strh	r1, [r2, #0]
 801012a:	461a      	mov	r2, r3
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	4413      	add	r3, r2
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	e010      	b.n	8010156 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8010134:	4b0b      	ldr	r3, [pc, #44]	; (8010164 <tcp_getoptbyte+0x68>)
 8010136:	881b      	ldrh	r3, [r3, #0]
 8010138:	1c5a      	adds	r2, r3, #1
 801013a:	b291      	uxth	r1, r2
 801013c:	4a09      	ldr	r2, [pc, #36]	; (8010164 <tcp_getoptbyte+0x68>)
 801013e:	8011      	strh	r1, [r2, #0]
 8010140:	b2da      	uxtb	r2, r3
 8010142:	4b09      	ldr	r3, [pc, #36]	; (8010168 <tcp_getoptbyte+0x6c>)
 8010144:	881b      	ldrh	r3, [r3, #0]
 8010146:	b2db      	uxtb	r3, r3
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 801014c:	4b04      	ldr	r3, [pc, #16]	; (8010160 <tcp_getoptbyte+0x64>)
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	79fb      	ldrb	r3, [r7, #7]
 8010152:	4413      	add	r3, r2
 8010154:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010156:	4618      	mov	r0, r3
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	bc80      	pop	{r7}
 801015e:	4770      	bx	lr
 8010160:	2000ba44 	.word	0x2000ba44
 8010164:	2000ba48 	.word	0x2000ba48
 8010168:	2000ba42 	.word	0x2000ba42
 801016c:	2000ba3c 	.word	0x2000ba3c

08010170 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010178:	4b2e      	ldr	r3, [pc, #184]	; (8010234 <tcp_parseopt+0xc4>)
 801017a:	881b      	ldrh	r3, [r3, #0]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d055      	beq.n	801022c <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010180:	4b2d      	ldr	r3, [pc, #180]	; (8010238 <tcp_parseopt+0xc8>)
 8010182:	2200      	movs	r2, #0
 8010184:	801a      	strh	r2, [r3, #0]
 8010186:	e045      	b.n	8010214 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 8010188:	f7ff ffb8 	bl	80100fc <tcp_getoptbyte>
 801018c:	4603      	mov	r3, r0
 801018e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010190:	7bfb      	ldrb	r3, [r7, #15]
 8010192:	2b02      	cmp	r3, #2
 8010194:	d006      	beq.n	80101a4 <tcp_parseopt+0x34>
 8010196:	2b02      	cmp	r3, #2
 8010198:	dc2b      	bgt.n	80101f2 <tcp_parseopt+0x82>
 801019a:	2b00      	cmp	r3, #0
 801019c:	d041      	beq.n	8010222 <tcp_parseopt+0xb2>
 801019e:	2b01      	cmp	r3, #1
 80101a0:	d127      	bne.n	80101f2 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 80101a2:	e037      	b.n	8010214 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80101a4:	f7ff ffaa 	bl	80100fc <tcp_getoptbyte>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b04      	cmp	r3, #4
 80101ac:	d13b      	bne.n	8010226 <tcp_parseopt+0xb6>
 80101ae:	4b22      	ldr	r3, [pc, #136]	; (8010238 <tcp_parseopt+0xc8>)
 80101b0:	881b      	ldrh	r3, [r3, #0]
 80101b2:	3301      	adds	r3, #1
 80101b4:	4a1f      	ldr	r2, [pc, #124]	; (8010234 <tcp_parseopt+0xc4>)
 80101b6:	8812      	ldrh	r2, [r2, #0]
 80101b8:	4293      	cmp	r3, r2
 80101ba:	da34      	bge.n	8010226 <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80101bc:	f7ff ff9e 	bl	80100fc <tcp_getoptbyte>
 80101c0:	4603      	mov	r3, r0
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	021b      	lsls	r3, r3, #8
 80101c6:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80101c8:	f7ff ff98 	bl	80100fc <tcp_getoptbyte>
 80101cc:	4603      	mov	r3, r0
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	89bb      	ldrh	r3, [r7, #12]
 80101d2:	4313      	orrs	r3, r2
 80101d4:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80101d6:	89bb      	ldrh	r3, [r7, #12]
 80101d8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80101dc:	d804      	bhi.n	80101e8 <tcp_parseopt+0x78>
 80101de:	89bb      	ldrh	r3, [r7, #12]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d001      	beq.n	80101e8 <tcp_parseopt+0x78>
 80101e4:	89ba      	ldrh	r2, [r7, #12]
 80101e6:	e001      	b.n	80101ec <tcp_parseopt+0x7c>
 80101e8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 80101f0:	e010      	b.n	8010214 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80101f2:	f7ff ff83 	bl	80100fc <tcp_getoptbyte>
 80101f6:	4603      	mov	r3, r0
 80101f8:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80101fa:	7afb      	ldrb	r3, [r7, #11]
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d914      	bls.n	801022a <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8010200:	7afb      	ldrb	r3, [r7, #11]
 8010202:	b29a      	uxth	r2, r3
 8010204:	4b0c      	ldr	r3, [pc, #48]	; (8010238 <tcp_parseopt+0xc8>)
 8010206:	881b      	ldrh	r3, [r3, #0]
 8010208:	4413      	add	r3, r2
 801020a:	b29b      	uxth	r3, r3
 801020c:	3b02      	subs	r3, #2
 801020e:	b29a      	uxth	r2, r3
 8010210:	4b09      	ldr	r3, [pc, #36]	; (8010238 <tcp_parseopt+0xc8>)
 8010212:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010214:	4b08      	ldr	r3, [pc, #32]	; (8010238 <tcp_parseopt+0xc8>)
 8010216:	881a      	ldrh	r2, [r3, #0]
 8010218:	4b06      	ldr	r3, [pc, #24]	; (8010234 <tcp_parseopt+0xc4>)
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	429a      	cmp	r2, r3
 801021e:	d3b3      	bcc.n	8010188 <tcp_parseopt+0x18>
 8010220:	e004      	b.n	801022c <tcp_parseopt+0xbc>
        return;
 8010222:	bf00      	nop
 8010224:	e002      	b.n	801022c <tcp_parseopt+0xbc>
          return;
 8010226:	bf00      	nop
 8010228:	e000      	b.n	801022c <tcp_parseopt+0xbc>
          return;
 801022a:	bf00      	nop
      }
    }
  }
}
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	2000ba40 	.word	0x2000ba40
 8010238:	2000ba48 	.word	0x2000ba48

0801023c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801023c:	b480      	push	{r7}
 801023e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010240:	4b05      	ldr	r3, [pc, #20]	; (8010258 <tcp_trigger_input_pcb_close+0x1c>)
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	f043 0310 	orr.w	r3, r3, #16
 8010248:	b2da      	uxtb	r2, r3
 801024a:	4b03      	ldr	r3, [pc, #12]	; (8010258 <tcp_trigger_input_pcb_close+0x1c>)
 801024c:	701a      	strb	r2, [r3, #0]
}
 801024e:	bf00      	nop
 8010250:	46bd      	mov	sp, r7
 8010252:	bc80      	pop	{r7}
 8010254:	4770      	bx	lr
 8010256:	bf00      	nop
 8010258:	2000ba59 	.word	0x2000ba59

0801025c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b086      	sub	sp, #24
 8010260:	af00      	add	r7, sp, #0
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	607b      	str	r3, [r7, #4]
 8010266:	460b      	mov	r3, r1
 8010268:	817b      	strh	r3, [r7, #10]
 801026a:	4613      	mov	r3, r2
 801026c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801026e:	897a      	ldrh	r2, [r7, #10]
 8010270:	893b      	ldrh	r3, [r7, #8]
 8010272:	4413      	add	r3, r2
 8010274:	b29b      	uxth	r3, r3
 8010276:	3314      	adds	r3, #20
 8010278:	b29b      	uxth	r3, r3
 801027a:	2200      	movs	r2, #0
 801027c:	4619      	mov	r1, r3
 801027e:	2001      	movs	r0, #1
 8010280:	f7fb fb94 	bl	800b9ac <pbuf_alloc>
 8010284:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d056      	beq.n	801033a <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801028c:	897b      	ldrh	r3, [r7, #10]
 801028e:	3313      	adds	r3, #19
 8010290:	697a      	ldr	r2, [r7, #20]
 8010292:	8952      	ldrh	r2, [r2, #10]
 8010294:	4293      	cmp	r3, r2
 8010296:	db05      	blt.n	80102a4 <tcp_output_alloc_header+0x48>
 8010298:	4b2a      	ldr	r3, [pc, #168]	; (8010344 <tcp_output_alloc_header+0xe8>)
 801029a:	2272      	movs	r2, #114	; 0x72
 801029c:	492a      	ldr	r1, [pc, #168]	; (8010348 <tcp_output_alloc_header+0xec>)
 801029e:	482b      	ldr	r0, [pc, #172]	; (801034c <tcp_output_alloc_header+0xf0>)
 80102a0:	f004 fbda 	bl	8014a58 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	8adb      	ldrh	r3, [r3, #22]
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fa fd1e 	bl	800acf0 <lwip_htons>
 80102b4:	4603      	mov	r3, r0
 80102b6:	461a      	mov	r2, r3
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	8b1b      	ldrh	r3, [r3, #24]
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fa fd15 	bl	800acf0 <lwip_htons>
 80102c6:	4603      	mov	r3, r0
 80102c8:	461a      	mov	r2, r3
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d8:	4618      	mov	r0, r3
 80102da:	f7fa fd16 	bl	800ad0a <lwip_htonl>
 80102de:	4602      	mov	r2, r0
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80102e4:	897b      	ldrh	r3, [r7, #10]
 80102e6:	089b      	lsrs	r3, r3, #2
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	3305      	adds	r3, #5
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	031b      	lsls	r3, r3, #12
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	f043 0310 	orr.w	r3, r3, #16
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7fa fcf9 	bl	800acf0 <lwip_htons>
 80102fe:	4603      	mov	r3, r0
 8010300:	461a      	mov	r2, r3
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801030a:	4618      	mov	r0, r3
 801030c:	f7fa fcf0 	bl	800acf0 <lwip_htons>
 8010310:	4603      	mov	r3, r0
 8010312:	461a      	mov	r2, r3
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	2200      	movs	r2, #0
 801031c:	741a      	strb	r2, [r3, #16]
 801031e:	2200      	movs	r2, #0
 8010320:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	2200      	movs	r2, #0
 8010326:	749a      	strb	r2, [r3, #18]
 8010328:	2200      	movs	r2, #0
 801032a:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010330:	68fa      	ldr	r2, [r7, #12]
 8010332:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010334:	441a      	add	r2, r3
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801033a:	697b      	ldr	r3, [r7, #20]
}
 801033c:	4618      	mov	r0, r3
 801033e:	3718      	adds	r7, #24
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}
 8010344:	08017244 	.word	0x08017244
 8010348:	08017278 	.word	0x08017278
 801034c:	080172a8 	.word	0x080172a8

08010350 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010350:	b590      	push	{r4, r7, lr}
 8010352:	b085      	sub	sp, #20
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801035c:	2b00      	cmp	r3, #0
 801035e:	d02d      	beq.n	80103bc <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010364:	60fb      	str	r3, [r7, #12]
 8010366:	e002      	b.n	801036e <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d1f8      	bne.n	8010368 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	899b      	ldrh	r3, [r3, #12]
 801037c:	b29b      	uxth	r3, r3
 801037e:	4618      	mov	r0, r3
 8010380:	f7fa fcb6 	bl	800acf0 <lwip_htons>
 8010384:	4603      	mov	r3, r0
 8010386:	f003 0307 	and.w	r3, r3, #7
 801038a:	2b00      	cmp	r3, #0
 801038c:	d116      	bne.n	80103bc <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	899b      	ldrh	r3, [r3, #12]
 8010394:	b29c      	uxth	r4, r3
 8010396:	2001      	movs	r0, #1
 8010398:	f7fa fcaa 	bl	800acf0 <lwip_htons>
 801039c:	4603      	mov	r3, r0
 801039e:	461a      	mov	r2, r3
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	4322      	orrs	r2, r4
 80103a6:	b292      	uxth	r2, r2
 80103a8:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	7e9b      	ldrb	r3, [r3, #26]
 80103ae:	f043 0320 	orr.w	r3, r3, #32
 80103b2:	b2da      	uxtb	r2, r3
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80103b8:	2300      	movs	r3, #0
 80103ba:	e004      	b.n	80103c6 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80103bc:	2101      	movs	r1, #1
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f000 fcc0 	bl	8010d44 <tcp_enqueue_flags>
 80103c4:	4603      	mov	r3, r0
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3714      	adds	r7, #20
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd90      	pop	{r4, r7, pc}
	...

080103d0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80103d0:	b590      	push	{r4, r7, lr}
 80103d2:	b087      	sub	sp, #28
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	603b      	str	r3, [r7, #0]
 80103dc:	4613      	mov	r3, r2
 80103de:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80103e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	f003 0304 	and.w	r3, r3, #4
 80103ec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80103ee:	2003      	movs	r0, #3
 80103f0:	f7fb f86a 	bl	800b4c8 <memp_malloc>
 80103f4:	6138      	str	r0, [r7, #16]
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d104      	bne.n	8010406 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80103fc:	68b8      	ldr	r0, [r7, #8]
 80103fe:	f7fb fe4d 	bl	800c09c <pbuf_free>
    return NULL;
 8010402:	2300      	movs	r3, #0
 8010404:	e061      	b.n	80104ca <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801040c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	2200      	movs	r2, #0
 8010412:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	68ba      	ldr	r2, [r7, #8]
 8010418:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	891a      	ldrh	r2, [r3, #8]
 801041e:	7dfb      	ldrb	r3, [r7, #23]
 8010420:	b29b      	uxth	r3, r3
 8010422:	429a      	cmp	r2, r3
 8010424:	d205      	bcs.n	8010432 <tcp_create_segment+0x62>
 8010426:	4b2b      	ldr	r3, [pc, #172]	; (80104d4 <tcp_create_segment+0x104>)
 8010428:	22ba      	movs	r2, #186	; 0xba
 801042a:	492b      	ldr	r1, [pc, #172]	; (80104d8 <tcp_create_segment+0x108>)
 801042c:	482b      	ldr	r0, [pc, #172]	; (80104dc <tcp_create_segment+0x10c>)
 801042e:	f004 fb13 	bl	8014a58 <iprintf>
  seg->len = p->tot_len - optlen;
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	891a      	ldrh	r2, [r3, #8]
 8010436:	7dfb      	ldrb	r3, [r7, #23]
 8010438:	b29b      	uxth	r3, r3
 801043a:	1ad3      	subs	r3, r2, r3
 801043c:	b29a      	uxth	r2, r3
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8010442:	2114      	movs	r1, #20
 8010444:	68b8      	ldr	r0, [r7, #8]
 8010446:	f7fb fe05 	bl	800c054 <pbuf_header>
 801044a:	4603      	mov	r3, r0
 801044c:	2b00      	cmp	r3, #0
 801044e:	d004      	beq.n	801045a <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010450:	6938      	ldr	r0, [r7, #16]
 8010452:	f7fd f943 	bl	800d6dc <tcp_seg_free>
    return NULL;
 8010456:	2300      	movs	r3, #0
 8010458:	e037      	b.n	80104ca <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	685a      	ldr	r2, [r3, #4]
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	8ada      	ldrh	r2, [r3, #22]
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	68dc      	ldr	r4, [r3, #12]
 801046c:	4610      	mov	r0, r2
 801046e:	f7fa fc3f 	bl	800acf0 <lwip_htons>
 8010472:	4603      	mov	r3, r0
 8010474:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	8b1a      	ldrh	r2, [r3, #24]
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	68dc      	ldr	r4, [r3, #12]
 801047e:	4610      	mov	r0, r2
 8010480:	f7fa fc36 	bl	800acf0 <lwip_htons>
 8010484:	4603      	mov	r3, r0
 8010486:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	68dc      	ldr	r4, [r3, #12]
 801048c:	6838      	ldr	r0, [r7, #0]
 801048e:	f7fa fc3c 	bl	800ad0a <lwip_htonl>
 8010492:	4603      	mov	r3, r0
 8010494:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8010496:	7dfb      	ldrb	r3, [r7, #23]
 8010498:	089b      	lsrs	r3, r3, #2
 801049a:	b2db      	uxtb	r3, r3
 801049c:	b29b      	uxth	r3, r3
 801049e:	3305      	adds	r3, #5
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	031b      	lsls	r3, r3, #12
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	79fb      	ldrb	r3, [r7, #7]
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	4313      	orrs	r3, r2
 80104ac:	b29a      	uxth	r2, r3
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	68dc      	ldr	r4, [r3, #12]
 80104b2:	4610      	mov	r0, r2
 80104b4:	f7fa fc1c 	bl	800acf0 <lwip_htons>
 80104b8:	4603      	mov	r3, r0
 80104ba:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	2200      	movs	r2, #0
 80104c2:	749a      	strb	r2, [r3, #18]
 80104c4:	2200      	movs	r2, #0
 80104c6:	74da      	strb	r2, [r3, #19]
  return seg;
 80104c8:	693b      	ldr	r3, [r7, #16]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	371c      	adds	r7, #28
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd90      	pop	{r4, r7, pc}
 80104d2:	bf00      	nop
 80104d4:	08017244 	.word	0x08017244
 80104d8:	080172d0 	.word	0x080172d0
 80104dc:	080172a8 	.word	0x080172a8

080104e0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b086      	sub	sp, #24
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	607b      	str	r3, [r7, #4]
 80104e8:	4603      	mov	r3, r0
 80104ea:	73fb      	strb	r3, [r7, #15]
 80104ec:	460b      	mov	r3, r1
 80104ee:	81bb      	strh	r3, [r7, #12]
 80104f0:	4613      	mov	r3, r2
 80104f2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80104f4:	89bb      	ldrh	r3, [r7, #12]
 80104f6:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80104f8:	89ba      	ldrh	r2, [r7, #12]
 80104fa:	897b      	ldrh	r3, [r7, #10]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d221      	bcs.n	8010544 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010500:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010504:	f003 0302 	and.w	r3, r3, #2
 8010508:	2b00      	cmp	r3, #0
 801050a:	d111      	bne.n	8010530 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 801050c:	6a3b      	ldr	r3, [r7, #32]
 801050e:	7e9b      	ldrb	r3, [r3, #26]
 8010510:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010514:	2b00      	cmp	r3, #0
 8010516:	d115      	bne.n	8010544 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8010518:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801051c:	2b00      	cmp	r3, #0
 801051e:	d007      	beq.n	8010530 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010520:	6a3b      	ldr	r3, [r7, #32]
 8010522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8010524:	2b00      	cmp	r3, #0
 8010526:	d103      	bne.n	8010530 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8010528:	6a3b      	ldr	r3, [r7, #32]
 801052a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 801052c:	2b00      	cmp	r3, #0
 801052e:	d009      	beq.n	8010544 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010530:	89bb      	ldrh	r3, [r7, #12]
 8010532:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010536:	f023 0203 	bic.w	r2, r3, #3
 801053a:	897b      	ldrh	r3, [r7, #10]
 801053c:	4293      	cmp	r3, r2
 801053e:	bf28      	it	cs
 8010540:	4613      	movcs	r3, r2
 8010542:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010544:	8af9      	ldrh	r1, [r7, #22]
 8010546:	7bfb      	ldrb	r3, [r7, #15]
 8010548:	2200      	movs	r2, #0
 801054a:	4618      	mov	r0, r3
 801054c:	f7fb fa2e 	bl	800b9ac <pbuf_alloc>
 8010550:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d101      	bne.n	801055c <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8010558:	2300      	movs	r3, #0
 801055a:	e019      	b.n	8010590 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d006      	beq.n	8010572 <tcp_pbuf_prealloc+0x92>
 8010564:	4b0c      	ldr	r3, [pc, #48]	; (8010598 <tcp_pbuf_prealloc+0xb8>)
 8010566:	f44f 7288 	mov.w	r2, #272	; 0x110
 801056a:	490c      	ldr	r1, [pc, #48]	; (801059c <tcp_pbuf_prealloc+0xbc>)
 801056c:	480c      	ldr	r0, [pc, #48]	; (80105a0 <tcp_pbuf_prealloc+0xc0>)
 801056e:	f004 fa73 	bl	8014a58 <iprintf>
  *oversize = p->len - length;
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	895a      	ldrh	r2, [r3, #10]
 8010576:	89bb      	ldrh	r3, [r7, #12]
 8010578:	1ad3      	subs	r3, r2, r3
 801057a:	b29a      	uxth	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	89ba      	ldrh	r2, [r7, #12]
 8010584:	811a      	strh	r2, [r3, #8]
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	891a      	ldrh	r2, [r3, #8]
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	815a      	strh	r2, [r3, #10]
  return p;
 801058e:	693b      	ldr	r3, [r7, #16]
}
 8010590:	4618      	mov	r0, r3
 8010592:	3718      	adds	r7, #24
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	08017244 	.word	0x08017244
 801059c:	080172e8 	.word	0x080172e8
 80105a0:	080172a8 	.word	0x080172a8

080105a4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	460b      	mov	r3, r1
 80105ae:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	7d1b      	ldrb	r3, [r3, #20]
 80105b4:	2b04      	cmp	r3, #4
 80105b6:	d00e      	beq.n	80105d6 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80105bc:	2b07      	cmp	r3, #7
 80105be:	d00a      	beq.n	80105d6 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80105c4:	2b02      	cmp	r3, #2
 80105c6:	d006      	beq.n	80105d6 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80105cc:	2b03      	cmp	r3, #3
 80105ce:	d002      	beq.n	80105d6 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80105d0:	f06f 030a 	mvn.w	r3, #10
 80105d4:	e04f      	b.n	8010676 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 80105d6:	887b      	ldrh	r3, [r7, #2]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d101      	bne.n	80105e0 <tcp_write_checks+0x3c>
    return ERR_OK;
 80105dc:	2300      	movs	r3, #0
 80105de:	e04a      	b.n	8010676 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80105e6:	887a      	ldrh	r2, [r7, #2]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d909      	bls.n	8010600 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	7e9b      	ldrb	r3, [r3, #26]
 80105f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80105f4:	b2da      	uxtb	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80105fa:	f04f 33ff 	mov.w	r3, #4294967295
 80105fe:	e03a      	b.n	8010676 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010606:	2b08      	cmp	r3, #8
 8010608:	d806      	bhi.n	8010618 <tcp_write_checks+0x74>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010610:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010614:	4293      	cmp	r3, r2
 8010616:	d909      	bls.n	801062c <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	7e9b      	ldrb	r3, [r3, #26]
 801061c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010620:	b2da      	uxtb	r2, r3
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010626:	f04f 33ff 	mov.w	r3, #4294967295
 801062a:	e024      	b.n	8010676 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010632:	2b00      	cmp	r3, #0
 8010634:	d00f      	beq.n	8010656 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801063a:	2b00      	cmp	r3, #0
 801063c:	d11a      	bne.n	8010674 <tcp_write_checks+0xd0>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010642:	2b00      	cmp	r3, #0
 8010644:	d116      	bne.n	8010674 <tcp_write_checks+0xd0>
 8010646:	4b0e      	ldr	r3, [pc, #56]	; (8010680 <tcp_write_checks+0xdc>)
 8010648:	f240 1255 	movw	r2, #341	; 0x155
 801064c:	490d      	ldr	r1, [pc, #52]	; (8010684 <tcp_write_checks+0xe0>)
 801064e:	480e      	ldr	r0, [pc, #56]	; (8010688 <tcp_write_checks+0xe4>)
 8010650:	f004 fa02 	bl	8014a58 <iprintf>
 8010654:	e00e      	b.n	8010674 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801065a:	2b00      	cmp	r3, #0
 801065c:	d103      	bne.n	8010666 <tcp_write_checks+0xc2>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010662:	2b00      	cmp	r3, #0
 8010664:	d006      	beq.n	8010674 <tcp_write_checks+0xd0>
 8010666:	4b06      	ldr	r3, [pc, #24]	; (8010680 <tcp_write_checks+0xdc>)
 8010668:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801066c:	4907      	ldr	r1, [pc, #28]	; (801068c <tcp_write_checks+0xe8>)
 801066e:	4806      	ldr	r0, [pc, #24]	; (8010688 <tcp_write_checks+0xe4>)
 8010670:	f004 f9f2 	bl	8014a58 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	08017244 	.word	0x08017244
 8010684:	080172fc 	.word	0x080172fc
 8010688:	080172a8 	.word	0x080172a8
 801068c:	08017338 	.word	0x08017338

08010690 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010690:	b590      	push	{r4, r7, lr}
 8010692:	b09b      	sub	sp, #108	; 0x6c
 8010694:	af04      	add	r7, sp, #16
 8010696:	60f8      	str	r0, [r7, #12]
 8010698:	60b9      	str	r1, [r7, #8]
 801069a:	4611      	mov	r1, r2
 801069c:	461a      	mov	r2, r3
 801069e:	460b      	mov	r3, r1
 80106a0:	80fb      	strh	r3, [r7, #6]
 80106a2:	4613      	mov	r3, r2
 80106a4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80106a6:	2300      	movs	r3, #0
 80106a8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80106aa:	2300      	movs	r3, #0
 80106ac:	653b      	str	r3, [r7, #80]	; 0x50
 80106ae:	2300      	movs	r3, #0
 80106b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80106b2:	2300      	movs	r3, #0
 80106b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80106b6:	2300      	movs	r3, #0
 80106b8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80106ba:	2300      	movs	r3, #0
 80106bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 80106c0:	2300      	movs	r3, #0
 80106c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80106cc:	2300      	movs	r3, #0
 80106ce:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80106d0:	2300      	movs	r3, #0
 80106d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80106d4:	2300      	movs	r3, #0
 80106d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106de:	085b      	lsrs	r3, r3, #1
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106e6:	4293      	cmp	r3, r2
 80106e8:	bf28      	it	cs
 80106ea:	4613      	movcs	r3, r2
 80106ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80106ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d102      	bne.n	80106fa <tcp_write+0x6a>
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106f8:	e000      	b.n	80106fc <tcp_write+0x6c>
 80106fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80106fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d109      	bne.n	8010718 <tcp_write+0x88>
 8010704:	4b92      	ldr	r3, [pc, #584]	; (8010950 <tcp_write+0x2c0>)
 8010706:	f240 1291 	movw	r2, #401	; 0x191
 801070a:	4992      	ldr	r1, [pc, #584]	; (8010954 <tcp_write+0x2c4>)
 801070c:	4892      	ldr	r0, [pc, #584]	; (8010958 <tcp_write+0x2c8>)
 801070e:	f004 f9a3 	bl	8014a58 <iprintf>
 8010712:	f06f 030f 	mvn.w	r3, #15
 8010716:	e30a      	b.n	8010d2e <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010718:	88fb      	ldrh	r3, [r7, #6]
 801071a:	4619      	mov	r1, r3
 801071c:	68f8      	ldr	r0, [r7, #12]
 801071e:	f7ff ff41 	bl	80105a4 <tcp_write_checks>
 8010722:	4603      	mov	r3, r0
 8010724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010728:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801072c:	2b00      	cmp	r3, #0
 801072e:	d002      	beq.n	8010736 <tcp_write+0xa6>
    return err;
 8010730:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010734:	e2fb      	b.n	8010d2e <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801073c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010744:	2b00      	cmp	r3, #0
 8010746:	f000 80f4 	beq.w	8010932 <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801074e:	653b      	str	r3, [r7, #80]	; 0x50
 8010750:	e002      	b.n	8010758 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8010752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d1f8      	bne.n	8010752 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8010760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010762:	7a9b      	ldrb	r3, [r3, #10]
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	b29b      	uxth	r3, r3
 8010768:	f003 0304 	and.w	r3, r3, #4
 801076c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801076e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010772:	891b      	ldrh	r3, [r3, #8]
 8010774:	4619      	mov	r1, r3
 8010776:	8c3b      	ldrh	r3, [r7, #32]
 8010778:	440b      	add	r3, r1
 801077a:	429a      	cmp	r2, r3
 801077c:	da06      	bge.n	801078c <tcp_write+0xfc>
 801077e:	4b74      	ldr	r3, [pc, #464]	; (8010950 <tcp_write+0x2c0>)
 8010780:	f240 12c7 	movw	r2, #455	; 0x1c7
 8010784:	4975      	ldr	r1, [pc, #468]	; (801095c <tcp_write+0x2cc>)
 8010786:	4874      	ldr	r0, [pc, #464]	; (8010958 <tcp_write+0x2c8>)
 8010788:	f004 f966 	bl	8014a58 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801078c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801078e:	891a      	ldrh	r2, [r3, #8]
 8010790:	8c3b      	ldrh	r3, [r7, #32]
 8010792:	4413      	add	r3, r2
 8010794:	b29b      	uxth	r3, r3
 8010796:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010798:	1ad3      	subs	r3, r2, r3
 801079a:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80107a2:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80107a4:	8a7b      	ldrh	r3, [r7, #18]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d026      	beq.n	80107f8 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80107aa:	8a7b      	ldrh	r3, [r7, #18]
 80107ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d206      	bcs.n	80107c0 <tcp_write+0x130>
 80107b2:	4b67      	ldr	r3, [pc, #412]	; (8010950 <tcp_write+0x2c0>)
 80107b4:	f240 12d9 	movw	r2, #473	; 0x1d9
 80107b8:	4969      	ldr	r1, [pc, #420]	; (8010960 <tcp_write+0x2d0>)
 80107ba:	4867      	ldr	r0, [pc, #412]	; (8010958 <tcp_write+0x2c8>)
 80107bc:	f004 f94c 	bl	8014a58 <iprintf>
      seg = last_unsent;
 80107c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80107c4:	8a7b      	ldrh	r3, [r7, #18]
 80107c6:	88fa      	ldrh	r2, [r7, #6]
 80107c8:	4293      	cmp	r3, r2
 80107ca:	bf28      	it	cs
 80107cc:	4613      	movcs	r3, r2
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107d2:	4293      	cmp	r3, r2
 80107d4:	bf28      	it	cs
 80107d6:	4613      	movcs	r3, r2
 80107d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80107da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107e0:	4413      	add	r3, r2
 80107e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80107e6:	8a7a      	ldrh	r2, [r7, #18]
 80107e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107ea:	1ad3      	subs	r3, r2, r3
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80107f0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107f4:	1ad3      	subs	r3, r2, r3
 80107f6:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80107f8:	8a7b      	ldrh	r3, [r7, #18]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d00b      	beq.n	8010816 <tcp_write+0x186>
 80107fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010802:	88fb      	ldrh	r3, [r7, #6]
 8010804:	429a      	cmp	r2, r3
 8010806:	d006      	beq.n	8010816 <tcp_write+0x186>
 8010808:	4b51      	ldr	r3, [pc, #324]	; (8010950 <tcp_write+0x2c0>)
 801080a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801080e:	4955      	ldr	r1, [pc, #340]	; (8010964 <tcp_write+0x2d4>)
 8010810:	4851      	ldr	r0, [pc, #324]	; (8010958 <tcp_write+0x2c8>)
 8010812:	f004 f921 	bl	8014a58 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010816:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801081a:	88fb      	ldrh	r3, [r7, #6]
 801081c:	429a      	cmp	r2, r3
 801081e:	f080 8169 	bcs.w	8010af4 <tcp_write+0x464>
 8010822:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010824:	2b00      	cmp	r3, #0
 8010826:	f000 8165 	beq.w	8010af4 <tcp_write+0x464>
 801082a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801082c:	891b      	ldrh	r3, [r3, #8]
 801082e:	2b00      	cmp	r3, #0
 8010830:	f000 8160 	beq.w	8010af4 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010834:	88fa      	ldrh	r2, [r7, #6]
 8010836:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801083a:	1ad2      	subs	r2, r2, r3
 801083c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801083e:	4293      	cmp	r3, r2
 8010840:	bfa8      	it	ge
 8010842:	4613      	movge	r3, r2
 8010844:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010848:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801084a:	797b      	ldrb	r3, [r7, #5]
 801084c:	f003 0301 	and.w	r3, r3, #1
 8010850:	2b00      	cmp	r3, #0
 8010852:	d027      	beq.n	80108a4 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010854:	f107 0012 	add.w	r0, r7, #18
 8010858:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801085a:	8bf9      	ldrh	r1, [r7, #30]
 801085c:	2301      	movs	r3, #1
 801085e:	9302      	str	r3, [sp, #8]
 8010860:	797b      	ldrb	r3, [r7, #5]
 8010862:	9301      	str	r3, [sp, #4]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	9300      	str	r3, [sp, #0]
 8010868:	4603      	mov	r3, r0
 801086a:	2004      	movs	r0, #4
 801086c:	f7ff fe38 	bl	80104e0 <tcp_pbuf_prealloc>
 8010870:	6578      	str	r0, [r7, #84]	; 0x54
 8010872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010874:	2b00      	cmp	r3, #0
 8010876:	f000 8228 	beq.w	8010cca <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801087a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801087c:	6858      	ldr	r0, [r3, #4]
 801087e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010882:	68ba      	ldr	r2, [r7, #8]
 8010884:	4413      	add	r3, r2
 8010886:	8bfa      	ldrh	r2, [r7, #30]
 8010888:	4619      	mov	r1, r3
 801088a:	f004 fa16 	bl	8014cba <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801088e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010890:	f7fb fc9e 	bl	800c1d0 <pbuf_clen>
 8010894:	4603      	mov	r3, r0
 8010896:	461a      	mov	r2, r3
 8010898:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801089c:	4413      	add	r3, r2
 801089e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80108a2:	e03f      	b.n	8010924 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80108a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	637b      	str	r3, [r7, #52]	; 0x34
 80108aa:	e002      	b.n	80108b2 <tcp_write+0x222>
 80108ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	637b      	str	r3, [r7, #52]	; 0x34
 80108b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d1f8      	bne.n	80108ac <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80108ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108bc:	7b1b      	ldrb	r3, [r3, #12]
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d115      	bne.n	80108ee <tcp_write+0x25e>
 80108c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108c8:	8952      	ldrh	r2, [r2, #10]
 80108ca:	4413      	add	r3, r2
 80108cc:	68ba      	ldr	r2, [r7, #8]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d10d      	bne.n	80108ee <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80108d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d006      	beq.n	80108e8 <tcp_write+0x258>
 80108da:	4b1d      	ldr	r3, [pc, #116]	; (8010950 <tcp_write+0x2c0>)
 80108dc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80108e0:	4921      	ldr	r1, [pc, #132]	; (8010968 <tcp_write+0x2d8>)
 80108e2:	481d      	ldr	r0, [pc, #116]	; (8010958 <tcp_write+0x2c8>)
 80108e4:	f004 f8b8 	bl	8014a58 <iprintf>
          extendlen = seglen;
 80108e8:	8bfb      	ldrh	r3, [r7, #30]
 80108ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80108ec:	e01a      	b.n	8010924 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80108ee:	8bfb      	ldrh	r3, [r7, #30]
 80108f0:	2201      	movs	r2, #1
 80108f2:	4619      	mov	r1, r3
 80108f4:	2004      	movs	r0, #4
 80108f6:	f7fb f859 	bl	800b9ac <pbuf_alloc>
 80108fa:	6578      	str	r0, [r7, #84]	; 0x54
 80108fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f000 81e5 	beq.w	8010cce <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8010904:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010908:	68ba      	ldr	r2, [r7, #8]
 801090a:	441a      	add	r2, r3
 801090c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801090e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010910:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010912:	f7fb fc5d 	bl	800c1d0 <pbuf_clen>
 8010916:	4603      	mov	r3, r0
 8010918:	461a      	mov	r2, r3
 801091a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801091e:	4413      	add	r3, r2
 8010920:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010924:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010928:	8bfb      	ldrh	r3, [r7, #30]
 801092a:	4413      	add	r3, r2
 801092c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010930:	e0e0      	b.n	8010af4 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010938:	2b00      	cmp	r3, #0
 801093a:	f000 80db 	beq.w	8010af4 <tcp_write+0x464>
 801093e:	4b04      	ldr	r3, [pc, #16]	; (8010950 <tcp_write+0x2c0>)
 8010940:	f44f 7209 	mov.w	r2, #548	; 0x224
 8010944:	4909      	ldr	r1, [pc, #36]	; (801096c <tcp_write+0x2dc>)
 8010946:	4804      	ldr	r0, [pc, #16]	; (8010958 <tcp_write+0x2c8>)
 8010948:	f004 f886 	bl	8014a58 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801094c:	e0d2      	b.n	8010af4 <tcp_write+0x464>
 801094e:	bf00      	nop
 8010950:	08017244 	.word	0x08017244
 8010954:	0801736c 	.word	0x0801736c
 8010958:	080172a8 	.word	0x080172a8
 801095c:	080173a0 	.word	0x080173a0
 8010960:	080173b8 	.word	0x080173b8
 8010964:	080173d8 	.word	0x080173d8
 8010968:	080173f8 	.word	0x080173f8
 801096c:	08017424 	.word	0x08017424
    struct pbuf *p;
    u16_t left = len - pos;
 8010970:	88fa      	ldrh	r2, [r7, #6]
 8010972:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801097a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801097e:	b29b      	uxth	r3, r3
 8010980:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010982:	1ad3      	subs	r3, r2, r3
 8010984:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010986:	8b7a      	ldrh	r2, [r7, #26]
 8010988:	8bbb      	ldrh	r3, [r7, #28]
 801098a:	4293      	cmp	r3, r2
 801098c:	bf28      	it	cs
 801098e:	4613      	movcs	r3, r2
 8010990:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010992:	797b      	ldrb	r3, [r7, #5]
 8010994:	f003 0301 	and.w	r3, r3, #1
 8010998:	2b00      	cmp	r3, #0
 801099a:	d036      	beq.n	8010a0a <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801099c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	8b3b      	ldrh	r3, [r7, #24]
 80109a4:	4413      	add	r3, r2
 80109a6:	b299      	uxth	r1, r3
 80109a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	bf0c      	ite	eq
 80109ae:	2301      	moveq	r3, #1
 80109b0:	2300      	movne	r3, #0
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	f107 0012 	add.w	r0, r7, #18
 80109b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80109ba:	9302      	str	r3, [sp, #8]
 80109bc:	797b      	ldrb	r3, [r7, #5]
 80109be:	9301      	str	r3, [sp, #4]
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	9300      	str	r3, [sp, #0]
 80109c4:	4603      	mov	r3, r0
 80109c6:	2000      	movs	r0, #0
 80109c8:	f7ff fd8a 	bl	80104e0 <tcp_pbuf_prealloc>
 80109cc:	6338      	str	r0, [r7, #48]	; 0x30
 80109ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	f000 817e 	beq.w	8010cd2 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80109d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d8:	895b      	ldrh	r3, [r3, #10]
 80109da:	8b3a      	ldrh	r2, [r7, #24]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d906      	bls.n	80109ee <tcp_write+0x35e>
 80109e0:	4b8f      	ldr	r3, [pc, #572]	; (8010c20 <tcp_write+0x590>)
 80109e2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80109e6:	498f      	ldr	r1, [pc, #572]	; (8010c24 <tcp_write+0x594>)
 80109e8:	488f      	ldr	r0, [pc, #572]	; (8010c28 <tcp_write+0x598>)
 80109ea:	f004 f835 	bl	8014a58 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80109ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f0:	685a      	ldr	r2, [r3, #4]
 80109f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109f6:	18d0      	adds	r0, r2, r3
 80109f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109fc:	68ba      	ldr	r2, [r7, #8]
 80109fe:	4413      	add	r3, r2
 8010a00:	8b3a      	ldrh	r2, [r7, #24]
 8010a02:	4619      	mov	r1, r3
 8010a04:	f004 f959 	bl	8014cba <memcpy>
 8010a08:	e02e      	b.n	8010a68 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010a0a:	8a7b      	ldrh	r3, [r7, #18]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d006      	beq.n	8010a1e <tcp_write+0x38e>
 8010a10:	4b83      	ldr	r3, [pc, #524]	; (8010c20 <tcp_write+0x590>)
 8010a12:	f240 224b 	movw	r2, #587	; 0x24b
 8010a16:	4985      	ldr	r1, [pc, #532]	; (8010c2c <tcp_write+0x59c>)
 8010a18:	4883      	ldr	r0, [pc, #524]	; (8010c28 <tcp_write+0x598>)
 8010a1a:	f004 f81d 	bl	8014a58 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010a1e:	8b3b      	ldrh	r3, [r7, #24]
 8010a20:	2201      	movs	r2, #1
 8010a22:	4619      	mov	r1, r3
 8010a24:	2000      	movs	r0, #0
 8010a26:	f7fa ffc1 	bl	800b9ac <pbuf_alloc>
 8010a2a:	6178      	str	r0, [r7, #20]
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f000 8151 	beq.w	8010cd6 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8010a34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a38:	68ba      	ldr	r2, [r7, #8]
 8010a3a:	441a      	add	r2, r3
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	2200      	movs	r2, #0
 8010a48:	4619      	mov	r1, r3
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	f7fa ffae 	bl	800b9ac <pbuf_alloc>
 8010a50:	6338      	str	r0, [r7, #48]	; 0x30
 8010a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d103      	bne.n	8010a60 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010a58:	6978      	ldr	r0, [r7, #20]
 8010a5a:	f7fb fb1f 	bl	800c09c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010a5e:	e13d      	b.n	8010cdc <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010a60:	6979      	ldr	r1, [r7, #20]
 8010a62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a64:	f7fb fbf2 	bl	800c24c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a6a:	f7fb fbb1 	bl	800c1d0 <pbuf_clen>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	461a      	mov	r2, r3
 8010a72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a76:	4413      	add	r3, r2
 8010a78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010a7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a80:	2b09      	cmp	r3, #9
 8010a82:	d805      	bhi.n	8010a90 <tcp_write+0x400>
 8010a84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a88:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d903      	bls.n	8010a98 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a92:	f7fb fb03 	bl	800c09c <pbuf_free>
      goto memerr;
 8010a96:	e121      	b.n	8010cdc <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010a9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010aa0:	441a      	add	r2, r3
 8010aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010aa6:	9300      	str	r3, [sp, #0]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	2200      	movs	r2, #0
 8010aac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010aae:	68f8      	ldr	r0, [r7, #12]
 8010ab0:	f7ff fc8e 	bl	80103d0 <tcp_create_segment>
 8010ab4:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 810e 	beq.w	8010cda <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d102      	bne.n	8010aca <tcp_write+0x43a>
      queue = seg;
 8010ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8010ac8:	e00c      	b.n	8010ae4 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d106      	bne.n	8010ade <tcp_write+0x44e>
 8010ad0:	4b53      	ldr	r3, [pc, #332]	; (8010c20 <tcp_write+0x590>)
 8010ad2:	f240 2285 	movw	r2, #645	; 0x285
 8010ad6:	4956      	ldr	r1, [pc, #344]	; (8010c30 <tcp_write+0x5a0>)
 8010ad8:	4853      	ldr	r0, [pc, #332]	; (8010c28 <tcp_write+0x598>)
 8010ada:	f003 ffbd 	bl	8014a58 <iprintf>
      prev_seg->next = seg;
 8010ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ae2:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ae6:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010ae8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010aec:	8b3b      	ldrh	r3, [r7, #24]
 8010aee:	4413      	add	r3, r2
 8010af0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010af4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010af8:	88fb      	ldrh	r3, [r7, #6]
 8010afa:	429a      	cmp	r2, r3
 8010afc:	f4ff af38 	bcc.w	8010970 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010b00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d02c      	beq.n	8010b60 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b0c:	e01e      	b.n	8010b4c <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8010b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b10:	891a      	ldrh	r2, [r3, #8]
 8010b12:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b14:	4413      	add	r3, r2
 8010b16:	b29a      	uxth	r2, r3
 8010b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d110      	bne.n	8010b46 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b2a:	8952      	ldrh	r2, [r2, #10]
 8010b2c:	4413      	add	r3, r2
 8010b2e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010b30:	68b9      	ldr	r1, [r7, #8]
 8010b32:	4618      	mov	r0, r3
 8010b34:	f004 f8c1 	bl	8014cba <memcpy>
        p->len += oversize_used;
 8010b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3a:	895a      	ldrh	r2, [r3, #10]
 8010b3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b3e:	4413      	add	r3, r2
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b44:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d1dd      	bne.n	8010b0e <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8010b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b54:	891a      	ldrh	r2, [r3, #8]
 8010b56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b58:	4413      	add	r3, r2
 8010b5a:	b29a      	uxth	r2, r3
 8010b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b5e:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010b60:	8a7a      	ldrh	r2, [r7, #18]
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d018      	beq.n	8010ba0 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d106      	bne.n	8010b82 <tcp_write+0x4f2>
 8010b74:	4b2a      	ldr	r3, [pc, #168]	; (8010c20 <tcp_write+0x590>)
 8010b76:	f240 22ba 	movw	r2, #698	; 0x2ba
 8010b7a:	492e      	ldr	r1, [pc, #184]	; (8010c34 <tcp_write+0x5a4>)
 8010b7c:	482a      	ldr	r0, [pc, #168]	; (8010c28 <tcp_write+0x598>)
 8010b7e:	f003 ff6b 	bl	8014a58 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7fb fb5f 	bl	800c24c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b90:	891a      	ldrh	r2, [r3, #8]
 8010b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b94:	891b      	ldrh	r3, [r3, #8]
 8010b96:	4413      	add	r3, r2
 8010b98:	b29a      	uxth	r2, r3
 8010b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b9c:	811a      	strh	r2, [r3, #8]
 8010b9e:	e037      	b.n	8010c10 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8010ba0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d034      	beq.n	8010c10 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d003      	beq.n	8010bb4 <tcp_write+0x524>
 8010bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d106      	bne.n	8010bc2 <tcp_write+0x532>
 8010bb4:	4b1a      	ldr	r3, [pc, #104]	; (8010c20 <tcp_write+0x590>)
 8010bb6:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8010bba:	491f      	ldr	r1, [pc, #124]	; (8010c38 <tcp_write+0x5a8>)
 8010bbc:	481a      	ldr	r0, [pc, #104]	; (8010c28 <tcp_write+0x598>)
 8010bbe:	f003 ff4b 	bl	8014a58 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010bc8:	e009      	b.n	8010bde <tcp_write+0x54e>
      p->tot_len += extendlen;
 8010bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bcc:	891a      	ldrh	r2, [r3, #8]
 8010bce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bd0:	4413      	add	r3, r2
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd6:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8010bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d1f1      	bne.n	8010bca <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8010be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be8:	891a      	ldrh	r2, [r3, #8]
 8010bea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bec:	4413      	add	r3, r2
 8010bee:	b29a      	uxth	r2, r3
 8010bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf2:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf6:	895a      	ldrh	r2, [r3, #10]
 8010bf8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bfa:	4413      	add	r3, r2
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c00:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c04:	891a      	ldrh	r2, [r3, #8]
 8010c06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c08:	4413      	add	r3, r2
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c0e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d112      	bne.n	8010c3c <tcp_write+0x5ac>
    pcb->unsent = queue;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c1a:	669a      	str	r2, [r3, #104]	; 0x68
 8010c1c:	e011      	b.n	8010c42 <tcp_write+0x5b2>
 8010c1e:	bf00      	nop
 8010c20:	08017244 	.word	0x08017244
 8010c24:	08017454 	.word	0x08017454
 8010c28:	080172a8 	.word	0x080172a8
 8010c2c:	08017494 	.word	0x08017494
 8010c30:	080174a4 	.word	0x080174a4
 8010c34:	080174b8 	.word	0x080174b8
 8010c38:	080174f0 	.word	0x080174f0
  } else {
    last_unsent->next = queue;
 8010c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c40:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010c46:	88fb      	ldrh	r3, [r7, #6]
 8010c48:	441a      	add	r2, r3
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010c54:	88fb      	ldrh	r3, [r7, #6]
 8010c56:	1ad3      	subs	r3, r2, r3
 8010c58:	b29a      	uxth	r2, r3
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010c66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00e      	beq.n	8010c92 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d10a      	bne.n	8010c92 <tcp_write+0x602>
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d106      	bne.n	8010c92 <tcp_write+0x602>
 8010c84:	4b2c      	ldr	r3, [pc, #176]	; (8010d38 <tcp_write+0x6a8>)
 8010c86:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8010c8a:	492c      	ldr	r1, [pc, #176]	; (8010d3c <tcp_write+0x6ac>)
 8010c8c:	482c      	ldr	r0, [pc, #176]	; (8010d40 <tcp_write+0x6b0>)
 8010c8e:	f003 fee3 	bl	8014a58 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8010c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d016      	beq.n	8010cc6 <tcp_write+0x636>
 8010c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d012      	beq.n	8010cc6 <tcp_write+0x636>
 8010ca0:	797b      	ldrb	r3, [r7, #5]
 8010ca2:	f003 0302 	and.w	r3, r3, #2
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d10d      	bne.n	8010cc6 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cac:	68db      	ldr	r3, [r3, #12]
 8010cae:	899b      	ldrh	r3, [r3, #12]
 8010cb0:	b29c      	uxth	r4, r3
 8010cb2:	2008      	movs	r0, #8
 8010cb4:	f7fa f81c 	bl	800acf0 <lwip_htons>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	461a      	mov	r2, r3
 8010cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	4322      	orrs	r2, r4
 8010cc2:	b292      	uxth	r2, r2
 8010cc4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	e031      	b.n	8010d2e <tcp_write+0x69e>
          goto memerr;
 8010cca:	bf00      	nop
 8010ccc:	e006      	b.n	8010cdc <tcp_write+0x64c>
            goto memerr;
 8010cce:	bf00      	nop
 8010cd0:	e004      	b.n	8010cdc <tcp_write+0x64c>
        goto memerr;
 8010cd2:	bf00      	nop
 8010cd4:	e002      	b.n	8010cdc <tcp_write+0x64c>
        goto memerr;
 8010cd6:	bf00      	nop
 8010cd8:	e000      	b.n	8010cdc <tcp_write+0x64c>
      goto memerr;
 8010cda:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	7e9b      	ldrb	r3, [r3, #26]
 8010ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010ce4:	b2da      	uxtb	r2, r3
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d002      	beq.n	8010cf6 <tcp_write+0x666>
    pbuf_free(concat_p);
 8010cf0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010cf2:	f7fb f9d3 	bl	800c09c <pbuf_free>
  }
  if (queue != NULL) {
 8010cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d002      	beq.n	8010d02 <tcp_write+0x672>
    tcp_segs_free(queue);
 8010cfc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010cfe:	f7fc fcd8 	bl	800d6b2 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d00e      	beq.n	8010d2a <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d10a      	bne.n	8010d2a <tcp_write+0x69a>
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d106      	bne.n	8010d2a <tcp_write+0x69a>
 8010d1c:	4b06      	ldr	r3, [pc, #24]	; (8010d38 <tcp_write+0x6a8>)
 8010d1e:	f240 3201 	movw	r2, #769	; 0x301
 8010d22:	4906      	ldr	r1, [pc, #24]	; (8010d3c <tcp_write+0x6ac>)
 8010d24:	4806      	ldr	r0, [pc, #24]	; (8010d40 <tcp_write+0x6b0>)
 8010d26:	f003 fe97 	bl	8014a58 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	375c      	adds	r7, #92	; 0x5c
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd90      	pop	{r4, r7, pc}
 8010d36:	bf00      	nop
 8010d38:	08017244 	.word	0x08017244
 8010d3c:	08017528 	.word	0x08017528
 8010d40:	080172a8 	.word	0x080172a8

08010d44 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b08a      	sub	sp, #40	; 0x28
 8010d48:	af02      	add	r7, sp, #8
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010d50:	2300      	movs	r3, #0
 8010d52:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010d54:	2300      	movs	r3, #0
 8010d56:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010d58:	78fb      	ldrb	r3, [r7, #3]
 8010d5a:	f003 0303 	and.w	r3, r3, #3
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d106      	bne.n	8010d70 <tcp_enqueue_flags+0x2c>
 8010d62:	4b6f      	ldr	r3, [pc, #444]	; (8010f20 <tcp_enqueue_flags+0x1dc>)
 8010d64:	f240 321a 	movw	r2, #794	; 0x31a
 8010d68:	496e      	ldr	r1, [pc, #440]	; (8010f24 <tcp_enqueue_flags+0x1e0>)
 8010d6a:	486f      	ldr	r0, [pc, #444]	; (8010f28 <tcp_enqueue_flags+0x1e4>)
 8010d6c:	f003 fe74 	bl	8014a58 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d76:	2b08      	cmp	r3, #8
 8010d78:	d806      	bhi.n	8010d88 <tcp_enqueue_flags+0x44>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d80:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d90e      	bls.n	8010da6 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8010d88:	78fb      	ldrb	r3, [r7, #3]
 8010d8a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d109      	bne.n	8010da6 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	7e9b      	ldrb	r3, [r3, #26]
 8010d96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d9a:	b2da      	uxtb	r2, r3
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010da0:	f04f 33ff 	mov.w	r3, #4294967295
 8010da4:	e0b7      	b.n	8010f16 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8010da6:	78fb      	ldrb	r3, [r7, #3]
 8010da8:	f003 0302 	and.w	r3, r3, #2
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d001      	beq.n	8010db4 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8010db0:	2301      	movs	r3, #1
 8010db2:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010db4:	7ffb      	ldrb	r3, [r7, #31]
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	b2db      	uxtb	r3, r3
 8010dba:	f003 0304 	and.w	r3, r3, #4
 8010dbe:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010dc0:	7dfb      	ldrb	r3, [r7, #23]
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	2000      	movs	r0, #0
 8010dca:	f7fa fdef 	bl	800b9ac <pbuf_alloc>
 8010dce:	6138      	str	r0, [r7, #16]
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d109      	bne.n	8010dea <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	7e9b      	ldrb	r3, [r3, #26]
 8010dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010dde:	b2da      	uxtb	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010de4:	f04f 33ff 	mov.w	r3, #4294967295
 8010de8:	e095      	b.n	8010f16 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	895a      	ldrh	r2, [r3, #10]
 8010dee:	7dfb      	ldrb	r3, [r7, #23]
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d206      	bcs.n	8010e04 <tcp_enqueue_flags+0xc0>
 8010df6:	4b4a      	ldr	r3, [pc, #296]	; (8010f20 <tcp_enqueue_flags+0x1dc>)
 8010df8:	f44f 7250 	mov.w	r2, #832	; 0x340
 8010dfc:	494b      	ldr	r1, [pc, #300]	; (8010f2c <tcp_enqueue_flags+0x1e8>)
 8010dfe:	484a      	ldr	r0, [pc, #296]	; (8010f28 <tcp_enqueue_flags+0x1e4>)
 8010e00:	f003 fe2a 	bl	8014a58 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010e08:	78fa      	ldrb	r2, [r7, #3]
 8010e0a:	7ffb      	ldrb	r3, [r7, #31]
 8010e0c:	9300      	str	r3, [sp, #0]
 8010e0e:	460b      	mov	r3, r1
 8010e10:	6939      	ldr	r1, [r7, #16]
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f7ff fadc 	bl	80103d0 <tcp_create_segment>
 8010e18:	60f8      	str	r0, [r7, #12]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d109      	bne.n	8010e34 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	7e9b      	ldrb	r3, [r3, #26]
 8010e24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010e28:	b2da      	uxtb	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e32:	e070      	b.n	8010f16 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	f003 0303 	and.w	r3, r3, #3
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d006      	beq.n	8010e4e <tcp_enqueue_flags+0x10a>
 8010e40:	4b37      	ldr	r3, [pc, #220]	; (8010f20 <tcp_enqueue_flags+0x1dc>)
 8010e42:	f240 3249 	movw	r2, #841	; 0x349
 8010e46:	493a      	ldr	r1, [pc, #232]	; (8010f30 <tcp_enqueue_flags+0x1ec>)
 8010e48:	4837      	ldr	r0, [pc, #220]	; (8010f28 <tcp_enqueue_flags+0x1e4>)
 8010e4a:	f003 fe05 	bl	8014a58 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	891b      	ldrh	r3, [r3, #8]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d006      	beq.n	8010e64 <tcp_enqueue_flags+0x120>
 8010e56:	4b32      	ldr	r3, [pc, #200]	; (8010f20 <tcp_enqueue_flags+0x1dc>)
 8010e58:	f240 324a 	movw	r2, #842	; 0x34a
 8010e5c:	4935      	ldr	r1, [pc, #212]	; (8010f34 <tcp_enqueue_flags+0x1f0>)
 8010e5e:	4832      	ldr	r0, [pc, #200]	; (8010f28 <tcp_enqueue_flags+0x1e4>)
 8010e60:	f003 fdfa 	bl	8014a58 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d103      	bne.n	8010e74 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	68fa      	ldr	r2, [r7, #12]
 8010e70:	669a      	str	r2, [r3, #104]	; 0x68
 8010e72:	e00d      	b.n	8010e90 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e78:	61bb      	str	r3, [r7, #24]
 8010e7a:	e002      	b.n	8010e82 <tcp_enqueue_flags+0x13e>
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	61bb      	str	r3, [r7, #24]
 8010e82:	69bb      	ldr	r3, [r7, #24]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d1f8      	bne.n	8010e7c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8010e8a:	69bb      	ldr	r3, [r7, #24]
 8010e8c:	68fa      	ldr	r2, [r7, #12]
 8010e8e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010e98:	78fb      	ldrb	r3, [r7, #3]
 8010e9a:	f003 0302 	and.w	r3, r3, #2
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d104      	bne.n	8010eac <tcp_enqueue_flags+0x168>
 8010ea2:	78fb      	ldrb	r3, [r7, #3]
 8010ea4:	f003 0301 	and.w	r3, r3, #1
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d004      	beq.n	8010eb6 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eb0:	1c5a      	adds	r2, r3, #1
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010eb6:	78fb      	ldrb	r3, [r7, #3]
 8010eb8:	f003 0301 	and.w	r3, r3, #1
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d006      	beq.n	8010ece <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	7e9b      	ldrb	r3, [r3, #26]
 8010ec4:	f043 0320 	orr.w	r3, r3, #32
 8010ec8:	b2da      	uxtb	r2, r3
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7fb f97c 	bl	800c1d0 <pbuf_clen>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	461a      	mov	r2, r3
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010ee2:	4413      	add	r3, r2
 8010ee4:	b29a      	uxth	r2, r3
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d00e      	beq.n	8010f14 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d10a      	bne.n	8010f14 <tcp_enqueue_flags+0x1d0>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d106      	bne.n	8010f14 <tcp_enqueue_flags+0x1d0>
 8010f06:	4b06      	ldr	r3, [pc, #24]	; (8010f20 <tcp_enqueue_flags+0x1dc>)
 8010f08:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010f0c:	490a      	ldr	r1, [pc, #40]	; (8010f38 <tcp_enqueue_flags+0x1f4>)
 8010f0e:	4806      	ldr	r0, [pc, #24]	; (8010f28 <tcp_enqueue_flags+0x1e4>)
 8010f10:	f003 fda2 	bl	8014a58 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010f14:	2300      	movs	r3, #0
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3720      	adds	r7, #32
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	08017244 	.word	0x08017244
 8010f24:	08017548 	.word	0x08017548
 8010f28:	080172a8 	.word	0x080172a8
 8010f2c:	080175a0 	.word	0x080175a0
 8010f30:	080175dc 	.word	0x080175dc
 8010f34:	080175f4 	.word	0x080175f4
 8010f38:	08017620 	.word	0x08017620

08010f3c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010f3c:	b590      	push	{r4, r7, lr}
 8010f3e:	b08b      	sub	sp, #44	; 0x2c
 8010f40:	af04      	add	r7, sp, #16
 8010f42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8010f44:	2300      	movs	r3, #0
 8010f46:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010f48:	7dbb      	ldrb	r3, [r7, #22]
 8010f4a:	b29c      	uxth	r4, r3
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7f9 feda 	bl	800ad0a <lwip_htonl>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2200      	movs	r2, #0
 8010f5a:	4621      	mov	r1, r4
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f7ff f97d 	bl	801025c <tcp_output_alloc_header>
 8010f62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d109      	bne.n	8010f7e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	7e9b      	ldrb	r3, [r3, #26]
 8010f6e:	f043 0303 	orr.w	r3, r3, #3
 8010f72:	b2da      	uxtb	r2, r3
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010f78:	f06f 0301 	mvn.w	r3, #1
 8010f7c:	e036      	b.n	8010fec <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	3304      	adds	r3, #4
 8010f82:	4618      	mov	r0, r3
 8010f84:	f002 f978 	bl	8013278 <ip4_route>
 8010f88:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d102      	bne.n	8010f96 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8010f90:	23fc      	movs	r3, #252	; 0xfc
 8010f92:	75fb      	strb	r3, [r7, #23]
 8010f94:	e012      	b.n	8010fbc <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8010f96:	6879      	ldr	r1, [r7, #4]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	1d18      	adds	r0, r3, #4
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	7a9c      	ldrb	r4, [r3, #10]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	7a5b      	ldrb	r3, [r3, #9]
 8010fa4:	68fa      	ldr	r2, [r7, #12]
 8010fa6:	9202      	str	r2, [sp, #8]
 8010fa8:	2206      	movs	r2, #6
 8010faa:	9201      	str	r2, [sp, #4]
 8010fac:	9300      	str	r3, [sp, #0]
 8010fae:	4623      	mov	r3, r4
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	6938      	ldr	r0, [r7, #16]
 8010fb4:	f002 fb0a 	bl	80135cc <ip4_output_if>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8010fbc:	6938      	ldr	r0, [r7, #16]
 8010fbe:	f7fb f86d 	bl	800c09c <pbuf_free>

  if (err != ERR_OK) {
 8010fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d007      	beq.n	8010fda <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	7e9b      	ldrb	r3, [r3, #26]
 8010fce:	f043 0303 	orr.w	r3, r3, #3
 8010fd2:	b2da      	uxtb	r2, r3
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	769a      	strb	r2, [r3, #26]
 8010fd8:	e006      	b.n	8010fe8 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	7e9b      	ldrb	r3, [r3, #26]
 8010fde:	f023 0303 	bic.w	r3, r3, #3
 8010fe2:	b2da      	uxtb	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8010fe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	371c      	adds	r7, #28
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd90      	pop	{r4, r7, pc}

08010ff4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010ff4:	b5b0      	push	{r4, r5, r7, lr}
 8010ff6:	b08a      	sub	sp, #40	; 0x28
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	7d1b      	ldrb	r3, [r3, #20]
 8011000:	2b01      	cmp	r3, #1
 8011002:	d106      	bne.n	8011012 <tcp_output+0x1e>
 8011004:	4b99      	ldr	r3, [pc, #612]	; (801126c <tcp_output+0x278>)
 8011006:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801100a:	4999      	ldr	r1, [pc, #612]	; (8011270 <tcp_output+0x27c>)
 801100c:	4899      	ldr	r0, [pc, #612]	; (8011274 <tcp_output+0x280>)
 801100e:	f003 fd23 	bl	8014a58 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011012:	4b99      	ldr	r3, [pc, #612]	; (8011278 <tcp_output+0x284>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	429a      	cmp	r2, r3
 801101a:	d101      	bne.n	8011020 <tcp_output+0x2c>
    return ERR_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	e1cb      	b.n	80113b8 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801102c:	4293      	cmp	r3, r2
 801102e:	bf28      	it	cs
 8011030:	4613      	movcs	r3, r2
 8011032:	b29b      	uxth	r3, r3
 8011034:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801103a:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	7e9b      	ldrb	r3, [r3, #26]
 8011040:	f003 0302 	and.w	r3, r3, #2
 8011044:	2b00      	cmp	r3, #0
 8011046:	d017      	beq.n	8011078 <tcp_output+0x84>
 8011048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104a:	2b00      	cmp	r3, #0
 801104c:	d00f      	beq.n	801106e <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	4618      	mov	r0, r3
 8011056:	f7f9 fe58 	bl	800ad0a <lwip_htonl>
 801105a:	4602      	mov	r2, r0
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011060:	1ad3      	subs	r3, r2, r3
 8011062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011064:	8912      	ldrh	r2, [r2, #8]
 8011066:	4413      	add	r3, r2
     (seg == NULL ||
 8011068:	69ba      	ldr	r2, [r7, #24]
 801106a:	429a      	cmp	r2, r3
 801106c:	d204      	bcs.n	8011078 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f7ff ff64 	bl	8010f3c <tcp_send_empty_ack>
 8011074:	4603      	mov	r3, r0
 8011076:	e19f      	b.n	80113b8 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801107c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801107e:	6a3b      	ldr	r3, [r7, #32]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d007      	beq.n	8011094 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 8011084:	e002      	b.n	801108c <tcp_output+0x98>
 8011086:	6a3b      	ldr	r3, [r7, #32]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	623b      	str	r3, [r7, #32]
 801108c:	6a3b      	ldr	r3, [r7, #32]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d1f8      	bne.n	8011086 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	3304      	adds	r3, #4
 8011098:	4618      	mov	r0, r3
 801109a:	f002 f8ed 	bl	8013278 <ip4_route>
 801109e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d102      	bne.n	80110ac <tcp_output+0xb8>
    return ERR_RTE;
 80110a6:	f06f 0303 	mvn.w	r3, #3
 80110aa:	e185      	b.n	80113b8 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d003      	beq.n	80110ba <tcp_output+0xc6>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d111      	bne.n	80110de <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d002      	beq.n	80110c6 <tcp_output+0xd2>
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	3304      	adds	r3, #4
 80110c4:	e000      	b.n	80110c8 <tcp_output+0xd4>
 80110c6:	2300      	movs	r3, #0
 80110c8:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d102      	bne.n	80110d6 <tcp_output+0xe2>
      return ERR_RTE;
 80110d0:	f06f 0303 	mvn.w	r3, #3
 80110d4:	e170      	b.n	80113b8 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 80110de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	f000 813f 	beq.w	8011364 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80110e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e8:	68db      	ldr	r3, [r3, #12]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	4618      	mov	r0, r3
 80110ee:	f7f9 fe0c 	bl	800ad0a <lwip_htonl>
 80110f2:	4602      	mov	r2, r0
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110f8:	1ad3      	subs	r3, r2, r3
 80110fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110fc:	8912      	ldrh	r2, [r2, #8]
 80110fe:	4413      	add	r3, r2
  if (seg != NULL &&
 8011100:	69ba      	ldr	r2, [r7, #24]
 8011102:	429a      	cmp	r2, r3
 8011104:	f080 812e 	bcs.w	8011364 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	2b00      	cmp	r3, #0
 801110c:	f000 812a 	beq.w	8011364 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011116:	461a      	mov	r2, r3
 8011118:	69bb      	ldr	r3, [r7, #24]
 801111a:	4293      	cmp	r3, r2
 801111c:	f040 8122 	bne.w	8011364 <tcp_output+0x370>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011124:	2b00      	cmp	r3, #0
 8011126:	f040 811d 	bne.w	8011364 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011130:	2b00      	cmp	r3, #0
 8011132:	f040 812c 	bne.w	801138e <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2200      	movs	r2, #0
 801113a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2201      	movs	r2, #1
 8011142:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8011146:	e122      	b.n	801138e <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	899b      	ldrh	r3, [r3, #12]
 801114e:	b29b      	uxth	r3, r3
 8011150:	4618      	mov	r0, r3
 8011152:	f7f9 fdcd 	bl	800acf0 <lwip_htons>
 8011156:	4603      	mov	r3, r0
 8011158:	f003 0304 	and.w	r3, r3, #4
 801115c:	2b00      	cmp	r3, #0
 801115e:	d006      	beq.n	801116e <tcp_output+0x17a>
 8011160:	4b42      	ldr	r3, [pc, #264]	; (801126c <tcp_output+0x278>)
 8011162:	f240 4245 	movw	r2, #1093	; 0x445
 8011166:	4945      	ldr	r1, [pc, #276]	; (801127c <tcp_output+0x288>)
 8011168:	4842      	ldr	r0, [pc, #264]	; (8011274 <tcp_output+0x280>)
 801116a:	f003 fc75 	bl	8014a58 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011172:	2b00      	cmp	r3, #0
 8011174:	d01f      	beq.n	80111b6 <tcp_output+0x1c2>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	7e9b      	ldrb	r3, [r3, #26]
 801117a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801117e:	2b00      	cmp	r3, #0
 8011180:	d119      	bne.n	80111b6 <tcp_output+0x1c2>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011186:	2b00      	cmp	r3, #0
 8011188:	d00b      	beq.n	80111a2 <tcp_output+0x1ae>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d110      	bne.n	80111b6 <tcp_output+0x1c2>
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011198:	891a      	ldrh	r2, [r3, #8]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801119e:	429a      	cmp	r2, r3
 80111a0:	d209      	bcs.n	80111b6 <tcp_output+0x1c2>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d004      	beq.n	80111b6 <tcp_output+0x1c2>
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80111b2:	2b08      	cmp	r3, #8
 80111b4:	d901      	bls.n	80111ba <tcp_output+0x1c6>
 80111b6:	2301      	movs	r3, #1
 80111b8:	e000      	b.n	80111bc <tcp_output+0x1c8>
 80111ba:	2300      	movs	r3, #0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d106      	bne.n	80111ce <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	7e9b      	ldrb	r3, [r3, #26]
 80111c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f000 80e2 	beq.w	8011392 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	7d1b      	ldrb	r3, [r3, #20]
 80111d2:	2b02      	cmp	r3, #2
 80111d4:	d00d      	beq.n	80111f2 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80111d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d8:	68db      	ldr	r3, [r3, #12]
 80111da:	899b      	ldrh	r3, [r3, #12]
 80111dc:	b29c      	uxth	r4, r3
 80111de:	2010      	movs	r0, #16
 80111e0:	f7f9 fd86 	bl	800acf0 <lwip_htons>
 80111e4:	4603      	mov	r3, r0
 80111e6:	461a      	mov	r2, r3
 80111e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	4322      	orrs	r2, r4
 80111ee:	b292      	uxth	r2, r2
 80111f0:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80111f2:	697a      	ldr	r2, [r7, #20]
 80111f4:	6879      	ldr	r1, [r7, #4]
 80111f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111f8:	f000 f8e2 	bl	80113c0 <tcp_output_segment>
 80111fc:	4603      	mov	r3, r0
 80111fe:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d009      	beq.n	801121c <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	7e9b      	ldrb	r3, [r3, #26]
 801120c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011210:	b2da      	uxtb	r2, r3
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	769a      	strb	r2, [r3, #26]
      return err;
 8011216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801121a:	e0cd      	b.n	80113b8 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 801121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	7d1b      	ldrb	r3, [r3, #20]
 8011228:	2b02      	cmp	r3, #2
 801122a:	d006      	beq.n	801123a <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	7e9b      	ldrb	r3, [r3, #26]
 8011230:	f023 0303 	bic.w	r3, r3, #3
 8011234:	b2da      	uxtb	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	685b      	ldr	r3, [r3, #4]
 8011240:	4618      	mov	r0, r3
 8011242:	f7f9 fd62 	bl	800ad0a <lwip_htonl>
 8011246:	4604      	mov	r4, r0
 8011248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801124a:	891b      	ldrh	r3, [r3, #8]
 801124c:	461d      	mov	r5, r3
 801124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	899b      	ldrh	r3, [r3, #12]
 8011254:	b29b      	uxth	r3, r3
 8011256:	4618      	mov	r0, r3
 8011258:	f7f9 fd4a 	bl	800acf0 <lwip_htons>
 801125c:	4603      	mov	r3, r0
 801125e:	f003 0303 	and.w	r3, r3, #3
 8011262:	2b00      	cmp	r3, #0
 8011264:	d00c      	beq.n	8011280 <tcp_output+0x28c>
 8011266:	2301      	movs	r3, #1
 8011268:	e00b      	b.n	8011282 <tcp_output+0x28e>
 801126a:	bf00      	nop
 801126c:	08017244 	.word	0x08017244
 8011270:	08017648 	.word	0x08017648
 8011274:	080172a8 	.word	0x080172a8
 8011278:	2000ba60 	.word	0x2000ba60
 801127c:	08017670 	.word	0x08017670
 8011280:	2300      	movs	r3, #0
 8011282:	442b      	add	r3, r5
 8011284:	4423      	add	r3, r4
 8011286:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	1ad3      	subs	r3, r2, r3
 8011290:	2b00      	cmp	r3, #0
 8011292:	da02      	bge.n	801129a <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	68ba      	ldr	r2, [r7, #8]
 8011298:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129c:	891b      	ldrh	r3, [r3, #8]
 801129e:	461c      	mov	r4, r3
 80112a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	899b      	ldrh	r3, [r3, #12]
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7f9 fd21 	bl	800acf0 <lwip_htons>
 80112ae:	4603      	mov	r3, r0
 80112b0:	f003 0303 	and.w	r3, r3, #3
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d001      	beq.n	80112bc <tcp_output+0x2c8>
 80112b8:	2301      	movs	r3, #1
 80112ba:	e000      	b.n	80112be <tcp_output+0x2ca>
 80112bc:	2300      	movs	r3, #0
 80112be:	4423      	add	r3, r4
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d049      	beq.n	8011358 <tcp_output+0x364>
      seg->next = NULL;
 80112c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c6:	2200      	movs	r2, #0
 80112c8:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d105      	bne.n	80112de <tcp_output+0x2ea>
        pcb->unacked = seg;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112d6:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 80112d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112da:	623b      	str	r3, [r7, #32]
 80112dc:	e03f      	b.n	801135e <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80112de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7f9 fd10 	bl	800ad0a <lwip_htonl>
 80112ea:	4604      	mov	r4, r0
 80112ec:	6a3b      	ldr	r3, [r7, #32]
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7f9 fd09 	bl	800ad0a <lwip_htonl>
 80112f8:	4603      	mov	r3, r0
 80112fa:	1ae3      	subs	r3, r4, r3
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	da24      	bge.n	801134a <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	336c      	adds	r3, #108	; 0x6c
 8011304:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011306:	e002      	b.n	801130e <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801130e:	69fb      	ldr	r3, [r7, #28]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d011      	beq.n	801133a <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011316:	69fb      	ldr	r3, [r7, #28]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	4618      	mov	r0, r3
 8011320:	f7f9 fcf3 	bl	800ad0a <lwip_htonl>
 8011324:	4604      	mov	r4, r0
 8011326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	4618      	mov	r0, r3
 801132e:	f7f9 fcec 	bl	800ad0a <lwip_htonl>
 8011332:	4603      	mov	r3, r0
 8011334:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011336:	2b00      	cmp	r3, #0
 8011338:	dbe6      	blt.n	8011308 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 801133a:	69fb      	ldr	r3, [r7, #28]
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011340:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011342:	69fb      	ldr	r3, [r7, #28]
 8011344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011346:	601a      	str	r2, [r3, #0]
 8011348:	e009      	b.n	801135e <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801134a:	6a3b      	ldr	r3, [r7, #32]
 801134c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801134e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011350:	6a3b      	ldr	r3, [r7, #32]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	623b      	str	r3, [r7, #32]
 8011356:	e002      	b.n	801135e <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801135a:	f7fc f9bf 	bl	800d6dc <tcp_seg_free>
    }
    seg = pcb->unsent;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011362:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011366:	2b00      	cmp	r3, #0
 8011368:	d015      	beq.n	8011396 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	4618      	mov	r0, r3
 8011372:	f7f9 fcca 	bl	800ad0a <lwip_htonl>
 8011376:	4602      	mov	r2, r0
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801137c:	1ad3      	subs	r3, r2, r3
 801137e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011380:	8912      	ldrh	r2, [r2, #8]
 8011382:	4413      	add	r3, r2
  while (seg != NULL &&
 8011384:	69ba      	ldr	r2, [r7, #24]
 8011386:	429a      	cmp	r2, r3
 8011388:	f4bf aede 	bcs.w	8011148 <tcp_output+0x154>
  }
output_done:
 801138c:	e003      	b.n	8011396 <tcp_output+0x3a2>
    goto output_done;
 801138e:	bf00      	nop
 8011390:	e002      	b.n	8011398 <tcp_output+0x3a4>
      break;
 8011392:	bf00      	nop
 8011394:	e000      	b.n	8011398 <tcp_output+0x3a4>
output_done:
 8011396:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801139c:	2b00      	cmp	r3, #0
 801139e:	d103      	bne.n	80113a8 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2200      	movs	r2, #0
 80113a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	7e9b      	ldrb	r3, [r3, #26]
 80113ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113b0:	b2da      	uxtb	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80113b6:	2300      	movs	r3, #0
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3728      	adds	r7, #40	; 0x28
 80113bc:	46bd      	mov	sp, r7
 80113be:	bdb0      	pop	{r4, r5, r7, pc}

080113c0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80113c0:	b5b0      	push	{r4, r5, r7, lr}
 80113c2:	b08c      	sub	sp, #48	; 0x30
 80113c4:	af04      	add	r7, sp, #16
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	89db      	ldrh	r3, [r3, #14]
 80113d2:	2b01      	cmp	r3, #1
 80113d4:	d001      	beq.n	80113da <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80113d6:	2300      	movs	r3, #0
 80113d8:	e08a      	b.n	80114f0 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	68dc      	ldr	r4, [r3, #12]
 80113e2:	4610      	mov	r0, r2
 80113e4:	f7f9 fc91 	bl	800ad0a <lwip_htonl>
 80113e8:	4603      	mov	r3, r0
 80113ea:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	68dc      	ldr	r4, [r3, #12]
 80113f4:	4610      	mov	r0, r2
 80113f6:	f7f9 fc7b 	bl	800acf0 <lwip_htons>
 80113fa:	4603      	mov	r3, r0
 80113fc:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011402:	68ba      	ldr	r2, [r7, #8]
 8011404:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011406:	441a      	add	r2, r3
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	3314      	adds	r3, #20
 8011412:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	7a9b      	ldrb	r3, [r3, #10]
 8011418:	f003 0301 	and.w	r3, r3, #1
 801141c:	2b00      	cmp	r3, #0
 801141e:	d014      	beq.n	801144a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	3304      	adds	r3, #4
 8011424:	4619      	mov	r1, r3
 8011426:	f44f 7006 	mov.w	r0, #536	; 0x218
 801142a:	f7fc fc7b 	bl	800dd24 <tcp_eff_send_mss_impl>
 801142e:	4603      	mov	r3, r0
 8011430:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011432:	8b7b      	ldrh	r3, [r7, #26]
 8011434:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011438:	4618      	mov	r0, r3
 801143a:	f7f9 fc66 	bl	800ad0a <lwip_htonl>
 801143e:	4602      	mov	r2, r0
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	3304      	adds	r3, #4
 8011448:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011450:	2b00      	cmp	r3, #0
 8011452:	da02      	bge.n	801145a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	2200      	movs	r2, #0
 8011458:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801145e:	2b00      	cmp	r3, #0
 8011460:	d10c      	bne.n	801147c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8011462:	4b25      	ldr	r3, [pc, #148]	; (80114f8 <tcp_output_segment+0x138>)
 8011464:	681a      	ldr	r2, [r3, #0]
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	4618      	mov	r0, r3
 8011472:	f7f9 fc4a 	bl	800ad0a <lwip_htonl>
 8011476:	4602      	mov	r2, r0
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	68da      	ldr	r2, [r3, #12]
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	1ad3      	subs	r3, r2, r3
 8011488:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	8959      	ldrh	r1, [r3, #10]
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	8b3a      	ldrh	r2, [r7, #24]
 8011496:	1a8a      	subs	r2, r1, r2
 8011498:	b292      	uxth	r2, r2
 801149a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	8919      	ldrh	r1, [r3, #8]
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	8b3a      	ldrh	r2, [r7, #24]
 80114a8:	1a8a      	subs	r2, r1, r2
 80114aa:	b292      	uxth	r2, r2
 80114ac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	68fa      	ldr	r2, [r7, #12]
 80114b4:	68d2      	ldr	r2, [r2, #12]
 80114b6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	2200      	movs	r2, #0
 80114be:	741a      	strb	r2, [r3, #16]
 80114c0:	2200      	movs	r2, #0
 80114c2:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	6858      	ldr	r0, [r3, #4]
 80114c8:	68b9      	ldr	r1, [r7, #8]
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	1d1c      	adds	r4, r3, #4
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	7a9d      	ldrb	r5, [r3, #10]
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	7a5b      	ldrb	r3, [r3, #9]
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	9202      	str	r2, [sp, #8]
 80114da:	2206      	movs	r2, #6
 80114dc:	9201      	str	r2, [sp, #4]
 80114de:	9300      	str	r3, [sp, #0]
 80114e0:	462b      	mov	r3, r5
 80114e2:	4622      	mov	r2, r4
 80114e4:	f002 f872 	bl	80135cc <ip4_output_if>
 80114e8:	4603      	mov	r3, r0
 80114ea:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80114ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3720      	adds	r7, #32
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bdb0      	pop	{r4, r5, r7, pc}
 80114f8:	2000ba14 	.word	0x2000ba14

080114fc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b08c      	sub	sp, #48	; 0x30
 8011500:	af04      	add	r7, sp, #16
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	607a      	str	r2, [r7, #4]
 8011508:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801150a:	2200      	movs	r2, #0
 801150c:	2114      	movs	r1, #20
 801150e:	2001      	movs	r0, #1
 8011510:	f7fa fa4c 	bl	800b9ac <pbuf_alloc>
 8011514:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8011516:	69fb      	ldr	r3, [r7, #28]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d05b      	beq.n	80115d4 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	895b      	ldrh	r3, [r3, #10]
 8011520:	2b13      	cmp	r3, #19
 8011522:	d806      	bhi.n	8011532 <tcp_rst+0x36>
 8011524:	4b2d      	ldr	r3, [pc, #180]	; (80115dc <tcp_rst+0xe0>)
 8011526:	f240 524c 	movw	r2, #1356	; 0x54c
 801152a:	492d      	ldr	r1, [pc, #180]	; (80115e0 <tcp_rst+0xe4>)
 801152c:	482d      	ldr	r0, [pc, #180]	; (80115e4 <tcp_rst+0xe8>)
 801152e:	f003 fa93 	bl	8014a58 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8011532:	69fb      	ldr	r3, [r7, #28]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8011538:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801153a:	4618      	mov	r0, r3
 801153c:	f7f9 fbd8 	bl	800acf0 <lwip_htons>
 8011540:	4603      	mov	r3, r0
 8011542:	461a      	mov	r2, r3
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8011548:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801154a:	4618      	mov	r0, r3
 801154c:	f7f9 fbd0 	bl	800acf0 <lwip_htons>
 8011550:	4603      	mov	r3, r0
 8011552:	461a      	mov	r2, r3
 8011554:	69bb      	ldr	r3, [r7, #24]
 8011556:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	f7f9 fbd6 	bl	800ad0a <lwip_htonl>
 801155e:	4602      	mov	r2, r0
 8011560:	69bb      	ldr	r3, [r7, #24]
 8011562:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8011564:	68b8      	ldr	r0, [r7, #8]
 8011566:	f7f9 fbd0 	bl	800ad0a <lwip_htonl>
 801156a:	4602      	mov	r2, r0
 801156c:	69bb      	ldr	r3, [r7, #24]
 801156e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8011570:	f245 0014 	movw	r0, #20500	; 0x5014
 8011574:	f7f9 fbbc 	bl	800acf0 <lwip_htons>
 8011578:	4603      	mov	r3, r0
 801157a:	461a      	mov	r2, r3
 801157c:	69bb      	ldr	r3, [r7, #24]
 801157e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	2200      	movs	r2, #0
 8011584:	f042 0208 	orr.w	r2, r2, #8
 8011588:	739a      	strb	r2, [r3, #14]
 801158a:	2200      	movs	r2, #0
 801158c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8011590:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8011592:	69bb      	ldr	r3, [r7, #24]
 8011594:	2200      	movs	r2, #0
 8011596:	741a      	strb	r2, [r3, #16]
 8011598:	2200      	movs	r2, #0
 801159a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 801159c:	69bb      	ldr	r3, [r7, #24]
 801159e:	2200      	movs	r2, #0
 80115a0:	749a      	strb	r2, [r3, #18]
 80115a2:	2200      	movs	r2, #0
 80115a4:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80115a6:	6838      	ldr	r0, [r7, #0]
 80115a8:	f001 fe66 	bl	8013278 <ip4_route>
 80115ac:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d00b      	beq.n	80115cc <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	9302      	str	r3, [sp, #8]
 80115b8:	2306      	movs	r3, #6
 80115ba:	9301      	str	r3, [sp, #4]
 80115bc:	2300      	movs	r3, #0
 80115be:	9300      	str	r3, [sp, #0]
 80115c0:	23ff      	movs	r3, #255	; 0xff
 80115c2:	683a      	ldr	r2, [r7, #0]
 80115c4:	6879      	ldr	r1, [r7, #4]
 80115c6:	69f8      	ldr	r0, [r7, #28]
 80115c8:	f002 f800 	bl	80135cc <ip4_output_if>
  }
  pbuf_free(p);
 80115cc:	69f8      	ldr	r0, [r7, #28]
 80115ce:	f7fa fd65 	bl	800c09c <pbuf_free>
 80115d2:	e000      	b.n	80115d6 <tcp_rst+0xda>
    return;
 80115d4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80115d6:	3720      	adds	r7, #32
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	08017244 	.word	0x08017244
 80115e0:	08017278 	.word	0x08017278
 80115e4:	080172a8 	.word	0x080172a8

080115e8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b084      	sub	sp, #16
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d029      	beq.n	801164c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115fc:	60fb      	str	r3, [r7, #12]
 80115fe:	e002      	b.n	8011606 <tcp_rexmit_rto+0x1e>
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	60fb      	str	r3, [r7, #12]
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d1f8      	bne.n	8011600 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2200      	movs	r2, #0
 8011622:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801162a:	2bff      	cmp	r3, #255	; 0xff
 801162c:	d007      	beq.n	801163e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011634:	3301      	adds	r3, #1
 8011636:	b2da      	uxtb	r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2200      	movs	r2, #0
 8011642:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f7ff fcd5 	bl	8010ff4 <tcp_output>
 801164a:	e000      	b.n	801164e <tcp_rexmit_rto+0x66>
    return;
 801164c:	bf00      	nop
}
 801164e:	3710      	adds	r7, #16
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011654:	b590      	push	{r4, r7, lr}
 8011656:	b085      	sub	sp, #20
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011660:	2b00      	cmp	r3, #0
 8011662:	d043      	beq.n	80116ec <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011668:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	681a      	ldr	r2, [r3, #0]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	3368      	adds	r3, #104	; 0x68
 8011676:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011678:	e002      	b.n	8011680 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d011      	beq.n	80116ac <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	4618      	mov	r0, r3
 8011692:	f7f9 fb3a 	bl	800ad0a <lwip_htonl>
 8011696:	4604      	mov	r4, r0
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	4618      	mov	r0, r3
 80116a0:	f7f9 fb33 	bl	800ad0a <lwip_htonl>
 80116a4:	4603      	mov	r3, r0
 80116a6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	dbe6      	blt.n	801167a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	681a      	ldr	r2, [r3, #0]
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	68ba      	ldr	r2, [r7, #8]
 80116b8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d103      	bne.n	80116ca <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116d0:	2bff      	cmp	r3, #255	; 0xff
 80116d2:	d007      	beq.n	80116e4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116da:	3301      	adds	r3, #1
 80116dc:	b2da      	uxtb	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2200      	movs	r2, #0
 80116e8:	635a      	str	r2, [r3, #52]	; 0x34
 80116ea:	e000      	b.n	80116ee <tcp_rexmit+0x9a>
    return;
 80116ec:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80116ee:	3714      	adds	r7, #20
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd90      	pop	{r4, r7, pc}

080116f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011700:	2b00      	cmp	r3, #0
 8011702:	d041      	beq.n	8011788 <tcp_rexmit_fast+0x94>
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	7e9b      	ldrb	r3, [r3, #26]
 8011708:	f003 0304 	and.w	r3, r3, #4
 801170c:	2b00      	cmp	r3, #0
 801170e:	d13b      	bne.n	8011788 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f7ff ff9f 	bl	8011654 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011722:	4293      	cmp	r3, r2
 8011724:	bf28      	it	cs
 8011726:	4613      	movcs	r3, r2
 8011728:	b29b      	uxth	r3, r3
 801172a:	0fda      	lsrs	r2, r3, #31
 801172c:	4413      	add	r3, r2
 801172e:	105b      	asrs	r3, r3, #1
 8011730:	b29a      	uxth	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801173e:	461a      	mov	r2, r3
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011744:	005b      	lsls	r3, r3, #1
 8011746:	429a      	cmp	r2, r3
 8011748:	d206      	bcs.n	8011758 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801174e:	005b      	lsls	r3, r3, #1
 8011750:	b29a      	uxth	r2, r3
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011762:	4619      	mov	r1, r3
 8011764:	0049      	lsls	r1, r1, #1
 8011766:	440b      	add	r3, r1
 8011768:	b29b      	uxth	r3, r3
 801176a:	4413      	add	r3, r2
 801176c:	b29a      	uxth	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	7e9b      	ldrb	r3, [r3, #26]
 8011778:	f043 0304 	orr.w	r3, r3, #4
 801177c:	b2da      	uxtb	r2, r3
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2200      	movs	r2, #0
 8011786:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8011788:	bf00      	nop
 801178a:	3708      	adds	r7, #8
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b08a      	sub	sp, #40	; 0x28
 8011794:	af04      	add	r7, sp, #16
 8011796:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801179c:	3b01      	subs	r3, #1
 801179e:	4618      	mov	r0, r3
 80117a0:	f7f9 fab3 	bl	800ad0a <lwip_htonl>
 80117a4:	4603      	mov	r3, r0
 80117a6:	2200      	movs	r2, #0
 80117a8:	2100      	movs	r1, #0
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f7fe fd56 	bl	801025c <tcp_output_alloc_header>
 80117b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d102      	bne.n	80117be <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80117b8:	f04f 33ff 	mov.w	r3, #4294967295
 80117bc:	e021      	b.n	8011802 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	3304      	adds	r3, #4
 80117c2:	4618      	mov	r0, r3
 80117c4:	f001 fd58 	bl	8013278 <ip4_route>
 80117c8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d102      	bne.n	80117d6 <tcp_keepalive+0x46>
    err = ERR_RTE;
 80117d0:	23fc      	movs	r3, #252	; 0xfc
 80117d2:	75fb      	strb	r3, [r7, #23]
 80117d4:	e010      	b.n	80117f8 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80117d6:	6879      	ldr	r1, [r7, #4]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	1d1a      	adds	r2, r3, #4
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	7a98      	ldrb	r0, [r3, #10]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	9302      	str	r3, [sp, #8]
 80117e4:	2306      	movs	r3, #6
 80117e6:	9301      	str	r3, [sp, #4]
 80117e8:	2300      	movs	r3, #0
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	4603      	mov	r3, r0
 80117ee:	6938      	ldr	r0, [r7, #16]
 80117f0:	f001 feec 	bl	80135cc <ip4_output_if>
 80117f4:	4603      	mov	r3, r0
 80117f6:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80117f8:	6938      	ldr	r0, [r7, #16]
 80117fa:	f7fa fc4f 	bl	800c09c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80117fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011802:	4618      	mov	r0, r3
 8011804:	3718      	adds	r7, #24
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}

0801180a <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801180a:	b590      	push	{r4, r7, lr}
 801180c:	b08f      	sub	sp, #60	; 0x3c
 801180e:	af04      	add	r7, sp, #16
 8011810:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011816:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8011818:	6a3b      	ldr	r3, [r7, #32]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d102      	bne.n	8011824 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011822:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8011824:	6a3b      	ldr	r3, [r7, #32]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d101      	bne.n	801182e <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 801182a:	2300      	movs	r3, #0
 801182c:	e085      	b.n	801193a <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801182e:	6a3b      	ldr	r3, [r7, #32]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	899b      	ldrh	r3, [r3, #12]
 8011834:	b29b      	uxth	r3, r3
 8011836:	4618      	mov	r0, r3
 8011838:	f7f9 fa5a 	bl	800acf0 <lwip_htons>
 801183c:	4603      	mov	r3, r0
 801183e:	f003 0301 	and.w	r3, r3, #1
 8011842:	2b00      	cmp	r3, #0
 8011844:	d005      	beq.n	8011852 <tcp_zero_window_probe+0x48>
 8011846:	6a3b      	ldr	r3, [r7, #32]
 8011848:	891b      	ldrh	r3, [r3, #8]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d101      	bne.n	8011852 <tcp_zero_window_probe+0x48>
 801184e:	2301      	movs	r3, #1
 8011850:	e000      	b.n	8011854 <tcp_zero_window_probe+0x4a>
 8011852:	2300      	movs	r3, #0
 8011854:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011856:	7ffb      	ldrb	r3, [r7, #31]
 8011858:	2b00      	cmp	r3, #0
 801185a:	bf0c      	ite	eq
 801185c:	2301      	moveq	r3, #1
 801185e:	2300      	movne	r3, #0
 8011860:	b2db      	uxtb	r3, r3
 8011862:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8011864:	6a3b      	ldr	r3, [r7, #32]
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	685b      	ldr	r3, [r3, #4]
 801186a:	8bba      	ldrh	r2, [r7, #28]
 801186c:	2100      	movs	r1, #0
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f7fe fcf4 	bl	801025c <tcp_output_alloc_header>
 8011874:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011876:	69bb      	ldr	r3, [r7, #24]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d102      	bne.n	8011882 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801187c:	f04f 33ff 	mov.w	r3, #4294967295
 8011880:	e05b      	b.n	801193a <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011882:	69bb      	ldr	r3, [r7, #24]
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011888:	7ffb      	ldrb	r3, [r7, #31]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d00e      	beq.n	80118ac <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	899b      	ldrh	r3, [r3, #12]
 8011892:	b29b      	uxth	r3, r3
 8011894:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011898:	b29c      	uxth	r4, r3
 801189a:	2011      	movs	r0, #17
 801189c:	f7f9 fa28 	bl	800acf0 <lwip_htons>
 80118a0:	4603      	mov	r3, r0
 80118a2:	4323      	orrs	r3, r4
 80118a4:	b29a      	uxth	r2, r3
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	819a      	strh	r2, [r3, #12]
 80118aa:	e010      	b.n	80118ce <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80118ac:	69bb      	ldr	r3, [r7, #24]
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	3314      	adds	r3, #20
 80118b2:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80118b4:	6a3b      	ldr	r3, [r7, #32]
 80118b6:	6858      	ldr	r0, [r3, #4]
 80118b8:	6a3b      	ldr	r3, [r7, #32]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	891a      	ldrh	r2, [r3, #8]
 80118be:	6a3b      	ldr	r3, [r7, #32]
 80118c0:	891b      	ldrh	r3, [r3, #8]
 80118c2:	1ad3      	subs	r3, r2, r3
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	2201      	movs	r2, #1
 80118c8:	6939      	ldr	r1, [r7, #16]
 80118ca:	f7fa fde1 	bl	800c490 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80118ce:	6a3b      	ldr	r3, [r7, #32]
 80118d0:	68db      	ldr	r3, [r3, #12]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	4618      	mov	r0, r3
 80118d6:	f7f9 fa18 	bl	800ad0a <lwip_htonl>
 80118da:	4603      	mov	r3, r0
 80118dc:	3301      	adds	r3, #1
 80118de:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	1ad3      	subs	r3, r2, r3
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	da02      	bge.n	80118f2 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	68fa      	ldr	r2, [r7, #12]
 80118f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	3304      	adds	r3, #4
 80118f6:	4618      	mov	r0, r3
 80118f8:	f001 fcbe 	bl	8013278 <ip4_route>
 80118fc:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d103      	bne.n	801190c <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8011904:	23fc      	movs	r3, #252	; 0xfc
 8011906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801190a:	e011      	b.n	8011930 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801190c:	6879      	ldr	r1, [r7, #4]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	1d1a      	adds	r2, r3, #4
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	7a98      	ldrb	r0, [r3, #10]
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	9302      	str	r3, [sp, #8]
 801191a:	2306      	movs	r3, #6
 801191c:	9301      	str	r3, [sp, #4]
 801191e:	2300      	movs	r3, #0
 8011920:	9300      	str	r3, [sp, #0]
 8011922:	4603      	mov	r3, r0
 8011924:	69b8      	ldr	r0, [r7, #24]
 8011926:	f001 fe51 	bl	80135cc <ip4_output_if>
 801192a:	4603      	mov	r3, r0
 801192c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8011930:	69b8      	ldr	r0, [r7, #24]
 8011932:	f7fa fbb3 	bl	800c09c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011936:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801193a:	4618      	mov	r0, r3
 801193c:	372c      	adds	r7, #44	; 0x2c
 801193e:	46bd      	mov	sp, r7
 8011940:	bd90      	pop	{r4, r7, pc}
	...

08011944 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801194c:	f7fa fe20 	bl	800c590 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011950:	4b0a      	ldr	r3, [pc, #40]	; (801197c <tcpip_tcp_timer+0x38>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d103      	bne.n	8011960 <tcpip_tcp_timer+0x1c>
 8011958:	4b09      	ldr	r3, [pc, #36]	; (8011980 <tcpip_tcp_timer+0x3c>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d005      	beq.n	801196c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011960:	2200      	movs	r2, #0
 8011962:	4908      	ldr	r1, [pc, #32]	; (8011984 <tcpip_tcp_timer+0x40>)
 8011964:	20fa      	movs	r0, #250	; 0xfa
 8011966:	f000 f86f 	bl	8011a48 <sys_timeout>
 801196a:	e003      	b.n	8011974 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801196c:	4b06      	ldr	r3, [pc, #24]	; (8011988 <tcpip_tcp_timer+0x44>)
 801196e:	2200      	movs	r2, #0
 8011970:	601a      	str	r2, [r3, #0]
  }
}
 8011972:	bf00      	nop
 8011974:	bf00      	nop
 8011976:	3708      	adds	r7, #8
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	2000ba20 	.word	0x2000ba20
 8011980:	2000ba24 	.word	0x2000ba24
 8011984:	08011945 	.word	0x08011945
 8011988:	2000ba6c 	.word	0x2000ba6c

0801198c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011990:	4b0a      	ldr	r3, [pc, #40]	; (80119bc <tcp_timer_needed+0x30>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d10f      	bne.n	80119b8 <tcp_timer_needed+0x2c>
 8011998:	4b09      	ldr	r3, [pc, #36]	; (80119c0 <tcp_timer_needed+0x34>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d103      	bne.n	80119a8 <tcp_timer_needed+0x1c>
 80119a0:	4b08      	ldr	r3, [pc, #32]	; (80119c4 <tcp_timer_needed+0x38>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d007      	beq.n	80119b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80119a8:	4b04      	ldr	r3, [pc, #16]	; (80119bc <tcp_timer_needed+0x30>)
 80119aa:	2201      	movs	r2, #1
 80119ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80119ae:	2200      	movs	r2, #0
 80119b0:	4905      	ldr	r1, [pc, #20]	; (80119c8 <tcp_timer_needed+0x3c>)
 80119b2:	20fa      	movs	r0, #250	; 0xfa
 80119b4:	f000 f848 	bl	8011a48 <sys_timeout>
  }
}
 80119b8:	bf00      	nop
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	2000ba6c 	.word	0x2000ba6c
 80119c0:	2000ba20 	.word	0x2000ba20
 80119c4:	2000ba24 	.word	0x2000ba24
 80119c8:	08011945 	.word	0x08011945

080119cc <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	4903      	ldr	r1, [pc, #12]	; (80119f4 <cyclic_timer+0x28>)
 80119e6:	4618      	mov	r0, r3
 80119e8:	f000 f82e 	bl	8011a48 <sys_timeout>
}
 80119ec:	bf00      	nop
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	080119cd 	.word	0x080119cd

080119f8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80119fe:	2301      	movs	r3, #1
 8011a00:	607b      	str	r3, [r7, #4]
 8011a02:	e00e      	b.n	8011a22 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8011a04:	4a0d      	ldr	r2, [pc, #52]	; (8011a3c <sys_timeouts_init+0x44>)
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	00db      	lsls	r3, r3, #3
 8011a10:	4a0a      	ldr	r2, [pc, #40]	; (8011a3c <sys_timeouts_init+0x44>)
 8011a12:	4413      	add	r3, r2
 8011a14:	461a      	mov	r2, r3
 8011a16:	490a      	ldr	r1, [pc, #40]	; (8011a40 <sys_timeouts_init+0x48>)
 8011a18:	f000 f816 	bl	8011a48 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	3301      	adds	r3, #1
 8011a20:	607b      	str	r3, [r7, #4]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2b02      	cmp	r3, #2
 8011a26:	d9ed      	bls.n	8011a04 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8011a28:	f7f3 f812 	bl	8004a50 <sys_now>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	4a05      	ldr	r2, [pc, #20]	; (8011a44 <sys_timeouts_init+0x4c>)
 8011a30:	6013      	str	r3, [r2, #0]
}
 8011a32:	bf00      	nop
 8011a34:	3708      	adds	r7, #8
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}
 8011a3a:	bf00      	nop
 8011a3c:	08017f70 	.word	0x08017f70
 8011a40:	080119cd 	.word	0x080119cd
 8011a44:	2000ba68 	.word	0x2000ba68

08011a48 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b088      	sub	sp, #32
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	60f8      	str	r0, [r7, #12]
 8011a50:	60b9      	str	r1, [r7, #8]
 8011a52:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011a54:	200a      	movs	r0, #10
 8011a56:	f7f9 fd37 	bl	800b4c8 <memp_malloc>
 8011a5a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d10a      	bne.n	8011a78 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	f040 8084 	bne.w	8011b72 <sys_timeout+0x12a>
 8011a6a:	4b44      	ldr	r3, [pc, #272]	; (8011b7c <sys_timeout+0x134>)
 8011a6c:	22d4      	movs	r2, #212	; 0xd4
 8011a6e:	4944      	ldr	r1, [pc, #272]	; (8011b80 <sys_timeout+0x138>)
 8011a70:	4844      	ldr	r0, [pc, #272]	; (8011b84 <sys_timeout+0x13c>)
 8011a72:	f002 fff1 	bl	8014a58 <iprintf>
    return;
 8011a76:	e07c      	b.n	8011b72 <sys_timeout+0x12a>
  }

  now = sys_now();
 8011a78:	f7f2 ffea 	bl	8004a50 <sys_now>
 8011a7c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8011a7e:	4b42      	ldr	r3, [pc, #264]	; (8011b88 <sys_timeout+0x140>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d105      	bne.n	8011a92 <sys_timeout+0x4a>
    diff = 0;
 8011a86:	2300      	movs	r3, #0
 8011a88:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8011a8a:	4a40      	ldr	r2, [pc, #256]	; (8011b8c <sys_timeout+0x144>)
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	6013      	str	r3, [r2, #0]
 8011a90:	e004      	b.n	8011a9c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8011a92:	4b3e      	ldr	r3, [pc, #248]	; (8011b8c <sys_timeout+0x144>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	693a      	ldr	r2, [r7, #16]
 8011a98:	1ad3      	subs	r3, r2, r3
 8011a9a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011aa2:	697b      	ldr	r3, [r7, #20]
 8011aa4:	68ba      	ldr	r2, [r7, #8]
 8011aa6:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	687a      	ldr	r2, [r7, #4]
 8011aac:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8011aae:	68fa      	ldr	r2, [r7, #12]
 8011ab0:	69bb      	ldr	r3, [r7, #24]
 8011ab2:	441a      	add	r2, r3
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011ab8:	4b33      	ldr	r3, [pc, #204]	; (8011b88 <sys_timeout+0x140>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d103      	bne.n	8011ac8 <sys_timeout+0x80>
    next_timeout = timeout;
 8011ac0:	4a31      	ldr	r2, [pc, #196]	; (8011b88 <sys_timeout+0x140>)
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	6013      	str	r3, [r2, #0]
    return;
 8011ac6:	e055      	b.n	8011b74 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8011ac8:	4b2f      	ldr	r3, [pc, #188]	; (8011b88 <sys_timeout+0x140>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	68fa      	ldr	r2, [r7, #12]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d20f      	bcs.n	8011af4 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8011ad4:	4b2c      	ldr	r3, [pc, #176]	; (8011b88 <sys_timeout+0x140>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	6859      	ldr	r1, [r3, #4]
 8011ada:	4b2b      	ldr	r3, [pc, #172]	; (8011b88 <sys_timeout+0x140>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	68fa      	ldr	r2, [r7, #12]
 8011ae0:	1a8a      	subs	r2, r1, r2
 8011ae2:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8011ae4:	4b28      	ldr	r3, [pc, #160]	; (8011b88 <sys_timeout+0x140>)
 8011ae6:	681a      	ldr	r2, [r3, #0]
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011aec:	4a26      	ldr	r2, [pc, #152]	; (8011b88 <sys_timeout+0x140>)
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	6013      	str	r3, [r2, #0]
 8011af2:	e03f      	b.n	8011b74 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011af4:	4b24      	ldr	r3, [pc, #144]	; (8011b88 <sys_timeout+0x140>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	61fb      	str	r3, [r7, #28]
 8011afa:	e036      	b.n	8011b6a <sys_timeout+0x122>
      timeout->time -= t->time;
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	685a      	ldr	r2, [r3, #4]
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	1ad2      	subs	r2, r2, r3
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d006      	beq.n	8011b20 <sys_timeout+0xd8>
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	685a      	ldr	r2, [r3, #4]
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d921      	bls.n	8011b64 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8011b20:	69fb      	ldr	r3, [r7, #28]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d009      	beq.n	8011b3c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	6859      	ldr	r1, [r3, #4]
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	685a      	ldr	r2, [r3, #4]
 8011b32:	69fb      	ldr	r3, [r7, #28]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	1a8a      	subs	r2, r1, r2
 8011b38:	605a      	str	r2, [r3, #4]
 8011b3a:	e00b      	b.n	8011b54 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	68fa      	ldr	r2, [r7, #12]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d206      	bcs.n	8011b54 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8011b46:	4b10      	ldr	r3, [pc, #64]	; (8011b88 <sys_timeout+0x140>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	685a      	ldr	r2, [r3, #4]
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	441a      	add	r2, r3
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	681a      	ldr	r2, [r3, #0]
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	697a      	ldr	r2, [r7, #20]
 8011b60:	601a      	str	r2, [r3, #0]
        break;
 8011b62:	e007      	b.n	8011b74 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	61fb      	str	r3, [r7, #28]
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d1c5      	bne.n	8011afc <sys_timeout+0xb4>
 8011b70:	e000      	b.n	8011b74 <sys_timeout+0x12c>
    return;
 8011b72:	bf00      	nop
      }
    }
  }
}
 8011b74:	3720      	adds	r7, #32
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	08017688 	.word	0x08017688
 8011b80:	080176bc 	.word	0x080176bc
 8011b84:	080176fc 	.word	0x080176fc
 8011b88:	2000ba64 	.word	0x2000ba64
 8011b8c:	2000ba68 	.word	0x2000ba68

08011b90 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b086      	sub	sp, #24
 8011b94:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8011b96:	4b24      	ldr	r3, [pc, #144]	; (8011c28 <sys_check_timeouts+0x98>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d03f      	beq.n	8011c1e <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8011b9e:	f7f2 ff57 	bl	8004a50 <sys_now>
 8011ba2:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8011ba4:	4b21      	ldr	r3, [pc, #132]	; (8011c2c <sys_check_timeouts+0x9c>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	68fa      	ldr	r2, [r7, #12]
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8011bb2:	4b1d      	ldr	r3, [pc, #116]	; (8011c28 <sys_check_timeouts+0x98>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d02c      	beq.n	8011c18 <sys_check_timeouts+0x88>
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	697a      	ldr	r2, [r7, #20]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d327      	bcc.n	8011c18 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8011bc8:	2301      	movs	r3, #1
 8011bca:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	685a      	ldr	r2, [r3, #4]
 8011bd0:	4b16      	ldr	r3, [pc, #88]	; (8011c2c <sys_check_timeouts+0x9c>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	4a15      	ldr	r2, [pc, #84]	; (8011c2c <sys_check_timeouts+0x9c>)
 8011bd8:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	697a      	ldr	r2, [r7, #20]
 8011be0:	1ad3      	subs	r3, r2, r3
 8011be2:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	4a0f      	ldr	r2, [pc, #60]	; (8011c28 <sys_check_timeouts+0x98>)
 8011bea:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	689b      	ldr	r3, [r3, #8]
 8011bf0:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	68db      	ldr	r3, [r3, #12]
 8011bf6:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011bf8:	68b9      	ldr	r1, [r7, #8]
 8011bfa:	200a      	movs	r0, #10
 8011bfc:	f7f9 fcb6 	bl	800b56c <memp_free>
        if (handler != NULL) {
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d008      	beq.n	8011c18 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8011c06:	480a      	ldr	r0, [pc, #40]	; (8011c30 <sys_check_timeouts+0xa0>)
 8011c08:	f002 fe0a 	bl	8014820 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6838      	ldr	r0, [r7, #0]
 8011c10:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8011c12:	4807      	ldr	r0, [pc, #28]	; (8011c30 <sys_check_timeouts+0xa0>)
 8011c14:	f002 fe13 	bl	801483e <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8011c18:	7cfb      	ldrb	r3, [r7, #19]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d1c7      	bne.n	8011bae <sys_check_timeouts+0x1e>
  }
}
 8011c1e:	bf00      	nop
 8011c20:	3718      	adds	r7, #24
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	2000ba64 	.word	0x2000ba64
 8011c2c:	2000ba68 	.word	0x2000ba68
 8011c30:	200082c0 	.word	0x200082c0

08011c34 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8011c3a:	4b0f      	ldr	r3, [pc, #60]	; (8011c78 <sys_timeouts_sleeptime+0x44>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d102      	bne.n	8011c48 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8011c42:	f04f 33ff 	mov.w	r3, #4294967295
 8011c46:	e013      	b.n	8011c70 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8011c48:	f7f2 ff02 	bl	8004a50 <sys_now>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	4b0b      	ldr	r3, [pc, #44]	; (8011c7c <sys_timeouts_sleeptime+0x48>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	1ad3      	subs	r3, r2, r3
 8011c54:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8011c56:	4b08      	ldr	r3, [pc, #32]	; (8011c78 <sys_timeouts_sleeptime+0x44>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	687a      	ldr	r2, [r7, #4]
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	d901      	bls.n	8011c66 <sys_timeouts_sleeptime+0x32>
    return 0;
 8011c62:	2300      	movs	r3, #0
 8011c64:	e004      	b.n	8011c70 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8011c66:	4b04      	ldr	r3, [pc, #16]	; (8011c78 <sys_timeouts_sleeptime+0x44>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	685a      	ldr	r2, [r3, #4]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	1ad3      	subs	r3, r2, r3
  }
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3708      	adds	r7, #8
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	2000ba64 	.word	0x2000ba64
 8011c7c:	2000ba68 	.word	0x2000ba68

08011c80 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b084      	sub	sp, #16
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8011c8a:	4b0f      	ldr	r3, [pc, #60]	; (8011cc8 <sys_timeouts_mbox_fetch+0x48>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d105      	bne.n	8011c9e <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011c92:	2200      	movs	r2, #0
 8011c94:	6839      	ldr	r1, [r7, #0]
 8011c96:	6878      	ldr	r0, [r7, #4]
 8011c98:	f002 fcb0 	bl	80145fc <sys_arch_mbox_fetch>
    return;
 8011c9c:	e011      	b.n	8011cc2 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8011c9e:	f7ff ffc9 	bl	8011c34 <sys_timeouts_sleeptime>
 8011ca2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d008      	beq.n	8011cbc <sys_timeouts_mbox_fetch+0x3c>
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	6839      	ldr	r1, [r7, #0]
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f002 fca4 	bl	80145fc <sys_arch_mbox_fetch>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cba:	d102      	bne.n	8011cc2 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011cbc:	f7ff ff68 	bl	8011b90 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011cc0:	e7e3      	b.n	8011c8a <sys_timeouts_mbox_fetch+0xa>
  }
}
 8011cc2:	3710      	adds	r7, #16
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}
 8011cc8:	2000ba64 	.word	0x2000ba64

08011ccc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8011cd0:	bf00      	nop
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bc80      	pop	{r7}
 8011cd6:	4770      	bx	lr

08011cd8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011ce2:	4b17      	ldr	r3, [pc, #92]	; (8011d40 <udp_new_port+0x68>)
 8011ce4:	881b      	ldrh	r3, [r3, #0]
 8011ce6:	1c5a      	adds	r2, r3, #1
 8011ce8:	b291      	uxth	r1, r2
 8011cea:	4a15      	ldr	r2, [pc, #84]	; (8011d40 <udp_new_port+0x68>)
 8011cec:	8011      	strh	r1, [r2, #0]
 8011cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d103      	bne.n	8011cfe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011cf6:	4b12      	ldr	r3, [pc, #72]	; (8011d40 <udp_new_port+0x68>)
 8011cf8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011cfc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011cfe:	4b11      	ldr	r3, [pc, #68]	; (8011d44 <udp_new_port+0x6c>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	603b      	str	r3, [r7, #0]
 8011d04:	e011      	b.n	8011d2a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	8a5a      	ldrh	r2, [r3, #18]
 8011d0a:	4b0d      	ldr	r3, [pc, #52]	; (8011d40 <udp_new_port+0x68>)
 8011d0c:	881b      	ldrh	r3, [r3, #0]
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	d108      	bne.n	8011d24 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011d12:	88fb      	ldrh	r3, [r7, #6]
 8011d14:	3301      	adds	r3, #1
 8011d16:	80fb      	strh	r3, [r7, #6]
 8011d18:	88fb      	ldrh	r3, [r7, #6]
 8011d1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011d1e:	d3e0      	bcc.n	8011ce2 <udp_new_port+0xa>
        return 0;
 8011d20:	2300      	movs	r3, #0
 8011d22:	e007      	b.n	8011d34 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	603b      	str	r3, [r7, #0]
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d1ea      	bne.n	8011d06 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011d30:	4b03      	ldr	r3, [pc, #12]	; (8011d40 <udp_new_port+0x68>)
 8011d32:	881b      	ldrh	r3, [r3, #0]
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	370c      	adds	r7, #12
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bc80      	pop	{r7}
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop
 8011d40:	20000020 	.word	0x20000020
 8011d44:	2000ba70 	.word	0x2000ba70

08011d48 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011d48:	b480      	push	{r7}
 8011d4a:	b085      	sub	sp, #20
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	60f8      	str	r0, [r7, #12]
 8011d50:	60b9      	str	r1, [r7, #8]
 8011d52:	4613      	mov	r3, r2
 8011d54:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011d56:	79fb      	ldrb	r3, [r7, #7]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d018      	beq.n	8011d8e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d013      	beq.n	8011d8a <udp_input_local_match+0x42>
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d00f      	beq.n	8011d8a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011d6a:	4b13      	ldr	r3, [pc, #76]	; (8011db8 <udp_input_local_match+0x70>)
 8011d6c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d72:	d00a      	beq.n	8011d8a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	4b0f      	ldr	r3, [pc, #60]	; (8011db8 <udp_input_local_match+0x70>)
 8011d7a:	695b      	ldr	r3, [r3, #20]
 8011d7c:	405a      	eors	r2, r3
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	3308      	adds	r3, #8
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d110      	bne.n	8011dac <udp_input_local_match+0x64>
          return 1;
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	e00f      	b.n	8011dae <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d009      	beq.n	8011da8 <udp_input_local_match+0x60>
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d005      	beq.n	8011da8 <udp_input_local_match+0x60>
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681a      	ldr	r2, [r3, #0]
 8011da0:	4b05      	ldr	r3, [pc, #20]	; (8011db8 <udp_input_local_match+0x70>)
 8011da2:	695b      	ldr	r3, [r3, #20]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d101      	bne.n	8011dac <udp_input_local_match+0x64>
      return 1;
 8011da8:	2301      	movs	r3, #1
 8011daa:	e000      	b.n	8011dae <udp_input_local_match+0x66>
    }
  }

  return 0;
 8011dac:	2300      	movs	r3, #0
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3714      	adds	r7, #20
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bc80      	pop	{r7}
 8011db6:	4770      	bx	lr
 8011db8:	200082c4 	.word	0x200082c4

08011dbc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011dbc:	b590      	push	{r4, r7, lr}
 8011dbe:	b08d      	sub	sp, #52	; 0x34
 8011dc0:	af02      	add	r7, sp, #8
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	895b      	ldrh	r3, [r3, #10]
 8011dce:	2b07      	cmp	r3, #7
 8011dd0:	d803      	bhi.n	8011dda <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f7fa f962 	bl	800c09c <pbuf_free>
    goto end;
 8011dd8:	e0c6      	b.n	8011f68 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011de0:	4b63      	ldr	r3, [pc, #396]	; (8011f70 <udp_input+0x1b4>)
 8011de2:	695b      	ldr	r3, [r3, #20]
 8011de4:	4a62      	ldr	r2, [pc, #392]	; (8011f70 <udp_input+0x1b4>)
 8011de6:	6812      	ldr	r2, [r2, #0]
 8011de8:	4611      	mov	r1, r2
 8011dea:	4618      	mov	r0, r3
 8011dec:	f001 fcc0 	bl	8013770 <ip4_addr_isbroadcast_u32>
 8011df0:	4603      	mov	r3, r0
 8011df2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	881b      	ldrh	r3, [r3, #0]
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7f8 ff78 	bl	800acf0 <lwip_htons>
 8011e00:	4603      	mov	r3, r0
 8011e02:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	885b      	ldrh	r3, [r3, #2]
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f7f8 ff70 	bl	800acf0 <lwip_htons>
 8011e10:	4603      	mov	r3, r0
 8011e12:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011e14:	2300      	movs	r3, #0
 8011e16:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e20:	4b54      	ldr	r3, [pc, #336]	; (8011f74 <udp_input+0x1b8>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	627b      	str	r3, [r7, #36]	; 0x24
 8011e26:	e03b      	b.n	8011ea0 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2a:	8a5b      	ldrh	r3, [r3, #18]
 8011e2c:	89fa      	ldrh	r2, [r7, #14]
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d131      	bne.n	8011e96 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011e32:	7cfb      	ldrb	r3, [r7, #19]
 8011e34:	461a      	mov	r2, r3
 8011e36:	6839      	ldr	r1, [r7, #0]
 8011e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e3a:	f7ff ff85 	bl	8011d48 <udp_input_local_match>
 8011e3e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d028      	beq.n	8011e96 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8011e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e46:	7c1b      	ldrb	r3, [r3, #16]
 8011e48:	f003 0304 	and.w	r3, r3, #4
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d104      	bne.n	8011e5a <udp_input+0x9e>
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d101      	bne.n	8011e5a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8011e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e58:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5c:	8a9b      	ldrh	r3, [r3, #20]
 8011e5e:	8a3a      	ldrh	r2, [r7, #16]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d118      	bne.n	8011e96 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e66:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d005      	beq.n	8011e78 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e6e:	685a      	ldr	r2, [r3, #4]
 8011e70:	4b3f      	ldr	r3, [pc, #252]	; (8011f70 <udp_input+0x1b4>)
 8011e72:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d10e      	bne.n	8011e96 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011e78:	6a3b      	ldr	r3, [r7, #32]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d014      	beq.n	8011ea8 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e80:	68da      	ldr	r2, [r3, #12]
 8011e82:	6a3b      	ldr	r3, [r7, #32]
 8011e84:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011e86:	4b3b      	ldr	r3, [pc, #236]	; (8011f74 <udp_input+0x1b8>)
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011e8e:	4a39      	ldr	r2, [pc, #228]	; (8011f74 <udp_input+0x1b8>)
 8011e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e92:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011e94:	e008      	b.n	8011ea8 <udp_input+0xec>
      }
    }

    prev = pcb;
 8011e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e98:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8011ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d1c0      	bne.n	8011e28 <udp_input+0x6c>
 8011ea6:	e000      	b.n	8011eaa <udp_input+0xee>
        break;
 8011ea8:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d101      	bne.n	8011eb4 <udp_input+0xf8>
    pcb = uncon_pcb;
 8011eb0:	69fb      	ldr	r3, [r7, #28]
 8011eb2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d002      	beq.n	8011ec0 <udp_input+0x104>
    for_us = 1;
 8011eba:	2301      	movs	r3, #1
 8011ebc:	76fb      	strb	r3, [r7, #27]
 8011ebe:	e00a      	b.n	8011ed6 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	3304      	adds	r3, #4
 8011ec4:	681a      	ldr	r2, [r3, #0]
 8011ec6:	4b2a      	ldr	r3, [pc, #168]	; (8011f70 <udp_input+0x1b4>)
 8011ec8:	695b      	ldr	r3, [r3, #20]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	bf0c      	ite	eq
 8011ece:	2301      	moveq	r3, #1
 8011ed0:	2300      	movne	r3, #0
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011ed6:	7efb      	ldrb	r3, [r7, #27]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d042      	beq.n	8011f62 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8011edc:	f06f 0107 	mvn.w	r1, #7
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7fa f8b7 	bl	800c054 <pbuf_header>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d00a      	beq.n	8011f02 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8011eec:	4b22      	ldr	r3, [pc, #136]	; (8011f78 <udp_input+0x1bc>)
 8011eee:	f240 1255 	movw	r2, #341	; 0x155
 8011ef2:	4922      	ldr	r1, [pc, #136]	; (8011f7c <udp_input+0x1c0>)
 8011ef4:	4822      	ldr	r0, [pc, #136]	; (8011f80 <udp_input+0x1c4>)
 8011ef6:	f002 fdaf 	bl	8014a58 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f7fa f8ce 	bl	800c09c <pbuf_free>
      goto end;
 8011f00:	e032      	b.n	8011f68 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8011f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d012      	beq.n	8011f2e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0a:	699b      	ldr	r3, [r3, #24]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d00a      	beq.n	8011f26 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f12:	699c      	ldr	r4, [r3, #24]
 8011f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f16:	69d8      	ldr	r0, [r3, #28]
 8011f18:	8a3b      	ldrh	r3, [r7, #16]
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	4b19      	ldr	r3, [pc, #100]	; (8011f84 <udp_input+0x1c8>)
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011f22:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011f24:	e021      	b.n	8011f6a <udp_input+0x1ae>
        pbuf_free(p);
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f7fa f8b8 	bl	800c09c <pbuf_free>
        goto end;
 8011f2c:	e01c      	b.n	8011f68 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011f2e:	7cfb      	ldrb	r3, [r7, #19]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d112      	bne.n	8011f5a <udp_input+0x19e>
 8011f34:	4b0e      	ldr	r3, [pc, #56]	; (8011f70 <udp_input+0x1b4>)
 8011f36:	695b      	ldr	r3, [r3, #20]
 8011f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f3c:	2be0      	cmp	r3, #224	; 0xe0
 8011f3e:	d00c      	beq.n	8011f5a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011f40:	4b0b      	ldr	r3, [pc, #44]	; (8011f70 <udp_input+0x1b4>)
 8011f42:	899b      	ldrh	r3, [r3, #12]
 8011f44:	3308      	adds	r3, #8
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	b21b      	sxth	r3, r3
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f7fa f893 	bl	800c078 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011f52:	2103      	movs	r1, #3
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f001 f907 	bl	8013168 <icmp_dest_unreach>
      pbuf_free(p);
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f7fa f89e 	bl	800c09c <pbuf_free>
  return;
 8011f60:	e003      	b.n	8011f6a <udp_input+0x1ae>
    pbuf_free(p);
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f7fa f89a 	bl	800c09c <pbuf_free>
  return;
 8011f68:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011f6a:	372c      	adds	r7, #44	; 0x2c
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd90      	pop	{r4, r7, pc}
 8011f70:	200082c4 	.word	0x200082c4
 8011f74:	2000ba70 	.word	0x2000ba70
 8011f78:	08017724 	.word	0x08017724
 8011f7c:	08017754 	.word	0x08017754
 8011f80:	08017768 	.word	0x08017768
 8011f84:	200082d4 	.word	0x200082d4

08011f88 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b086      	sub	sp, #24
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	4613      	mov	r3, r2
 8011f94:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d101      	bne.n	8011fa0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011f9c:	4b30      	ldr	r3, [pc, #192]	; (8012060 <udp_bind+0xd8>)
 8011f9e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d002      	beq.n	8011fac <udp_bind+0x24>
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d102      	bne.n	8011fb2 <udp_bind+0x2a>
    return ERR_VAL;
 8011fac:	f06f 0305 	mvn.w	r3, #5
 8011fb0:	e052      	b.n	8012058 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011fb6:	4b2b      	ldr	r3, [pc, #172]	; (8012064 <udp_bind+0xdc>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	617b      	str	r3, [r7, #20]
 8011fbc:	e009      	b.n	8011fd2 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d102      	bne.n	8011fcc <udp_bind+0x44>
      rebind = 1;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	74fb      	strb	r3, [r7, #19]
      break;
 8011fca:	e005      	b.n	8011fd8 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	617b      	str	r3, [r7, #20]
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d1f2      	bne.n	8011fbe <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8011fd8:	88fb      	ldrh	r3, [r7, #6]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d109      	bne.n	8011ff2 <udp_bind+0x6a>
    port = udp_new_port();
 8011fde:	f7ff fe7b 	bl	8011cd8 <udp_new_port>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011fe6:	88fb      	ldrh	r3, [r7, #6]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d11e      	bne.n	801202a <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011fec:	f06f 0307 	mvn.w	r3, #7
 8011ff0:	e032      	b.n	8012058 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ff2:	4b1c      	ldr	r3, [pc, #112]	; (8012064 <udp_bind+0xdc>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	617b      	str	r3, [r7, #20]
 8011ff8:	e014      	b.n	8012024 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d00d      	beq.n	801201e <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	8a5b      	ldrh	r3, [r3, #18]
 8012006:	88fa      	ldrh	r2, [r7, #6]
 8012008:	429a      	cmp	r2, r3
 801200a:	d108      	bne.n	801201e <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012014:	429a      	cmp	r2, r3
 8012016:	d102      	bne.n	801201e <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012018:	f06f 0307 	mvn.w	r3, #7
 801201c:	e01c      	b.n	8012058 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	68db      	ldr	r3, [r3, #12]
 8012022:	617b      	str	r3, [r7, #20]
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d1e7      	bne.n	8011ffa <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d002      	beq.n	8012036 <udp_bind+0xae>
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	e000      	b.n	8012038 <udp_bind+0xb0>
 8012036:	2300      	movs	r3, #0
 8012038:	68fa      	ldr	r2, [r7, #12]
 801203a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	88fa      	ldrh	r2, [r7, #6]
 8012040:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012042:	7cfb      	ldrb	r3, [r7, #19]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d106      	bne.n	8012056 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012048:	4b06      	ldr	r3, [pc, #24]	; (8012064 <udp_bind+0xdc>)
 801204a:	681a      	ldr	r2, [r3, #0]
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012050:	4a04      	ldr	r2, [pc, #16]	; (8012064 <udp_bind+0xdc>)
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012056:	2300      	movs	r3, #0
}
 8012058:	4618      	mov	r0, r3
 801205a:	3718      	adds	r7, #24
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}
 8012060:	08017f88 	.word	0x08017f88
 8012064:	2000ba70 	.word	0x2000ba70

08012068 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012068:	b480      	push	{r7}
 801206a:	b085      	sub	sp, #20
 801206c:	af00      	add	r7, sp, #0
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	60b9      	str	r1, [r7, #8]
 8012072:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	68ba      	ldr	r2, [r7, #8]
 8012078:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	61da      	str	r2, [r3, #28]
}
 8012080:	bf00      	nop
 8012082:	3714      	adds	r7, #20
 8012084:	46bd      	mov	sp, r7
 8012086:	bc80      	pop	{r7}
 8012088:	4770      	bx	lr
	...

0801208c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012094:	4b15      	ldr	r3, [pc, #84]	; (80120ec <udp_remove+0x60>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	687a      	ldr	r2, [r7, #4]
 801209a:	429a      	cmp	r2, r3
 801209c:	d105      	bne.n	80120aa <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801209e:	4b13      	ldr	r3, [pc, #76]	; (80120ec <udp_remove+0x60>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	4a11      	ldr	r2, [pc, #68]	; (80120ec <udp_remove+0x60>)
 80120a6:	6013      	str	r3, [r2, #0]
 80120a8:	e017      	b.n	80120da <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80120aa:	4b10      	ldr	r3, [pc, #64]	; (80120ec <udp_remove+0x60>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	60fb      	str	r3, [r7, #12]
 80120b0:	e010      	b.n	80120d4 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	68db      	ldr	r3, [r3, #12]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d009      	beq.n	80120ce <udp_remove+0x42>
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	68db      	ldr	r3, [r3, #12]
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d104      	bne.n	80120ce <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	68da      	ldr	r2, [r3, #12]
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	60da      	str	r2, [r3, #12]
        break;
 80120cc:	e005      	b.n	80120da <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	60fb      	str	r3, [r7, #12]
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d1eb      	bne.n	80120b2 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80120da:	6879      	ldr	r1, [r7, #4]
 80120dc:	2000      	movs	r0, #0
 80120de:	f7f9 fa45 	bl	800b56c <memp_free>
}
 80120e2:	bf00      	nop
 80120e4:	3710      	adds	r7, #16
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	2000ba70 	.word	0x2000ba70

080120f0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b082      	sub	sp, #8
 80120f4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80120f6:	2000      	movs	r0, #0
 80120f8:	f7f9 f9e6 	bl	800b4c8 <memp_malloc>
 80120fc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d007      	beq.n	8012114 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012104:	2220      	movs	r2, #32
 8012106:	2100      	movs	r1, #0
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f002 fd0a 	bl	8014b22 <memset>
    pcb->ttl = UDP_TTL;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	22ff      	movs	r2, #255	; 0xff
 8012112:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012114:	687b      	ldr	r3, [r7, #4]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3708      	adds	r7, #8
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801211e:	b580      	push	{r7, lr}
 8012120:	b084      	sub	sp, #16
 8012122:	af00      	add	r7, sp, #0
 8012124:	4603      	mov	r3, r0
 8012126:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8012128:	f7ff ffe2 	bl	80120f0 <udp_new>
 801212c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801212e:	68fb      	ldr	r3, [r7, #12]
}
 8012130:	4618      	mov	r0, r3
 8012132:	3710      	adds	r7, #16
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8012138:	b480      	push	{r7}
 801213a:	b085      	sub	sp, #20
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d01e      	beq.n	8012186 <udp_netif_ip_addr_changed+0x4e>
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d01a      	beq.n	8012186 <udp_netif_ip_addr_changed+0x4e>
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d017      	beq.n	8012186 <udp_netif_ip_addr_changed+0x4e>
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d013      	beq.n	8012186 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801215e:	4b0c      	ldr	r3, [pc, #48]	; (8012190 <udp_netif_ip_addr_changed+0x58>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	60fb      	str	r3, [r7, #12]
 8012164:	e00c      	b.n	8012180 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	429a      	cmp	r2, r3
 8012170:	d103      	bne.n	801217a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	68db      	ldr	r3, [r3, #12]
 801217e:	60fb      	str	r3, [r7, #12]
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d1ef      	bne.n	8012166 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012186:	bf00      	nop
 8012188:	3714      	adds	r7, #20
 801218a:	46bd      	mov	sp, r7
 801218c:	bc80      	pop	{r7}
 801218e:	4770      	bx	lr
 8012190:	2000ba70 	.word	0x2000ba70

08012194 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b082      	sub	sp, #8
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801219c:	4915      	ldr	r1, [pc, #84]	; (80121f4 <etharp_free_entry+0x60>)
 801219e:	687a      	ldr	r2, [r7, #4]
 80121a0:	4613      	mov	r3, r2
 80121a2:	005b      	lsls	r3, r3, #1
 80121a4:	4413      	add	r3, r2
 80121a6:	00db      	lsls	r3, r3, #3
 80121a8:	440b      	add	r3, r1
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d013      	beq.n	80121d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80121b0:	4910      	ldr	r1, [pc, #64]	; (80121f4 <etharp_free_entry+0x60>)
 80121b2:	687a      	ldr	r2, [r7, #4]
 80121b4:	4613      	mov	r3, r2
 80121b6:	005b      	lsls	r3, r3, #1
 80121b8:	4413      	add	r3, r2
 80121ba:	00db      	lsls	r3, r3, #3
 80121bc:	440b      	add	r3, r1
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7f9 ff6b 	bl	800c09c <pbuf_free>
    arp_table[i].q = NULL;
 80121c6:	490b      	ldr	r1, [pc, #44]	; (80121f4 <etharp_free_entry+0x60>)
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	4613      	mov	r3, r2
 80121cc:	005b      	lsls	r3, r3, #1
 80121ce:	4413      	add	r3, r2
 80121d0:	00db      	lsls	r3, r3, #3
 80121d2:	440b      	add	r3, r1
 80121d4:	2200      	movs	r2, #0
 80121d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80121d8:	4906      	ldr	r1, [pc, #24]	; (80121f4 <etharp_free_entry+0x60>)
 80121da:	687a      	ldr	r2, [r7, #4]
 80121dc:	4613      	mov	r3, r2
 80121de:	005b      	lsls	r3, r3, #1
 80121e0:	4413      	add	r3, r2
 80121e2:	00db      	lsls	r3, r3, #3
 80121e4:	440b      	add	r3, r1
 80121e6:	3314      	adds	r3, #20
 80121e8:	2200      	movs	r2, #0
 80121ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80121ec:	bf00      	nop
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	2000ba74 	.word	0x2000ba74

080121f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80121fe:	2300      	movs	r3, #0
 8012200:	71fb      	strb	r3, [r7, #7]
 8012202:	e096      	b.n	8012332 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012204:	79fa      	ldrb	r2, [r7, #7]
 8012206:	494f      	ldr	r1, [pc, #316]	; (8012344 <etharp_tmr+0x14c>)
 8012208:	4613      	mov	r3, r2
 801220a:	005b      	lsls	r3, r3, #1
 801220c:	4413      	add	r3, r2
 801220e:	00db      	lsls	r3, r3, #3
 8012210:	440b      	add	r3, r1
 8012212:	3314      	adds	r3, #20
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8012218:	79bb      	ldrb	r3, [r7, #6]
 801221a:	2b00      	cmp	r3, #0
 801221c:	f000 8086 	beq.w	801232c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8012220:	79fa      	ldrb	r2, [r7, #7]
 8012222:	4948      	ldr	r1, [pc, #288]	; (8012344 <etharp_tmr+0x14c>)
 8012224:	4613      	mov	r3, r2
 8012226:	005b      	lsls	r3, r3, #1
 8012228:	4413      	add	r3, r2
 801222a:	00db      	lsls	r3, r3, #3
 801222c:	440b      	add	r3, r1
 801222e:	3312      	adds	r3, #18
 8012230:	881b      	ldrh	r3, [r3, #0]
 8012232:	3301      	adds	r3, #1
 8012234:	b298      	uxth	r0, r3
 8012236:	4943      	ldr	r1, [pc, #268]	; (8012344 <etharp_tmr+0x14c>)
 8012238:	4613      	mov	r3, r2
 801223a:	005b      	lsls	r3, r3, #1
 801223c:	4413      	add	r3, r2
 801223e:	00db      	lsls	r3, r3, #3
 8012240:	440b      	add	r3, r1
 8012242:	3312      	adds	r3, #18
 8012244:	4602      	mov	r2, r0
 8012246:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012248:	79fa      	ldrb	r2, [r7, #7]
 801224a:	493e      	ldr	r1, [pc, #248]	; (8012344 <etharp_tmr+0x14c>)
 801224c:	4613      	mov	r3, r2
 801224e:	005b      	lsls	r3, r3, #1
 8012250:	4413      	add	r3, r2
 8012252:	00db      	lsls	r3, r3, #3
 8012254:	440b      	add	r3, r1
 8012256:	3312      	adds	r3, #18
 8012258:	881b      	ldrh	r3, [r3, #0]
 801225a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801225e:	d215      	bcs.n	801228c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012260:	79fa      	ldrb	r2, [r7, #7]
 8012262:	4938      	ldr	r1, [pc, #224]	; (8012344 <etharp_tmr+0x14c>)
 8012264:	4613      	mov	r3, r2
 8012266:	005b      	lsls	r3, r3, #1
 8012268:	4413      	add	r3, r2
 801226a:	00db      	lsls	r3, r3, #3
 801226c:	440b      	add	r3, r1
 801226e:	3314      	adds	r3, #20
 8012270:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012272:	2b01      	cmp	r3, #1
 8012274:	d10f      	bne.n	8012296 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012276:	79fa      	ldrb	r2, [r7, #7]
 8012278:	4932      	ldr	r1, [pc, #200]	; (8012344 <etharp_tmr+0x14c>)
 801227a:	4613      	mov	r3, r2
 801227c:	005b      	lsls	r3, r3, #1
 801227e:	4413      	add	r3, r2
 8012280:	00db      	lsls	r3, r3, #3
 8012282:	440b      	add	r3, r1
 8012284:	3312      	adds	r3, #18
 8012286:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012288:	2b04      	cmp	r3, #4
 801228a:	d904      	bls.n	8012296 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801228c:	79fb      	ldrb	r3, [r7, #7]
 801228e:	4618      	mov	r0, r3
 8012290:	f7ff ff80 	bl	8012194 <etharp_free_entry>
 8012294:	e04a      	b.n	801232c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012296:	79fa      	ldrb	r2, [r7, #7]
 8012298:	492a      	ldr	r1, [pc, #168]	; (8012344 <etharp_tmr+0x14c>)
 801229a:	4613      	mov	r3, r2
 801229c:	005b      	lsls	r3, r3, #1
 801229e:	4413      	add	r3, r2
 80122a0:	00db      	lsls	r3, r3, #3
 80122a2:	440b      	add	r3, r1
 80122a4:	3314      	adds	r3, #20
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	2b03      	cmp	r3, #3
 80122aa:	d10a      	bne.n	80122c2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80122ac:	79fa      	ldrb	r2, [r7, #7]
 80122ae:	4925      	ldr	r1, [pc, #148]	; (8012344 <etharp_tmr+0x14c>)
 80122b0:	4613      	mov	r3, r2
 80122b2:	005b      	lsls	r3, r3, #1
 80122b4:	4413      	add	r3, r2
 80122b6:	00db      	lsls	r3, r3, #3
 80122b8:	440b      	add	r3, r1
 80122ba:	3314      	adds	r3, #20
 80122bc:	2204      	movs	r2, #4
 80122be:	701a      	strb	r2, [r3, #0]
 80122c0:	e034      	b.n	801232c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80122c2:	79fa      	ldrb	r2, [r7, #7]
 80122c4:	491f      	ldr	r1, [pc, #124]	; (8012344 <etharp_tmr+0x14c>)
 80122c6:	4613      	mov	r3, r2
 80122c8:	005b      	lsls	r3, r3, #1
 80122ca:	4413      	add	r3, r2
 80122cc:	00db      	lsls	r3, r3, #3
 80122ce:	440b      	add	r3, r1
 80122d0:	3314      	adds	r3, #20
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	2b04      	cmp	r3, #4
 80122d6:	d10a      	bne.n	80122ee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80122d8:	79fa      	ldrb	r2, [r7, #7]
 80122da:	491a      	ldr	r1, [pc, #104]	; (8012344 <etharp_tmr+0x14c>)
 80122dc:	4613      	mov	r3, r2
 80122de:	005b      	lsls	r3, r3, #1
 80122e0:	4413      	add	r3, r2
 80122e2:	00db      	lsls	r3, r3, #3
 80122e4:	440b      	add	r3, r1
 80122e6:	3314      	adds	r3, #20
 80122e8:	2202      	movs	r2, #2
 80122ea:	701a      	strb	r2, [r3, #0]
 80122ec:	e01e      	b.n	801232c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80122ee:	79fa      	ldrb	r2, [r7, #7]
 80122f0:	4914      	ldr	r1, [pc, #80]	; (8012344 <etharp_tmr+0x14c>)
 80122f2:	4613      	mov	r3, r2
 80122f4:	005b      	lsls	r3, r3, #1
 80122f6:	4413      	add	r3, r2
 80122f8:	00db      	lsls	r3, r3, #3
 80122fa:	440b      	add	r3, r1
 80122fc:	3314      	adds	r3, #20
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	2b01      	cmp	r3, #1
 8012302:	d113      	bne.n	801232c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012304:	79fa      	ldrb	r2, [r7, #7]
 8012306:	490f      	ldr	r1, [pc, #60]	; (8012344 <etharp_tmr+0x14c>)
 8012308:	4613      	mov	r3, r2
 801230a:	005b      	lsls	r3, r3, #1
 801230c:	4413      	add	r3, r2
 801230e:	00db      	lsls	r3, r3, #3
 8012310:	440b      	add	r3, r1
 8012312:	3308      	adds	r3, #8
 8012314:	6818      	ldr	r0, [r3, #0]
 8012316:	79fa      	ldrb	r2, [r7, #7]
 8012318:	4613      	mov	r3, r2
 801231a:	005b      	lsls	r3, r3, #1
 801231c:	4413      	add	r3, r2
 801231e:	00db      	lsls	r3, r3, #3
 8012320:	4a08      	ldr	r2, [pc, #32]	; (8012344 <etharp_tmr+0x14c>)
 8012322:	4413      	add	r3, r2
 8012324:	3304      	adds	r3, #4
 8012326:	4619      	mov	r1, r3
 8012328:	f000 fe06 	bl	8012f38 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801232c:	79fb      	ldrb	r3, [r7, #7]
 801232e:	3301      	adds	r3, #1
 8012330:	71fb      	strb	r3, [r7, #7]
 8012332:	79fb      	ldrb	r3, [r7, #7]
 8012334:	2b09      	cmp	r3, #9
 8012336:	f67f af65 	bls.w	8012204 <etharp_tmr+0xc>
      }
    }
  }
}
 801233a:	bf00      	nop
 801233c:	bf00      	nop
 801233e:	3708      	adds	r7, #8
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	2000ba74 	.word	0x2000ba74

08012348 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b088      	sub	sp, #32
 801234c:	af00      	add	r7, sp, #0
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	460b      	mov	r3, r1
 8012352:	607a      	str	r2, [r7, #4]
 8012354:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012356:	230a      	movs	r3, #10
 8012358:	77fb      	strb	r3, [r7, #31]
 801235a:	230a      	movs	r3, #10
 801235c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801235e:	230a      	movs	r3, #10
 8012360:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8012362:	2300      	movs	r3, #0
 8012364:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8012366:	230a      	movs	r3, #10
 8012368:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801236a:	2300      	movs	r3, #0
 801236c:	833b      	strh	r3, [r7, #24]
 801236e:	2300      	movs	r3, #0
 8012370:	82fb      	strh	r3, [r7, #22]
 8012372:	2300      	movs	r3, #0
 8012374:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012376:	2300      	movs	r3, #0
 8012378:	773b      	strb	r3, [r7, #28]
 801237a:	e093      	b.n	80124a4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 801237c:	7f3a      	ldrb	r2, [r7, #28]
 801237e:	4990      	ldr	r1, [pc, #576]	; (80125c0 <etharp_find_entry+0x278>)
 8012380:	4613      	mov	r3, r2
 8012382:	005b      	lsls	r3, r3, #1
 8012384:	4413      	add	r3, r2
 8012386:	00db      	lsls	r3, r3, #3
 8012388:	440b      	add	r3, r1
 801238a:	3314      	adds	r3, #20
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012390:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012394:	2b0a      	cmp	r3, #10
 8012396:	d105      	bne.n	80123a4 <etharp_find_entry+0x5c>
 8012398:	7cfb      	ldrb	r3, [r7, #19]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d102      	bne.n	80123a4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801239e:	7f3b      	ldrb	r3, [r7, #28]
 80123a0:	777b      	strb	r3, [r7, #29]
 80123a2:	e07c      	b.n	801249e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80123a4:	7cfb      	ldrb	r3, [r7, #19]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d079      	beq.n	801249e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80123aa:	7cfb      	ldrb	r3, [r7, #19]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d009      	beq.n	80123c4 <etharp_find_entry+0x7c>
 80123b0:	7cfb      	ldrb	r3, [r7, #19]
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d806      	bhi.n	80123c4 <etharp_find_entry+0x7c>
 80123b6:	4b83      	ldr	r3, [pc, #524]	; (80125c4 <etharp_find_entry+0x27c>)
 80123b8:	f240 1225 	movw	r2, #293	; 0x125
 80123bc:	4982      	ldr	r1, [pc, #520]	; (80125c8 <etharp_find_entry+0x280>)
 80123be:	4883      	ldr	r0, [pc, #524]	; (80125cc <etharp_find_entry+0x284>)
 80123c0:	f002 fb4a 	bl	8014a58 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d00f      	beq.n	80123ea <etharp_find_entry+0xa2>
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	6819      	ldr	r1, [r3, #0]
 80123ce:	7f3a      	ldrb	r2, [r7, #28]
 80123d0:	487b      	ldr	r0, [pc, #492]	; (80125c0 <etharp_find_entry+0x278>)
 80123d2:	4613      	mov	r3, r2
 80123d4:	005b      	lsls	r3, r3, #1
 80123d6:	4413      	add	r3, r2
 80123d8:	00db      	lsls	r3, r3, #3
 80123da:	4403      	add	r3, r0
 80123dc:	3304      	adds	r3, #4
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	4299      	cmp	r1, r3
 80123e2:	d102      	bne.n	80123ea <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80123e4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80123e8:	e0e5      	b.n	80125b6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80123ea:	7cfb      	ldrb	r3, [r7, #19]
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d13b      	bne.n	8012468 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80123f0:	7f3a      	ldrb	r2, [r7, #28]
 80123f2:	4973      	ldr	r1, [pc, #460]	; (80125c0 <etharp_find_entry+0x278>)
 80123f4:	4613      	mov	r3, r2
 80123f6:	005b      	lsls	r3, r3, #1
 80123f8:	4413      	add	r3, r2
 80123fa:	00db      	lsls	r3, r3, #3
 80123fc:	440b      	add	r3, r1
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d018      	beq.n	8012436 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8012404:	7f3a      	ldrb	r2, [r7, #28]
 8012406:	496e      	ldr	r1, [pc, #440]	; (80125c0 <etharp_find_entry+0x278>)
 8012408:	4613      	mov	r3, r2
 801240a:	005b      	lsls	r3, r3, #1
 801240c:	4413      	add	r3, r2
 801240e:	00db      	lsls	r3, r3, #3
 8012410:	440b      	add	r3, r1
 8012412:	3312      	adds	r3, #18
 8012414:	881b      	ldrh	r3, [r3, #0]
 8012416:	8b3a      	ldrh	r2, [r7, #24]
 8012418:	429a      	cmp	r2, r3
 801241a:	d840      	bhi.n	801249e <etharp_find_entry+0x156>
            old_queue = i;
 801241c:	7f3b      	ldrb	r3, [r7, #28]
 801241e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8012420:	7f3a      	ldrb	r2, [r7, #28]
 8012422:	4967      	ldr	r1, [pc, #412]	; (80125c0 <etharp_find_entry+0x278>)
 8012424:	4613      	mov	r3, r2
 8012426:	005b      	lsls	r3, r3, #1
 8012428:	4413      	add	r3, r2
 801242a:	00db      	lsls	r3, r3, #3
 801242c:	440b      	add	r3, r1
 801242e:	3312      	adds	r3, #18
 8012430:	881b      	ldrh	r3, [r3, #0]
 8012432:	833b      	strh	r3, [r7, #24]
 8012434:	e033      	b.n	801249e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012436:	7f3a      	ldrb	r2, [r7, #28]
 8012438:	4961      	ldr	r1, [pc, #388]	; (80125c0 <etharp_find_entry+0x278>)
 801243a:	4613      	mov	r3, r2
 801243c:	005b      	lsls	r3, r3, #1
 801243e:	4413      	add	r3, r2
 8012440:	00db      	lsls	r3, r3, #3
 8012442:	440b      	add	r3, r1
 8012444:	3312      	adds	r3, #18
 8012446:	881b      	ldrh	r3, [r3, #0]
 8012448:	8afa      	ldrh	r2, [r7, #22]
 801244a:	429a      	cmp	r2, r3
 801244c:	d827      	bhi.n	801249e <etharp_find_entry+0x156>
            old_pending = i;
 801244e:	7f3b      	ldrb	r3, [r7, #28]
 8012450:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8012452:	7f3a      	ldrb	r2, [r7, #28]
 8012454:	495a      	ldr	r1, [pc, #360]	; (80125c0 <etharp_find_entry+0x278>)
 8012456:	4613      	mov	r3, r2
 8012458:	005b      	lsls	r3, r3, #1
 801245a:	4413      	add	r3, r2
 801245c:	00db      	lsls	r3, r3, #3
 801245e:	440b      	add	r3, r1
 8012460:	3312      	adds	r3, #18
 8012462:	881b      	ldrh	r3, [r3, #0]
 8012464:	82fb      	strh	r3, [r7, #22]
 8012466:	e01a      	b.n	801249e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012468:	7cfb      	ldrb	r3, [r7, #19]
 801246a:	2b01      	cmp	r3, #1
 801246c:	d917      	bls.n	801249e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801246e:	7f3a      	ldrb	r2, [r7, #28]
 8012470:	4953      	ldr	r1, [pc, #332]	; (80125c0 <etharp_find_entry+0x278>)
 8012472:	4613      	mov	r3, r2
 8012474:	005b      	lsls	r3, r3, #1
 8012476:	4413      	add	r3, r2
 8012478:	00db      	lsls	r3, r3, #3
 801247a:	440b      	add	r3, r1
 801247c:	3312      	adds	r3, #18
 801247e:	881b      	ldrh	r3, [r3, #0]
 8012480:	8aba      	ldrh	r2, [r7, #20]
 8012482:	429a      	cmp	r2, r3
 8012484:	d80b      	bhi.n	801249e <etharp_find_entry+0x156>
            old_stable = i;
 8012486:	7f3b      	ldrb	r3, [r7, #28]
 8012488:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801248a:	7f3a      	ldrb	r2, [r7, #28]
 801248c:	494c      	ldr	r1, [pc, #304]	; (80125c0 <etharp_find_entry+0x278>)
 801248e:	4613      	mov	r3, r2
 8012490:	005b      	lsls	r3, r3, #1
 8012492:	4413      	add	r3, r2
 8012494:	00db      	lsls	r3, r3, #3
 8012496:	440b      	add	r3, r1
 8012498:	3312      	adds	r3, #18
 801249a:	881b      	ldrh	r3, [r3, #0]
 801249c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801249e:	7f3b      	ldrb	r3, [r7, #28]
 80124a0:	3301      	adds	r3, #1
 80124a2:	773b      	strb	r3, [r7, #28]
 80124a4:	7f3b      	ldrb	r3, [r7, #28]
 80124a6:	2b09      	cmp	r3, #9
 80124a8:	f67f af68 	bls.w	801237c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80124ac:	7afb      	ldrb	r3, [r7, #11]
 80124ae:	f003 0302 	and.w	r3, r3, #2
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d108      	bne.n	80124c8 <etharp_find_entry+0x180>
 80124b6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80124ba:	2b0a      	cmp	r3, #10
 80124bc:	d107      	bne.n	80124ce <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80124be:	7afb      	ldrb	r3, [r7, #11]
 80124c0:	f003 0301 	and.w	r3, r3, #1
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d102      	bne.n	80124ce <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80124c8:	f04f 33ff 	mov.w	r3, #4294967295
 80124cc:	e073      	b.n	80125b6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80124ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80124d2:	2b09      	cmp	r3, #9
 80124d4:	dc02      	bgt.n	80124dc <etharp_find_entry+0x194>
    i = empty;
 80124d6:	7f7b      	ldrb	r3, [r7, #29]
 80124d8:	773b      	strb	r3, [r7, #28]
 80124da:	e036      	b.n	801254a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80124dc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80124e0:	2b09      	cmp	r3, #9
 80124e2:	dc13      	bgt.n	801250c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80124e4:	7fbb      	ldrb	r3, [r7, #30]
 80124e6:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80124e8:	7f3a      	ldrb	r2, [r7, #28]
 80124ea:	4935      	ldr	r1, [pc, #212]	; (80125c0 <etharp_find_entry+0x278>)
 80124ec:	4613      	mov	r3, r2
 80124ee:	005b      	lsls	r3, r3, #1
 80124f0:	4413      	add	r3, r2
 80124f2:	00db      	lsls	r3, r3, #3
 80124f4:	440b      	add	r3, r1
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d018      	beq.n	801252e <etharp_find_entry+0x1e6>
 80124fc:	4b31      	ldr	r3, [pc, #196]	; (80125c4 <etharp_find_entry+0x27c>)
 80124fe:	f240 126f 	movw	r2, #367	; 0x16f
 8012502:	4933      	ldr	r1, [pc, #204]	; (80125d0 <etharp_find_entry+0x288>)
 8012504:	4831      	ldr	r0, [pc, #196]	; (80125cc <etharp_find_entry+0x284>)
 8012506:	f002 faa7 	bl	8014a58 <iprintf>
 801250a:	e010      	b.n	801252e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801250c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012510:	2b09      	cmp	r3, #9
 8012512:	dc02      	bgt.n	801251a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8012514:	7ffb      	ldrb	r3, [r7, #31]
 8012516:	773b      	strb	r3, [r7, #28]
 8012518:	e009      	b.n	801252e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801251a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801251e:	2b09      	cmp	r3, #9
 8012520:	dc02      	bgt.n	8012528 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012522:	7efb      	ldrb	r3, [r7, #27]
 8012524:	773b      	strb	r3, [r7, #28]
 8012526:	e002      	b.n	801252e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8012528:	f04f 33ff 	mov.w	r3, #4294967295
 801252c:	e043      	b.n	80125b6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801252e:	7f3b      	ldrb	r3, [r7, #28]
 8012530:	2b09      	cmp	r3, #9
 8012532:	d906      	bls.n	8012542 <etharp_find_entry+0x1fa>
 8012534:	4b23      	ldr	r3, [pc, #140]	; (80125c4 <etharp_find_entry+0x27c>)
 8012536:	f240 1281 	movw	r2, #385	; 0x181
 801253a:	4926      	ldr	r1, [pc, #152]	; (80125d4 <etharp_find_entry+0x28c>)
 801253c:	4823      	ldr	r0, [pc, #140]	; (80125cc <etharp_find_entry+0x284>)
 801253e:	f002 fa8b 	bl	8014a58 <iprintf>
    etharp_free_entry(i);
 8012542:	7f3b      	ldrb	r3, [r7, #28]
 8012544:	4618      	mov	r0, r3
 8012546:	f7ff fe25 	bl	8012194 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801254a:	7f3b      	ldrb	r3, [r7, #28]
 801254c:	2b09      	cmp	r3, #9
 801254e:	d906      	bls.n	801255e <etharp_find_entry+0x216>
 8012550:	4b1c      	ldr	r3, [pc, #112]	; (80125c4 <etharp_find_entry+0x27c>)
 8012552:	f240 1285 	movw	r2, #389	; 0x185
 8012556:	491f      	ldr	r1, [pc, #124]	; (80125d4 <etharp_find_entry+0x28c>)
 8012558:	481c      	ldr	r0, [pc, #112]	; (80125cc <etharp_find_entry+0x284>)
 801255a:	f002 fa7d 	bl	8014a58 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801255e:	7f3a      	ldrb	r2, [r7, #28]
 8012560:	4917      	ldr	r1, [pc, #92]	; (80125c0 <etharp_find_entry+0x278>)
 8012562:	4613      	mov	r3, r2
 8012564:	005b      	lsls	r3, r3, #1
 8012566:	4413      	add	r3, r2
 8012568:	00db      	lsls	r3, r3, #3
 801256a:	440b      	add	r3, r1
 801256c:	3314      	adds	r3, #20
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d006      	beq.n	8012582 <etharp_find_entry+0x23a>
 8012574:	4b13      	ldr	r3, [pc, #76]	; (80125c4 <etharp_find_entry+0x27c>)
 8012576:	f44f 72c3 	mov.w	r2, #390	; 0x186
 801257a:	4917      	ldr	r1, [pc, #92]	; (80125d8 <etharp_find_entry+0x290>)
 801257c:	4813      	ldr	r0, [pc, #76]	; (80125cc <etharp_find_entry+0x284>)
 801257e:	f002 fa6b 	bl	8014a58 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d00a      	beq.n	801259e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012588:	7f3a      	ldrb	r2, [r7, #28]
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	6819      	ldr	r1, [r3, #0]
 801258e:	480c      	ldr	r0, [pc, #48]	; (80125c0 <etharp_find_entry+0x278>)
 8012590:	4613      	mov	r3, r2
 8012592:	005b      	lsls	r3, r3, #1
 8012594:	4413      	add	r3, r2
 8012596:	00db      	lsls	r3, r3, #3
 8012598:	4403      	add	r3, r0
 801259a:	3304      	adds	r3, #4
 801259c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801259e:	7f3a      	ldrb	r2, [r7, #28]
 80125a0:	4907      	ldr	r1, [pc, #28]	; (80125c0 <etharp_find_entry+0x278>)
 80125a2:	4613      	mov	r3, r2
 80125a4:	005b      	lsls	r3, r3, #1
 80125a6:	4413      	add	r3, r2
 80125a8:	00db      	lsls	r3, r3, #3
 80125aa:	440b      	add	r3, r1
 80125ac:	3312      	adds	r3, #18
 80125ae:	2200      	movs	r2, #0
 80125b0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80125b2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3720      	adds	r7, #32
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
 80125be:	bf00      	nop
 80125c0:	2000ba74 	.word	0x2000ba74
 80125c4:	080177c0 	.word	0x080177c0
 80125c8:	080177f8 	.word	0x080177f8
 80125cc:	08017838 	.word	0x08017838
 80125d0:	08017860 	.word	0x08017860
 80125d4:	08017878 	.word	0x08017878
 80125d8:	0801788c 	.word	0x0801788c

080125dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b088      	sub	sp, #32
 80125e0:	af02      	add	r7, sp, #8
 80125e2:	60f8      	str	r0, [r7, #12]
 80125e4:	60b9      	str	r1, [r7, #8]
 80125e6:	607a      	str	r2, [r7, #4]
 80125e8:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125f0:	2b06      	cmp	r3, #6
 80125f2:	d006      	beq.n	8012602 <etharp_update_arp_entry+0x26>
 80125f4:	4b48      	ldr	r3, [pc, #288]	; (8012718 <etharp_update_arp_entry+0x13c>)
 80125f6:	f240 12ab 	movw	r2, #427	; 0x1ab
 80125fa:	4948      	ldr	r1, [pc, #288]	; (801271c <etharp_update_arp_entry+0x140>)
 80125fc:	4848      	ldr	r0, [pc, #288]	; (8012720 <etharp_update_arp_entry+0x144>)
 80125fe:	f002 fa2b 	bl	8014a58 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d012      	beq.n	801262e <etharp_update_arp_entry+0x52>
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d00e      	beq.n	801262e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	68f9      	ldr	r1, [r7, #12]
 8012616:	4618      	mov	r0, r3
 8012618:	f001 f8aa 	bl	8013770 <ip4_addr_isbroadcast_u32>
 801261c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801261e:	2b00      	cmp	r3, #0
 8012620:	d105      	bne.n	801262e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801262a:	2be0      	cmp	r3, #224	; 0xe0
 801262c:	d102      	bne.n	8012634 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801262e:	f06f 030f 	mvn.w	r3, #15
 8012632:	e06c      	b.n	801270e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012634:	78fb      	ldrb	r3, [r7, #3]
 8012636:	68fa      	ldr	r2, [r7, #12]
 8012638:	4619      	mov	r1, r3
 801263a:	68b8      	ldr	r0, [r7, #8]
 801263c:	f7ff fe84 	bl	8012348 <etharp_find_entry>
 8012640:	4603      	mov	r3, r0
 8012642:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012648:	2b00      	cmp	r3, #0
 801264a:	da02      	bge.n	8012652 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801264c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012650:	e05d      	b.n	801270e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012652:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012656:	4933      	ldr	r1, [pc, #204]	; (8012724 <etharp_update_arp_entry+0x148>)
 8012658:	4613      	mov	r3, r2
 801265a:	005b      	lsls	r3, r3, #1
 801265c:	4413      	add	r3, r2
 801265e:	00db      	lsls	r3, r3, #3
 8012660:	440b      	add	r3, r1
 8012662:	3314      	adds	r3, #20
 8012664:	2202      	movs	r2, #2
 8012666:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012668:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801266c:	492d      	ldr	r1, [pc, #180]	; (8012724 <etharp_update_arp_entry+0x148>)
 801266e:	4613      	mov	r3, r2
 8012670:	005b      	lsls	r3, r3, #1
 8012672:	4413      	add	r3, r2
 8012674:	00db      	lsls	r3, r3, #3
 8012676:	440b      	add	r3, r1
 8012678:	3308      	adds	r3, #8
 801267a:	68fa      	ldr	r2, [r7, #12]
 801267c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801267e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012682:	4613      	mov	r3, r2
 8012684:	005b      	lsls	r3, r3, #1
 8012686:	4413      	add	r3, r2
 8012688:	00db      	lsls	r3, r3, #3
 801268a:	3308      	adds	r3, #8
 801268c:	4a25      	ldr	r2, [pc, #148]	; (8012724 <etharp_update_arp_entry+0x148>)
 801268e:	4413      	add	r3, r2
 8012690:	3304      	adds	r3, #4
 8012692:	2206      	movs	r2, #6
 8012694:	6879      	ldr	r1, [r7, #4]
 8012696:	4618      	mov	r0, r3
 8012698:	f002 fb0f 	bl	8014cba <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801269c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80126a0:	4920      	ldr	r1, [pc, #128]	; (8012724 <etharp_update_arp_entry+0x148>)
 80126a2:	4613      	mov	r3, r2
 80126a4:	005b      	lsls	r3, r3, #1
 80126a6:	4413      	add	r3, r2
 80126a8:	00db      	lsls	r3, r3, #3
 80126aa:	440b      	add	r3, r1
 80126ac:	3312      	adds	r3, #18
 80126ae:	2200      	movs	r2, #0
 80126b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80126b2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80126b6:	491b      	ldr	r1, [pc, #108]	; (8012724 <etharp_update_arp_entry+0x148>)
 80126b8:	4613      	mov	r3, r2
 80126ba:	005b      	lsls	r3, r3, #1
 80126bc:	4413      	add	r3, r2
 80126be:	00db      	lsls	r3, r3, #3
 80126c0:	440b      	add	r3, r1
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d021      	beq.n	801270c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80126c8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80126cc:	4915      	ldr	r1, [pc, #84]	; (8012724 <etharp_update_arp_entry+0x148>)
 80126ce:	4613      	mov	r3, r2
 80126d0:	005b      	lsls	r3, r3, #1
 80126d2:	4413      	add	r3, r2
 80126d4:	00db      	lsls	r3, r3, #3
 80126d6:	440b      	add	r3, r1
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80126dc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80126e0:	4910      	ldr	r1, [pc, #64]	; (8012724 <etharp_update_arp_entry+0x148>)
 80126e2:	4613      	mov	r3, r2
 80126e4:	005b      	lsls	r3, r3, #1
 80126e6:	4413      	add	r3, r2
 80126e8:	00db      	lsls	r3, r3, #3
 80126ea:	440b      	add	r3, r1
 80126ec:	2200      	movs	r2, #0
 80126ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80126f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126fa:	9300      	str	r3, [sp, #0]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6939      	ldr	r1, [r7, #16]
 8012700:	68f8      	ldr	r0, [r7, #12]
 8012702:	f001 fed7 	bl	80144b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012706:	6938      	ldr	r0, [r7, #16]
 8012708:	f7f9 fcc8 	bl	800c09c <pbuf_free>
  }
  return ERR_OK;
 801270c:	2300      	movs	r3, #0
}
 801270e:	4618      	mov	r0, r3
 8012710:	3718      	adds	r7, #24
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	080177c0 	.word	0x080177c0
 801271c:	080178b8 	.word	0x080178b8
 8012720:	08017838 	.word	0x08017838
 8012724:	2000ba74 	.word	0x2000ba74

08012728 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012728:	b5b0      	push	{r4, r5, r7, lr}
 801272a:	b08a      	sub	sp, #40	; 0x28
 801272c:	af04      	add	r7, sp, #16
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d107      	bne.n	8012748 <etharp_input+0x20>
 8012738:	4b3d      	ldr	r3, [pc, #244]	; (8012830 <etharp_input+0x108>)
 801273a:	f44f 7222 	mov.w	r2, #648	; 0x288
 801273e:	493d      	ldr	r1, [pc, #244]	; (8012834 <etharp_input+0x10c>)
 8012740:	483d      	ldr	r0, [pc, #244]	; (8012838 <etharp_input+0x110>)
 8012742:	f002 f989 	bl	8014a58 <iprintf>
 8012746:	e06f      	b.n	8012828 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	881b      	ldrh	r3, [r3, #0]
 8012752:	b29b      	uxth	r3, r3
 8012754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012758:	d10c      	bne.n	8012774 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801275e:	2b06      	cmp	r3, #6
 8012760:	d108      	bne.n	8012774 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012766:	2b04      	cmp	r3, #4
 8012768:	d104      	bne.n	8012774 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	885b      	ldrh	r3, [r3, #2]
 801276e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012770:	2b08      	cmp	r3, #8
 8012772:	d003      	beq.n	801277c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f7f9 fc91 	bl	800c09c <pbuf_free>
    return;
 801277a:	e055      	b.n	8012828 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	330e      	adds	r3, #14
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	3318      	adds	r3, #24
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	3304      	adds	r3, #4
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d102      	bne.n	801279c <etharp_input+0x74>
    for_us = 0;
 8012796:	2300      	movs	r3, #0
 8012798:	75fb      	strb	r3, [r7, #23]
 801279a:	e009      	b.n	80127b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801279c:	68ba      	ldr	r2, [r7, #8]
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	3304      	adds	r3, #4
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	bf0c      	ite	eq
 80127a8:	2301      	moveq	r3, #1
 80127aa:	2300      	movne	r3, #0
 80127ac:	b2db      	uxtb	r3, r3
 80127ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	f103 0208 	add.w	r2, r3, #8
 80127b6:	7dfb      	ldrb	r3, [r7, #23]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d001      	beq.n	80127c0 <etharp_input+0x98>
 80127bc:	2301      	movs	r3, #1
 80127be:	e000      	b.n	80127c2 <etharp_input+0x9a>
 80127c0:	2302      	movs	r3, #2
 80127c2:	f107 010c 	add.w	r1, r7, #12
 80127c6:	6838      	ldr	r0, [r7, #0]
 80127c8:	f7ff ff08 	bl	80125dc <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	88db      	ldrh	r3, [r3, #6]
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127d6:	d003      	beq.n	80127e0 <etharp_input+0xb8>
 80127d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127dc:	d01e      	beq.n	801281c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80127de:	e020      	b.n	8012822 <etharp_input+0xfa>
    if (for_us) {
 80127e0:	7dfb      	ldrb	r3, [r7, #23]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d01c      	beq.n	8012820 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	f103 0529 	add.w	r5, r3, #41	; 0x29
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80127fc:	693a      	ldr	r2, [r7, #16]
 80127fe:	3208      	adds	r2, #8
      etharp_raw(netif,
 8012800:	2102      	movs	r1, #2
 8012802:	9103      	str	r1, [sp, #12]
 8012804:	f107 010c 	add.w	r1, r7, #12
 8012808:	9102      	str	r1, [sp, #8]
 801280a:	9201      	str	r2, [sp, #4]
 801280c:	9300      	str	r3, [sp, #0]
 801280e:	462b      	mov	r3, r5
 8012810:	4622      	mov	r2, r4
 8012812:	4601      	mov	r1, r0
 8012814:	6838      	ldr	r0, [r7, #0]
 8012816:	f000 fae1 	bl	8012ddc <etharp_raw>
    break;
 801281a:	e001      	b.n	8012820 <etharp_input+0xf8>
    break;
 801281c:	bf00      	nop
 801281e:	e000      	b.n	8012822 <etharp_input+0xfa>
    break;
 8012820:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f7f9 fc3a 	bl	800c09c <pbuf_free>
}
 8012828:	3718      	adds	r7, #24
 801282a:	46bd      	mov	sp, r7
 801282c:	bdb0      	pop	{r4, r5, r7, pc}
 801282e:	bf00      	nop
 8012830:	080177c0 	.word	0x080177c0
 8012834:	08017910 	.word	0x08017910
 8012838:	08017838 	.word	0x08017838

0801283c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b086      	sub	sp, #24
 8012840:	af02      	add	r7, sp, #8
 8012842:	60f8      	str	r0, [r7, #12]
 8012844:	60b9      	str	r1, [r7, #8]
 8012846:	4613      	mov	r3, r2
 8012848:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801284a:	79fa      	ldrb	r2, [r7, #7]
 801284c:	4944      	ldr	r1, [pc, #272]	; (8012960 <etharp_output_to_arp_index+0x124>)
 801284e:	4613      	mov	r3, r2
 8012850:	005b      	lsls	r3, r3, #1
 8012852:	4413      	add	r3, r2
 8012854:	00db      	lsls	r3, r3, #3
 8012856:	440b      	add	r3, r1
 8012858:	3314      	adds	r3, #20
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	2b01      	cmp	r3, #1
 801285e:	d806      	bhi.n	801286e <etharp_output_to_arp_index+0x32>
 8012860:	4b40      	ldr	r3, [pc, #256]	; (8012964 <etharp_output_to_arp_index+0x128>)
 8012862:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8012866:	4940      	ldr	r1, [pc, #256]	; (8012968 <etharp_output_to_arp_index+0x12c>)
 8012868:	4840      	ldr	r0, [pc, #256]	; (801296c <etharp_output_to_arp_index+0x130>)
 801286a:	f002 f8f5 	bl	8014a58 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801286e:	79fa      	ldrb	r2, [r7, #7]
 8012870:	493b      	ldr	r1, [pc, #236]	; (8012960 <etharp_output_to_arp_index+0x124>)
 8012872:	4613      	mov	r3, r2
 8012874:	005b      	lsls	r3, r3, #1
 8012876:	4413      	add	r3, r2
 8012878:	00db      	lsls	r3, r3, #3
 801287a:	440b      	add	r3, r1
 801287c:	3314      	adds	r3, #20
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	2b02      	cmp	r3, #2
 8012882:	d153      	bne.n	801292c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012884:	79fa      	ldrb	r2, [r7, #7]
 8012886:	4936      	ldr	r1, [pc, #216]	; (8012960 <etharp_output_to_arp_index+0x124>)
 8012888:	4613      	mov	r3, r2
 801288a:	005b      	lsls	r3, r3, #1
 801288c:	4413      	add	r3, r2
 801288e:	00db      	lsls	r3, r3, #3
 8012890:	440b      	add	r3, r1
 8012892:	3312      	adds	r3, #18
 8012894:	881b      	ldrh	r3, [r3, #0]
 8012896:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801289a:	d919      	bls.n	80128d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801289c:	79fa      	ldrb	r2, [r7, #7]
 801289e:	4613      	mov	r3, r2
 80128a0:	005b      	lsls	r3, r3, #1
 80128a2:	4413      	add	r3, r2
 80128a4:	00db      	lsls	r3, r3, #3
 80128a6:	4a2e      	ldr	r2, [pc, #184]	; (8012960 <etharp_output_to_arp_index+0x124>)
 80128a8:	4413      	add	r3, r2
 80128aa:	3304      	adds	r3, #4
 80128ac:	4619      	mov	r1, r3
 80128ae:	68f8      	ldr	r0, [r7, #12]
 80128b0:	f000 fb42 	bl	8012f38 <etharp_request>
 80128b4:	4603      	mov	r3, r0
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d138      	bne.n	801292c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80128ba:	79fa      	ldrb	r2, [r7, #7]
 80128bc:	4928      	ldr	r1, [pc, #160]	; (8012960 <etharp_output_to_arp_index+0x124>)
 80128be:	4613      	mov	r3, r2
 80128c0:	005b      	lsls	r3, r3, #1
 80128c2:	4413      	add	r3, r2
 80128c4:	00db      	lsls	r3, r3, #3
 80128c6:	440b      	add	r3, r1
 80128c8:	3314      	adds	r3, #20
 80128ca:	2203      	movs	r2, #3
 80128cc:	701a      	strb	r2, [r3, #0]
 80128ce:	e02d      	b.n	801292c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80128d0:	79fa      	ldrb	r2, [r7, #7]
 80128d2:	4923      	ldr	r1, [pc, #140]	; (8012960 <etharp_output_to_arp_index+0x124>)
 80128d4:	4613      	mov	r3, r2
 80128d6:	005b      	lsls	r3, r3, #1
 80128d8:	4413      	add	r3, r2
 80128da:	00db      	lsls	r3, r3, #3
 80128dc:	440b      	add	r3, r1
 80128de:	3312      	adds	r3, #18
 80128e0:	881b      	ldrh	r3, [r3, #0]
 80128e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80128e6:	d321      	bcc.n	801292c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80128e8:	79fa      	ldrb	r2, [r7, #7]
 80128ea:	4613      	mov	r3, r2
 80128ec:	005b      	lsls	r3, r3, #1
 80128ee:	4413      	add	r3, r2
 80128f0:	00db      	lsls	r3, r3, #3
 80128f2:	4a1b      	ldr	r2, [pc, #108]	; (8012960 <etharp_output_to_arp_index+0x124>)
 80128f4:	4413      	add	r3, r2
 80128f6:	1d19      	adds	r1, r3, #4
 80128f8:	79fa      	ldrb	r2, [r7, #7]
 80128fa:	4613      	mov	r3, r2
 80128fc:	005b      	lsls	r3, r3, #1
 80128fe:	4413      	add	r3, r2
 8012900:	00db      	lsls	r3, r3, #3
 8012902:	3308      	adds	r3, #8
 8012904:	4a16      	ldr	r2, [pc, #88]	; (8012960 <etharp_output_to_arp_index+0x124>)
 8012906:	4413      	add	r3, r2
 8012908:	3304      	adds	r3, #4
 801290a:	461a      	mov	r2, r3
 801290c:	68f8      	ldr	r0, [r7, #12]
 801290e:	f000 faf1 	bl	8012ef4 <etharp_request_dst>
 8012912:	4603      	mov	r3, r0
 8012914:	2b00      	cmp	r3, #0
 8012916:	d109      	bne.n	801292c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012918:	79fa      	ldrb	r2, [r7, #7]
 801291a:	4911      	ldr	r1, [pc, #68]	; (8012960 <etharp_output_to_arp_index+0x124>)
 801291c:	4613      	mov	r3, r2
 801291e:	005b      	lsls	r3, r3, #1
 8012920:	4413      	add	r3, r2
 8012922:	00db      	lsls	r3, r3, #3
 8012924:	440b      	add	r3, r1
 8012926:	3314      	adds	r3, #20
 8012928:	2203      	movs	r2, #3
 801292a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8012932:	79fa      	ldrb	r2, [r7, #7]
 8012934:	4613      	mov	r3, r2
 8012936:	005b      	lsls	r3, r3, #1
 8012938:	4413      	add	r3, r2
 801293a:	00db      	lsls	r3, r3, #3
 801293c:	3308      	adds	r3, #8
 801293e:	4a08      	ldr	r2, [pc, #32]	; (8012960 <etharp_output_to_arp_index+0x124>)
 8012940:	4413      	add	r3, r2
 8012942:	3304      	adds	r3, #4
 8012944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012948:	9200      	str	r2, [sp, #0]
 801294a:	460a      	mov	r2, r1
 801294c:	68b9      	ldr	r1, [r7, #8]
 801294e:	68f8      	ldr	r0, [r7, #12]
 8012950:	f001 fdb0 	bl	80144b4 <ethernet_output>
 8012954:	4603      	mov	r3, r0
}
 8012956:	4618      	mov	r0, r3
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	2000ba74 	.word	0x2000ba74
 8012964:	080177c0 	.word	0x080177c0
 8012968:	08017930 	.word	0x08017930
 801296c:	08017838 	.word	0x08017838

08012970 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b08a      	sub	sp, #40	; 0x28
 8012974:	af02      	add	r7, sp, #8
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d106      	bne.n	8012994 <etharp_output+0x24>
 8012986:	4b69      	ldr	r3, [pc, #420]	; (8012b2c <etharp_output+0x1bc>)
 8012988:	f240 321b 	movw	r2, #795	; 0x31b
 801298c:	4968      	ldr	r1, [pc, #416]	; (8012b30 <etharp_output+0x1c0>)
 801298e:	4869      	ldr	r0, [pc, #420]	; (8012b34 <etharp_output+0x1c4>)
 8012990:	f002 f862 	bl	8014a58 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d106      	bne.n	80129a8 <etharp_output+0x38>
 801299a:	4b64      	ldr	r3, [pc, #400]	; (8012b2c <etharp_output+0x1bc>)
 801299c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80129a0:	4965      	ldr	r1, [pc, #404]	; (8012b38 <etharp_output+0x1c8>)
 80129a2:	4864      	ldr	r0, [pc, #400]	; (8012b34 <etharp_output+0x1c4>)
 80129a4:	f002 f858 	bl	8014a58 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d106      	bne.n	80129bc <etharp_output+0x4c>
 80129ae:	4b5f      	ldr	r3, [pc, #380]	; (8012b2c <etharp_output+0x1bc>)
 80129b0:	f240 321d 	movw	r2, #797	; 0x31d
 80129b4:	4961      	ldr	r1, [pc, #388]	; (8012b3c <etharp_output+0x1cc>)
 80129b6:	485f      	ldr	r0, [pc, #380]	; (8012b34 <etharp_output+0x1c4>)
 80129b8:	f002 f84e 	bl	8014a58 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	68f9      	ldr	r1, [r7, #12]
 80129c2:	4618      	mov	r0, r3
 80129c4:	f000 fed4 	bl	8013770 <ip4_addr_isbroadcast_u32>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d002      	beq.n	80129d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80129ce:	4b5c      	ldr	r3, [pc, #368]	; (8012b40 <etharp_output+0x1d0>)
 80129d0:	61fb      	str	r3, [r7, #28]
 80129d2:	e09b      	b.n	8012b0c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80129dc:	2be0      	cmp	r3, #224	; 0xe0
 80129de:	d118      	bne.n	8012a12 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80129e0:	2301      	movs	r3, #1
 80129e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80129e4:	2300      	movs	r3, #0
 80129e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80129e8:	235e      	movs	r3, #94	; 0x5e
 80129ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	3301      	adds	r3, #1
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	3302      	adds	r3, #2
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	3303      	adds	r3, #3
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012a0a:	f107 0310 	add.w	r3, r7, #16
 8012a0e:	61fb      	str	r3, [r7, #28]
 8012a10:	e07c      	b.n	8012b0c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681a      	ldr	r2, [r3, #0]
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	3304      	adds	r3, #4
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	405a      	eors	r2, r3
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	3308      	adds	r3, #8
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4013      	ands	r3, r2
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d012      	beq.n	8012a50 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012a30:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012a34:	4293      	cmp	r3, r2
 8012a36:	d00b      	beq.n	8012a50 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	330c      	adds	r3, #12
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d003      	beq.n	8012a4a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	330c      	adds	r3, #12
 8012a46:	61bb      	str	r3, [r7, #24]
 8012a48:	e002      	b.n	8012a50 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012a4a:	f06f 0303 	mvn.w	r3, #3
 8012a4e:	e069      	b.n	8012b24 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012a50:	4b3c      	ldr	r3, [pc, #240]	; (8012b44 <etharp_output+0x1d4>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	4619      	mov	r1, r3
 8012a56:	4a3c      	ldr	r2, [pc, #240]	; (8012b48 <etharp_output+0x1d8>)
 8012a58:	460b      	mov	r3, r1
 8012a5a:	005b      	lsls	r3, r3, #1
 8012a5c:	440b      	add	r3, r1
 8012a5e:	00db      	lsls	r3, r3, #3
 8012a60:	4413      	add	r3, r2
 8012a62:	3314      	adds	r3, #20
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d917      	bls.n	8012a9a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012a6a:	69bb      	ldr	r3, [r7, #24]
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	4b35      	ldr	r3, [pc, #212]	; (8012b44 <etharp_output+0x1d4>)
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	4618      	mov	r0, r3
 8012a74:	4934      	ldr	r1, [pc, #208]	; (8012b48 <etharp_output+0x1d8>)
 8012a76:	4603      	mov	r3, r0
 8012a78:	005b      	lsls	r3, r3, #1
 8012a7a:	4403      	add	r3, r0
 8012a7c:	00db      	lsls	r3, r3, #3
 8012a7e:	440b      	add	r3, r1
 8012a80:	3304      	adds	r3, #4
 8012a82:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d108      	bne.n	8012a9a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012a88:	4b2e      	ldr	r3, [pc, #184]	; (8012b44 <etharp_output+0x1d4>)
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	68b9      	ldr	r1, [r7, #8]
 8012a90:	68f8      	ldr	r0, [r7, #12]
 8012a92:	f7ff fed3 	bl	801283c <etharp_output_to_arp_index>
 8012a96:	4603      	mov	r3, r0
 8012a98:	e044      	b.n	8012b24 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	75fb      	strb	r3, [r7, #23]
 8012a9e:	e02a      	b.n	8012af6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012aa0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012aa4:	4928      	ldr	r1, [pc, #160]	; (8012b48 <etharp_output+0x1d8>)
 8012aa6:	4613      	mov	r3, r2
 8012aa8:	005b      	lsls	r3, r3, #1
 8012aaa:	4413      	add	r3, r2
 8012aac:	00db      	lsls	r3, r3, #3
 8012aae:	440b      	add	r3, r1
 8012ab0:	3314      	adds	r3, #20
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d918      	bls.n	8012aea <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012ab8:	69bb      	ldr	r3, [r7, #24]
 8012aba:	6819      	ldr	r1, [r3, #0]
 8012abc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012ac0:	4821      	ldr	r0, [pc, #132]	; (8012b48 <etharp_output+0x1d8>)
 8012ac2:	4613      	mov	r3, r2
 8012ac4:	005b      	lsls	r3, r3, #1
 8012ac6:	4413      	add	r3, r2
 8012ac8:	00db      	lsls	r3, r3, #3
 8012aca:	4403      	add	r3, r0
 8012acc:	3304      	adds	r3, #4
 8012ace:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012ad0:	4299      	cmp	r1, r3
 8012ad2:	d10a      	bne.n	8012aea <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8012ad4:	7dfa      	ldrb	r2, [r7, #23]
 8012ad6:	4b1b      	ldr	r3, [pc, #108]	; (8012b44 <etharp_output+0x1d4>)
 8012ad8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012ada:	7dfb      	ldrb	r3, [r7, #23]
 8012adc:	461a      	mov	r2, r3
 8012ade:	68b9      	ldr	r1, [r7, #8]
 8012ae0:	68f8      	ldr	r0, [r7, #12]
 8012ae2:	f7ff feab 	bl	801283c <etharp_output_to_arp_index>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	e01c      	b.n	8012b24 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012aee:	b2db      	uxtb	r3, r3
 8012af0:	3301      	adds	r3, #1
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	75fb      	strb	r3, [r7, #23]
 8012af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012afa:	2b09      	cmp	r3, #9
 8012afc:	ddd0      	ble.n	8012aa0 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012afe:	68ba      	ldr	r2, [r7, #8]
 8012b00:	69b9      	ldr	r1, [r7, #24]
 8012b02:	68f8      	ldr	r0, [r7, #12]
 8012b04:	f000 f822 	bl	8012b4c <etharp_query>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	e00b      	b.n	8012b24 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8012b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012b16:	9300      	str	r3, [sp, #0]
 8012b18:	69fb      	ldr	r3, [r7, #28]
 8012b1a:	68b9      	ldr	r1, [r7, #8]
 8012b1c:	68f8      	ldr	r0, [r7, #12]
 8012b1e:	f001 fcc9 	bl	80144b4 <ethernet_output>
 8012b22:	4603      	mov	r3, r0
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3720      	adds	r7, #32
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	080177c0 	.word	0x080177c0
 8012b30:	08017910 	.word	0x08017910
 8012b34:	08017838 	.word	0x08017838
 8012b38:	08017960 	.word	0x08017960
 8012b3c:	08017900 	.word	0x08017900
 8012b40:	08017f8c 	.word	0x08017f8c
 8012b44:	2000bb64 	.word	0x2000bb64
 8012b48:	2000ba74 	.word	0x2000ba74

08012b4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b08c      	sub	sp, #48	; 0x30
 8012b50:	af02      	add	r7, sp, #8
 8012b52:	60f8      	str	r0, [r7, #12]
 8012b54:	60b9      	str	r1, [r7, #8]
 8012b56:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	3329      	adds	r3, #41	; 0x29
 8012b5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012b5e:	23ff      	movs	r3, #255	; 0xff
 8012b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012b64:	2300      	movs	r3, #0
 8012b66:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	68f9      	ldr	r1, [r7, #12]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f000 fdfe 	bl	8013770 <ip4_addr_isbroadcast_u32>
 8012b74:	4603      	mov	r3, r0
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d10c      	bne.n	8012b94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b82:	2be0      	cmp	r3, #224	; 0xe0
 8012b84:	d006      	beq.n	8012b94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d003      	beq.n	8012b94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d102      	bne.n	8012b9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012b94:	f06f 030f 	mvn.w	r3, #15
 8012b98:	e10e      	b.n	8012db8 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012b9a:	68fa      	ldr	r2, [r7, #12]
 8012b9c:	2101      	movs	r1, #1
 8012b9e:	68b8      	ldr	r0, [r7, #8]
 8012ba0:	f7ff fbd2 	bl	8012348 <etharp_find_entry>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8012ba8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	da02      	bge.n	8012bb6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8012bb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012bb4:	e100      	b.n	8012db8 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012bb6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012bba:	4981      	ldr	r1, [pc, #516]	; (8012dc0 <etharp_query+0x274>)
 8012bbc:	4613      	mov	r3, r2
 8012bbe:	005b      	lsls	r3, r3, #1
 8012bc0:	4413      	add	r3, r2
 8012bc2:	00db      	lsls	r3, r3, #3
 8012bc4:	440b      	add	r3, r1
 8012bc6:	3314      	adds	r3, #20
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d117      	bne.n	8012bfe <etharp_query+0xb2>
    is_new_entry = 1;
 8012bce:	2301      	movs	r3, #1
 8012bd0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012bd2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012bd6:	497a      	ldr	r1, [pc, #488]	; (8012dc0 <etharp_query+0x274>)
 8012bd8:	4613      	mov	r3, r2
 8012bda:	005b      	lsls	r3, r3, #1
 8012bdc:	4413      	add	r3, r2
 8012bde:	00db      	lsls	r3, r3, #3
 8012be0:	440b      	add	r3, r1
 8012be2:	3314      	adds	r3, #20
 8012be4:	2201      	movs	r2, #1
 8012be6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012be8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012bec:	4974      	ldr	r1, [pc, #464]	; (8012dc0 <etharp_query+0x274>)
 8012bee:	4613      	mov	r3, r2
 8012bf0:	005b      	lsls	r3, r3, #1
 8012bf2:	4413      	add	r3, r2
 8012bf4:	00db      	lsls	r3, r3, #3
 8012bf6:	440b      	add	r3, r1
 8012bf8:	3308      	adds	r3, #8
 8012bfa:	68fa      	ldr	r2, [r7, #12]
 8012bfc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012bfe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012c02:	496f      	ldr	r1, [pc, #444]	; (8012dc0 <etharp_query+0x274>)
 8012c04:	4613      	mov	r3, r2
 8012c06:	005b      	lsls	r3, r3, #1
 8012c08:	4413      	add	r3, r2
 8012c0a:	00db      	lsls	r3, r3, #3
 8012c0c:	440b      	add	r3, r1
 8012c0e:	3314      	adds	r3, #20
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d012      	beq.n	8012c3c <etharp_query+0xf0>
 8012c16:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012c1a:	4969      	ldr	r1, [pc, #420]	; (8012dc0 <etharp_query+0x274>)
 8012c1c:	4613      	mov	r3, r2
 8012c1e:	005b      	lsls	r3, r3, #1
 8012c20:	4413      	add	r3, r2
 8012c22:	00db      	lsls	r3, r3, #3
 8012c24:	440b      	add	r3, r1
 8012c26:	3314      	adds	r3, #20
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	d806      	bhi.n	8012c3c <etharp_query+0xf0>
 8012c2e:	4b65      	ldr	r3, [pc, #404]	; (8012dc4 <etharp_query+0x278>)
 8012c30:	f240 32c7 	movw	r2, #967	; 0x3c7
 8012c34:	4964      	ldr	r1, [pc, #400]	; (8012dc8 <etharp_query+0x27c>)
 8012c36:	4865      	ldr	r0, [pc, #404]	; (8012dcc <etharp_query+0x280>)
 8012c38:	f001 ff0e 	bl	8014a58 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012c3c:	6a3b      	ldr	r3, [r7, #32]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d102      	bne.n	8012c48 <etharp_query+0xfc>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d10c      	bne.n	8012c62 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012c48:	68b9      	ldr	r1, [r7, #8]
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f000 f974 	bl	8012f38 <etharp_request>
 8012c50:	4603      	mov	r3, r0
 8012c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d102      	bne.n	8012c62 <etharp_query+0x116>
      return result;
 8012c5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012c60:	e0aa      	b.n	8012db8 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d106      	bne.n	8012c76 <etharp_query+0x12a>
 8012c68:	4b56      	ldr	r3, [pc, #344]	; (8012dc4 <etharp_query+0x278>)
 8012c6a:	f240 32db 	movw	r2, #987	; 0x3db
 8012c6e:	4958      	ldr	r1, [pc, #352]	; (8012dd0 <etharp_query+0x284>)
 8012c70:	4856      	ldr	r0, [pc, #344]	; (8012dcc <etharp_query+0x280>)
 8012c72:	f001 fef1 	bl	8014a58 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012c76:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012c7a:	4951      	ldr	r1, [pc, #324]	; (8012dc0 <etharp_query+0x274>)
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	005b      	lsls	r3, r3, #1
 8012c80:	4413      	add	r3, r2
 8012c82:	00db      	lsls	r3, r3, #3
 8012c84:	440b      	add	r3, r1
 8012c86:	3314      	adds	r3, #20
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	2b01      	cmp	r3, #1
 8012c8c:	d918      	bls.n	8012cc0 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8012c8e:	7cfa      	ldrb	r2, [r7, #19]
 8012c90:	4b50      	ldr	r3, [pc, #320]	; (8012dd4 <etharp_query+0x288>)
 8012c92:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012c94:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012c98:	4613      	mov	r3, r2
 8012c9a:	005b      	lsls	r3, r3, #1
 8012c9c:	4413      	add	r3, r2
 8012c9e:	00db      	lsls	r3, r3, #3
 8012ca0:	3308      	adds	r3, #8
 8012ca2:	4a47      	ldr	r2, [pc, #284]	; (8012dc0 <etharp_query+0x274>)
 8012ca4:	4413      	add	r3, r2
 8012ca6:	3304      	adds	r3, #4
 8012ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012cac:	9200      	str	r2, [sp, #0]
 8012cae:	697a      	ldr	r2, [r7, #20]
 8012cb0:	6879      	ldr	r1, [r7, #4]
 8012cb2:	68f8      	ldr	r0, [r7, #12]
 8012cb4:	f001 fbfe 	bl	80144b4 <ethernet_output>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012cbe:	e079      	b.n	8012db4 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012cc0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012cc4:	493e      	ldr	r1, [pc, #248]	; (8012dc0 <etharp_query+0x274>)
 8012cc6:	4613      	mov	r3, r2
 8012cc8:	005b      	lsls	r3, r3, #1
 8012cca:	4413      	add	r3, r2
 8012ccc:	00db      	lsls	r3, r3, #3
 8012cce:	440b      	add	r3, r1
 8012cd0:	3314      	adds	r3, #20
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	d16d      	bne.n	8012db4 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012ce0:	e01a      	b.n	8012d18 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012ce2:	69fb      	ldr	r3, [r7, #28]
 8012ce4:	895a      	ldrh	r2, [r3, #10]
 8012ce6:	69fb      	ldr	r3, [r7, #28]
 8012ce8:	891b      	ldrh	r3, [r3, #8]
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d10a      	bne.n	8012d04 <etharp_query+0x1b8>
 8012cee:	69fb      	ldr	r3, [r7, #28]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d006      	beq.n	8012d04 <etharp_query+0x1b8>
 8012cf6:	4b33      	ldr	r3, [pc, #204]	; (8012dc4 <etharp_query+0x278>)
 8012cf8:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8012cfc:	4936      	ldr	r1, [pc, #216]	; (8012dd8 <etharp_query+0x28c>)
 8012cfe:	4833      	ldr	r0, [pc, #204]	; (8012dcc <etharp_query+0x280>)
 8012d00:	f001 feaa 	bl	8014a58 <iprintf>
      if (p->type != PBUF_ROM) {
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	7b1b      	ldrb	r3, [r3, #12]
 8012d08:	2b01      	cmp	r3, #1
 8012d0a:	d002      	beq.n	8012d12 <etharp_query+0x1c6>
        copy_needed = 1;
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	61bb      	str	r3, [r7, #24]
        break;
 8012d10:	e005      	b.n	8012d1e <etharp_query+0x1d2>
      }
      p = p->next;
 8012d12:	69fb      	ldr	r3, [r7, #28]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012d18:	69fb      	ldr	r3, [r7, #28]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d1e1      	bne.n	8012ce2 <etharp_query+0x196>
    }
    if (copy_needed) {
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d017      	beq.n	8012d54 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8012d24:	69fb      	ldr	r3, [r7, #28]
 8012d26:	891b      	ldrh	r3, [r3, #8]
 8012d28:	2200      	movs	r2, #0
 8012d2a:	4619      	mov	r1, r3
 8012d2c:	2002      	movs	r0, #2
 8012d2e:	f7f8 fe3d 	bl	800b9ac <pbuf_alloc>
 8012d32:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d011      	beq.n	8012d5e <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 8012d3a:	6879      	ldr	r1, [r7, #4]
 8012d3c:	69f8      	ldr	r0, [r7, #28]
 8012d3e:	f7f9 fadb 	bl	800c2f8 <pbuf_copy>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d00a      	beq.n	8012d5e <etharp_query+0x212>
          pbuf_free(p);
 8012d48:	69f8      	ldr	r0, [r7, #28]
 8012d4a:	f7f9 f9a7 	bl	800c09c <pbuf_free>
          p = NULL;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	61fb      	str	r3, [r7, #28]
 8012d52:	e004      	b.n	8012d5e <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012d58:	69f8      	ldr	r0, [r7, #28]
 8012d5a:	f7f9 fa4f 	bl	800c1fc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d024      	beq.n	8012dae <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012d64:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012d68:	4915      	ldr	r1, [pc, #84]	; (8012dc0 <etharp_query+0x274>)
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	005b      	lsls	r3, r3, #1
 8012d6e:	4413      	add	r3, r2
 8012d70:	00db      	lsls	r3, r3, #3
 8012d72:	440b      	add	r3, r1
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d00b      	beq.n	8012d92 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8012d7a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012d7e:	4910      	ldr	r1, [pc, #64]	; (8012dc0 <etharp_query+0x274>)
 8012d80:	4613      	mov	r3, r2
 8012d82:	005b      	lsls	r3, r3, #1
 8012d84:	4413      	add	r3, r2
 8012d86:	00db      	lsls	r3, r3, #3
 8012d88:	440b      	add	r3, r1
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7f9 f985 	bl	800c09c <pbuf_free>
      }
      arp_table[i].q = p;
 8012d92:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012d96:	490a      	ldr	r1, [pc, #40]	; (8012dc0 <etharp_query+0x274>)
 8012d98:	4613      	mov	r3, r2
 8012d9a:	005b      	lsls	r3, r3, #1
 8012d9c:	4413      	add	r3, r2
 8012d9e:	00db      	lsls	r3, r3, #3
 8012da0:	440b      	add	r3, r1
 8012da2:	69fa      	ldr	r2, [r7, #28]
 8012da4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012da6:	2300      	movs	r3, #0
 8012da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012dac:	e002      	b.n	8012db4 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012dae:	23ff      	movs	r3, #255	; 0xff
 8012db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012db4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3728      	adds	r7, #40	; 0x28
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}
 8012dc0:	2000ba74 	.word	0x2000ba74
 8012dc4:	080177c0 	.word	0x080177c0
 8012dc8:	0801796c 	.word	0x0801796c
 8012dcc:	08017838 	.word	0x08017838
 8012dd0:	08017960 	.word	0x08017960
 8012dd4:	2000bb64 	.word	0x2000bb64
 8012dd8:	08017994 	.word	0x08017994

08012ddc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b08a      	sub	sp, #40	; 0x28
 8012de0:	af02      	add	r7, sp, #8
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	60b9      	str	r1, [r7, #8]
 8012de6:	607a      	str	r2, [r7, #4]
 8012de8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012dea:	2300      	movs	r3, #0
 8012dec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d106      	bne.n	8012e02 <etharp_raw+0x26>
 8012df4:	4b3a      	ldr	r3, [pc, #232]	; (8012ee0 <etharp_raw+0x104>)
 8012df6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8012dfa:	493a      	ldr	r1, [pc, #232]	; (8012ee4 <etharp_raw+0x108>)
 8012dfc:	483a      	ldr	r0, [pc, #232]	; (8012ee8 <etharp_raw+0x10c>)
 8012dfe:	f001 fe2b 	bl	8014a58 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012e02:	2200      	movs	r2, #0
 8012e04:	211c      	movs	r1, #28
 8012e06:	2002      	movs	r0, #2
 8012e08:	f7f8 fdd0 	bl	800b9ac <pbuf_alloc>
 8012e0c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012e0e:	69bb      	ldr	r3, [r7, #24]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d102      	bne.n	8012e1a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012e14:	f04f 33ff 	mov.w	r3, #4294967295
 8012e18:	e05d      	b.n	8012ed6 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	895b      	ldrh	r3, [r3, #10]
 8012e1e:	2b1b      	cmp	r3, #27
 8012e20:	d806      	bhi.n	8012e30 <etharp_raw+0x54>
 8012e22:	4b2f      	ldr	r3, [pc, #188]	; (8012ee0 <etharp_raw+0x104>)
 8012e24:	f240 4263 	movw	r2, #1123	; 0x463
 8012e28:	4930      	ldr	r1, [pc, #192]	; (8012eec <etharp_raw+0x110>)
 8012e2a:	482f      	ldr	r0, [pc, #188]	; (8012ee8 <etharp_raw+0x10c>)
 8012e2c:	f001 fe14 	bl	8014a58 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012e30:	69bb      	ldr	r3, [r7, #24]
 8012e32:	685b      	ldr	r3, [r3, #4]
 8012e34:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012e36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7f7 ff59 	bl	800acf0 <lwip_htons>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	461a      	mov	r2, r3
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e4c:	2b06      	cmp	r3, #6
 8012e4e:	d006      	beq.n	8012e5e <etharp_raw+0x82>
 8012e50:	4b23      	ldr	r3, [pc, #140]	; (8012ee0 <etharp_raw+0x104>)
 8012e52:	f240 426a 	movw	r2, #1130	; 0x46a
 8012e56:	4926      	ldr	r1, [pc, #152]	; (8012ef0 <etharp_raw+0x114>)
 8012e58:	4823      	ldr	r0, [pc, #140]	; (8012ee8 <etharp_raw+0x10c>)
 8012e5a:	f001 fdfd 	bl	8014a58 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	3308      	adds	r3, #8
 8012e62:	2206      	movs	r2, #6
 8012e64:	6839      	ldr	r1, [r7, #0]
 8012e66:	4618      	mov	r0, r3
 8012e68:	f001 ff27 	bl	8014cba <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	3312      	adds	r3, #18
 8012e70:	2206      	movs	r2, #6
 8012e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e74:	4618      	mov	r0, r3
 8012e76:	f001 ff20 	bl	8014cba <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	330e      	adds	r3, #14
 8012e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e80:	6812      	ldr	r2, [r2, #0]
 8012e82:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	3318      	adds	r3, #24
 8012e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e8a:	6812      	ldr	r2, [r2, #0]
 8012e8c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	2200      	movs	r2, #0
 8012e92:	701a      	strb	r2, [r3, #0]
 8012e94:	2200      	movs	r2, #0
 8012e96:	f042 0201 	orr.w	r2, r2, #1
 8012e9a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	f042 0208 	orr.w	r2, r2, #8
 8012ea4:	709a      	strb	r2, [r3, #2]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	2206      	movs	r2, #6
 8012eae:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	2204      	movs	r2, #4
 8012eb4:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012eb6:	f640 0306 	movw	r3, #2054	; 0x806
 8012eba:	9300      	str	r3, [sp, #0]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	68ba      	ldr	r2, [r7, #8]
 8012ec0:	69b9      	ldr	r1, [r7, #24]
 8012ec2:	68f8      	ldr	r0, [r7, #12]
 8012ec4:	f001 faf6 	bl	80144b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012ec8:	69b8      	ldr	r0, [r7, #24]
 8012eca:	f7f9 f8e7 	bl	800c09c <pbuf_free>
  p = NULL;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012ed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3720      	adds	r7, #32
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	080177c0 	.word	0x080177c0
 8012ee4:	08017910 	.word	0x08017910
 8012ee8:	08017838 	.word	0x08017838
 8012eec:	080179b0 	.word	0x080179b0
 8012ef0:	080179e4 	.word	0x080179e4

08012ef4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b088      	sub	sp, #32
 8012ef8:	af04      	add	r7, sp, #16
 8012efa:	60f8      	str	r0, [r7, #12]
 8012efc:	60b9      	str	r1, [r7, #8]
 8012efe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012f10:	2201      	movs	r2, #1
 8012f12:	9203      	str	r2, [sp, #12]
 8012f14:	68ba      	ldr	r2, [r7, #8]
 8012f16:	9202      	str	r2, [sp, #8]
 8012f18:	4a06      	ldr	r2, [pc, #24]	; (8012f34 <etharp_request_dst+0x40>)
 8012f1a:	9201      	str	r2, [sp, #4]
 8012f1c:	9300      	str	r3, [sp, #0]
 8012f1e:	4603      	mov	r3, r0
 8012f20:	687a      	ldr	r2, [r7, #4]
 8012f22:	68f8      	ldr	r0, [r7, #12]
 8012f24:	f7ff ff5a 	bl	8012ddc <etharp_raw>
 8012f28:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3710      	adds	r7, #16
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop
 8012f34:	08017f94 	.word	0x08017f94

08012f38 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
 8012f40:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012f42:	4a05      	ldr	r2, [pc, #20]	; (8012f58 <etharp_request+0x20>)
 8012f44:	6839      	ldr	r1, [r7, #0]
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f7ff ffd4 	bl	8012ef4 <etharp_request_dst>
 8012f4c:	4603      	mov	r3, r0
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3708      	adds	r7, #8
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	bf00      	nop
 8012f58:	08017f8c 	.word	0x08017f8c

08012f5c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b08e      	sub	sp, #56	; 0x38
 8012f60:	af04      	add	r7, sp, #16
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012f66:	4b7a      	ldr	r3, [pc, #488]	; (8013150 <icmp_input+0x1f4>)
 8012f68:	689b      	ldr	r3, [r3, #8]
 8012f6a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8012f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	b29b      	uxth	r3, r3
 8012f72:	f003 030f 	and.w	r3, r3, #15
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	009b      	lsls	r3, r3, #2
 8012f7a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f7e:	2b13      	cmp	r3, #19
 8012f80:	f240 80d1 	bls.w	8013126 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	895b      	ldrh	r3, [r3, #10]
 8012f88:	2b03      	cmp	r3, #3
 8012f8a:	f240 80ce 	bls.w	801312a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012f98:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	f000 80bb 	beq.w	8013118 <icmp_input+0x1bc>
 8012fa2:	2b08      	cmp	r3, #8
 8012fa4:	f040 80bb 	bne.w	801311e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8012fa8:	4b6a      	ldr	r3, [pc, #424]	; (8013154 <icmp_input+0x1f8>)
 8012faa:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012fac:	4b68      	ldr	r3, [pc, #416]	; (8013150 <icmp_input+0x1f4>)
 8012fae:	695b      	ldr	r3, [r3, #20]
 8012fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012fb4:	2be0      	cmp	r3, #224	; 0xe0
 8012fb6:	f000 80bf 	beq.w	8013138 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012fba:	4b65      	ldr	r3, [pc, #404]	; (8013150 <icmp_input+0x1f4>)
 8012fbc:	695b      	ldr	r3, [r3, #20]
 8012fbe:	4a64      	ldr	r2, [pc, #400]	; (8013150 <icmp_input+0x1f4>)
 8012fc0:	6812      	ldr	r2, [r2, #0]
 8012fc2:	4611      	mov	r1, r2
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f000 fbd3 	bl	8013770 <ip4_addr_isbroadcast_u32>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	f040 80b5 	bne.w	801313c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	891b      	ldrh	r3, [r3, #8]
 8012fd6:	2b07      	cmp	r3, #7
 8012fd8:	f240 80a9 	bls.w	801312e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8012fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fde:	330e      	adds	r3, #14
 8012fe0:	b29b      	uxth	r3, r3
 8012fe2:	b21b      	sxth	r3, r3
 8012fe4:	4619      	mov	r1, r3
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f7f9 f834 	bl	800c054 <pbuf_header>
 8012fec:	4603      	mov	r3, r0
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d046      	beq.n	8013080 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	891a      	ldrh	r2, [r3, #8]
 8012ff6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ff8:	4413      	add	r3, r2
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	4619      	mov	r1, r3
 8013000:	2002      	movs	r0, #2
 8013002:	f7f8 fcd3 	bl	800b9ac <pbuf_alloc>
 8013006:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	2b00      	cmp	r3, #0
 801300c:	f000 8098 	beq.w	8013140 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013010:	69bb      	ldr	r3, [r7, #24]
 8013012:	895b      	ldrh	r3, [r3, #10]
 8013014:	461a      	mov	r2, r3
 8013016:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013018:	3308      	adds	r3, #8
 801301a:	429a      	cmp	r2, r3
 801301c:	d203      	bcs.n	8013026 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801301e:	69b8      	ldr	r0, [r7, #24]
 8013020:	f7f9 f83c 	bl	800c09c <pbuf_free>
        goto icmperr;
 8013024:	e08d      	b.n	8013142 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8013026:	69bb      	ldr	r3, [r7, #24]
 8013028:	685b      	ldr	r3, [r3, #4]
 801302a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801302c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801302e:	4618      	mov	r0, r3
 8013030:	f001 fe43 	bl	8014cba <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8013034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013036:	425b      	negs	r3, r3
 8013038:	b29b      	uxth	r3, r3
 801303a:	b21b      	sxth	r3, r3
 801303c:	4619      	mov	r1, r3
 801303e:	69b8      	ldr	r0, [r7, #24]
 8013040:	f7f9 f808 	bl	800c054 <pbuf_header>
 8013044:	4603      	mov	r3, r0
 8013046:	2b00      	cmp	r3, #0
 8013048:	d009      	beq.n	801305e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801304a:	4b43      	ldr	r3, [pc, #268]	; (8013158 <icmp_input+0x1fc>)
 801304c:	22af      	movs	r2, #175	; 0xaf
 801304e:	4943      	ldr	r1, [pc, #268]	; (801315c <icmp_input+0x200>)
 8013050:	4843      	ldr	r0, [pc, #268]	; (8013160 <icmp_input+0x204>)
 8013052:	f001 fd01 	bl	8014a58 <iprintf>
        pbuf_free(r);
 8013056:	69b8      	ldr	r0, [r7, #24]
 8013058:	f7f9 f820 	bl	800c09c <pbuf_free>
        goto icmperr;
 801305c:	e071      	b.n	8013142 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801305e:	6879      	ldr	r1, [r7, #4]
 8013060:	69b8      	ldr	r0, [r7, #24]
 8013062:	f7f9 f949 	bl	800c2f8 <pbuf_copy>
 8013066:	4603      	mov	r3, r0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d003      	beq.n	8013074 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801306c:	69b8      	ldr	r0, [r7, #24]
 801306e:	f7f9 f815 	bl	800c09c <pbuf_free>
        goto icmperr;
 8013072:	e066      	b.n	8013142 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f7f9 f811 	bl	800c09c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801307a:	69bb      	ldr	r3, [r7, #24]
 801307c:	607b      	str	r3, [r7, #4]
 801307e:	e015      	b.n	80130ac <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8013080:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013082:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8013086:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801308a:	33f2      	adds	r3, #242	; 0xf2
 801308c:	b29b      	uxth	r3, r3
 801308e:	b21b      	sxth	r3, r3
 8013090:	4619      	mov	r1, r3
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f7f8 ffde 	bl	800c054 <pbuf_header>
 8013098:	4603      	mov	r3, r0
 801309a:	2b00      	cmp	r3, #0
 801309c:	d006      	beq.n	80130ac <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801309e:	4b2e      	ldr	r3, [pc, #184]	; (8013158 <icmp_input+0x1fc>)
 80130a0:	22c0      	movs	r2, #192	; 0xc0
 80130a2:	4930      	ldr	r1, [pc, #192]	; (8013164 <icmp_input+0x208>)
 80130a4:	482e      	ldr	r0, [pc, #184]	; (8013160 <icmp_input+0x204>)
 80130a6:	f001 fcd7 	bl	8014a58 <iprintf>
        goto icmperr;
 80130aa:	e04a      	b.n	8013142 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80130b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80130b6:	4619      	mov	r1, r3
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f7f8 ffcb 	bl	800c054 <pbuf_header>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d12b      	bne.n	801311c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	685b      	ldr	r3, [r3, #4]
 80130c8:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	681a      	ldr	r2, [r3, #0]
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80130d2:	4b1f      	ldr	r3, [pc, #124]	; (8013150 <icmp_input+0x1f4>)
 80130d4:	691a      	ldr	r2, [r3, #16]
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	2200      	movs	r2, #0
 80130de:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	2200      	movs	r2, #0
 80130e4:	709a      	strb	r2, [r3, #2]
 80130e6:	2200      	movs	r2, #0
 80130e8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	22ff      	movs	r2, #255	; 0xff
 80130ee:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80130f0:	693b      	ldr	r3, [r7, #16]
 80130f2:	2200      	movs	r2, #0
 80130f4:	729a      	strb	r2, [r3, #10]
 80130f6:	2200      	movs	r2, #0
 80130f8:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	9302      	str	r3, [sp, #8]
 80130fe:	2301      	movs	r3, #1
 8013100:	9301      	str	r3, [sp, #4]
 8013102:	2300      	movs	r3, #0
 8013104:	9300      	str	r3, [sp, #0]
 8013106:	23ff      	movs	r3, #255	; 0xff
 8013108:	2200      	movs	r2, #0
 801310a:	69f9      	ldr	r1, [r7, #28]
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f000 fa5d 	bl	80135cc <ip4_output_if>
 8013112:	4603      	mov	r3, r0
 8013114:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8013116:	e001      	b.n	801311c <icmp_input+0x1c0>
    break;
 8013118:	bf00      	nop
 801311a:	e000      	b.n	801311e <icmp_input+0x1c2>
    break;
 801311c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f7f8 ffbc 	bl	800c09c <pbuf_free>
  return;
 8013124:	e011      	b.n	801314a <icmp_input+0x1ee>
    goto lenerr;
 8013126:	bf00      	nop
 8013128:	e002      	b.n	8013130 <icmp_input+0x1d4>
    goto lenerr;
 801312a:	bf00      	nop
 801312c:	e000      	b.n	8013130 <icmp_input+0x1d4>
      goto lenerr;
 801312e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f7f8 ffb3 	bl	800c09c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013136:	e008      	b.n	801314a <icmp_input+0x1ee>
      goto icmperr;
 8013138:	bf00      	nop
 801313a:	e002      	b.n	8013142 <icmp_input+0x1e6>
      goto icmperr;
 801313c:	bf00      	nop
 801313e:	e000      	b.n	8013142 <icmp_input+0x1e6>
        goto icmperr;
 8013140:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f7f8 ffaa 	bl	800c09c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013148:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801314a:	3728      	adds	r7, #40	; 0x28
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}
 8013150:	200082c4 	.word	0x200082c4
 8013154:	200082d8 	.word	0x200082d8
 8013158:	08017a28 	.word	0x08017a28
 801315c:	08017a60 	.word	0x08017a60
 8013160:	08017a98 	.word	0x08017a98
 8013164:	08017ac0 	.word	0x08017ac0

08013168 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b082      	sub	sp, #8
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	460b      	mov	r3, r1
 8013172:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013174:	78fb      	ldrb	r3, [r7, #3]
 8013176:	461a      	mov	r2, r3
 8013178:	2103      	movs	r1, #3
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f000 f814 	bl	80131a8 <icmp_send_response>
}
 8013180:	bf00      	nop
 8013182:	3708      	adds	r7, #8
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}

08013188 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b082      	sub	sp, #8
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	460b      	mov	r3, r1
 8013192:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013194:	78fb      	ldrb	r3, [r7, #3]
 8013196:	461a      	mov	r2, r3
 8013198:	210b      	movs	r1, #11
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f000 f804 	bl	80131a8 <icmp_send_response>
}
 80131a0:	bf00      	nop
 80131a2:	3708      	adds	r7, #8
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}

080131a8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b08c      	sub	sp, #48	; 0x30
 80131ac:	af04      	add	r7, sp, #16
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	460b      	mov	r3, r1
 80131b2:	70fb      	strb	r3, [r7, #3]
 80131b4:	4613      	mov	r3, r2
 80131b6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80131b8:	2200      	movs	r2, #0
 80131ba:	2124      	movs	r1, #36	; 0x24
 80131bc:	2001      	movs	r0, #1
 80131be:	f7f8 fbf5 	bl	800b9ac <pbuf_alloc>
 80131c2:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80131c4:	69fb      	ldr	r3, [r7, #28]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d04c      	beq.n	8013264 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80131ca:	69fb      	ldr	r3, [r7, #28]
 80131cc:	895b      	ldrh	r3, [r3, #10]
 80131ce:	2b23      	cmp	r3, #35	; 0x23
 80131d0:	d806      	bhi.n	80131e0 <icmp_send_response+0x38>
 80131d2:	4b26      	ldr	r3, [pc, #152]	; (801326c <icmp_send_response+0xc4>)
 80131d4:	f240 1261 	movw	r2, #353	; 0x161
 80131d8:	4925      	ldr	r1, [pc, #148]	; (8013270 <icmp_send_response+0xc8>)
 80131da:	4826      	ldr	r0, [pc, #152]	; (8013274 <icmp_send_response+0xcc>)
 80131dc:	f001 fc3c 	bl	8014a58 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	685b      	ldr	r3, [r3, #4]
 80131e4:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	78fa      	ldrb	r2, [r7, #3]
 80131f0:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	78ba      	ldrb	r2, [r7, #2]
 80131f6:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	2200      	movs	r2, #0
 80131fc:	711a      	strb	r2, [r3, #4]
 80131fe:	2200      	movs	r2, #0
 8013200:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	2200      	movs	r2, #0
 8013206:	719a      	strb	r2, [r3, #6]
 8013208:	2200      	movs	r2, #0
 801320a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	f103 0008 	add.w	r0, r3, #8
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	221c      	movs	r2, #28
 801321a:	4619      	mov	r1, r3
 801321c:	f001 fd4d 	bl	8014cba <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013220:	69bb      	ldr	r3, [r7, #24]
 8013222:	68db      	ldr	r3, [r3, #12]
 8013224:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013226:	f107 030c 	add.w	r3, r7, #12
 801322a:	4618      	mov	r0, r3
 801322c:	f000 f824 	bl	8013278 <ip4_route>
 8013230:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013232:	693b      	ldr	r3, [r7, #16]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d011      	beq.n	801325c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	2200      	movs	r2, #0
 801323c:	709a      	strb	r2, [r3, #2]
 801323e:	2200      	movs	r2, #0
 8013240:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013242:	f107 020c 	add.w	r2, r7, #12
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	9302      	str	r3, [sp, #8]
 801324a:	2301      	movs	r3, #1
 801324c:	9301      	str	r3, [sp, #4]
 801324e:	2300      	movs	r3, #0
 8013250:	9300      	str	r3, [sp, #0]
 8013252:	23ff      	movs	r3, #255	; 0xff
 8013254:	2100      	movs	r1, #0
 8013256:	69f8      	ldr	r0, [r7, #28]
 8013258:	f000 f9b8 	bl	80135cc <ip4_output_if>
  }
  pbuf_free(q);
 801325c:	69f8      	ldr	r0, [r7, #28]
 801325e:	f7f8 ff1d 	bl	800c09c <pbuf_free>
 8013262:	e000      	b.n	8013266 <icmp_send_response+0xbe>
    return;
 8013264:	bf00      	nop
}
 8013266:	3720      	adds	r7, #32
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}
 801326c:	08017a28 	.word	0x08017a28
 8013270:	08017af4 	.word	0x08017af4
 8013274:	08017a98 	.word	0x08017a98

08013278 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013278:	b480      	push	{r7}
 801327a:	b085      	sub	sp, #20
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8013280:	4b30      	ldr	r3, [pc, #192]	; (8013344 <ip4_route+0xcc>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	60fb      	str	r3, [r7, #12]
 8013286:	e036      	b.n	80132f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801328e:	f003 0301 	and.w	r3, r3, #1
 8013292:	b2db      	uxtb	r3, r3
 8013294:	2b00      	cmp	r3, #0
 8013296:	d02b      	beq.n	80132f0 <ip4_route+0x78>
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801329e:	089b      	lsrs	r3, r3, #2
 80132a0:	f003 0301 	and.w	r3, r3, #1
 80132a4:	b2db      	uxtb	r3, r3
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d022      	beq.n	80132f0 <ip4_route+0x78>
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	3304      	adds	r3, #4
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d01d      	beq.n	80132f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681a      	ldr	r2, [r3, #0]
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	3304      	adds	r3, #4
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	405a      	eors	r2, r3
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	3308      	adds	r3, #8
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	4013      	ands	r3, r2
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d101      	bne.n	80132d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	e033      	b.n	8013338 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80132d6:	f003 0302 	and.w	r3, r3, #2
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d108      	bne.n	80132f0 <ip4_route+0x78>
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681a      	ldr	r2, [r3, #0]
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	330c      	adds	r3, #12
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d101      	bne.n	80132f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	e023      	b.n	8013338 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	60fb      	str	r3, [r7, #12]
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d1c5      	bne.n	8013288 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80132fc:	4b12      	ldr	r3, [pc, #72]	; (8013348 <ip4_route+0xd0>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d015      	beq.n	8013330 <ip4_route+0xb8>
 8013304:	4b10      	ldr	r3, [pc, #64]	; (8013348 <ip4_route+0xd0>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801330c:	f003 0301 	and.w	r3, r3, #1
 8013310:	2b00      	cmp	r3, #0
 8013312:	d00d      	beq.n	8013330 <ip4_route+0xb8>
 8013314:	4b0c      	ldr	r3, [pc, #48]	; (8013348 <ip4_route+0xd0>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801331c:	f003 0304 	and.w	r3, r3, #4
 8013320:	2b00      	cmp	r3, #0
 8013322:	d005      	beq.n	8013330 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8013324:	4b08      	ldr	r3, [pc, #32]	; (8013348 <ip4_route+0xd0>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	3304      	adds	r3, #4
 801332a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801332c:	2b00      	cmp	r3, #0
 801332e:	d101      	bne.n	8013334 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013330:	2300      	movs	r3, #0
 8013332:	e001      	b.n	8013338 <ip4_route+0xc0>
  }

  return netif_default;
 8013334:	4b04      	ldr	r3, [pc, #16]	; (8013348 <ip4_route+0xd0>)
 8013336:	681b      	ldr	r3, [r3, #0]
}
 8013338:	4618      	mov	r0, r3
 801333a:	3714      	adds	r7, #20
 801333c:	46bd      	mov	sp, r7
 801333e:	bc80      	pop	{r7}
 8013340:	4770      	bx	lr
 8013342:	bf00      	nop
 8013344:	2000ba08 	.word	0x2000ba08
 8013348:	2000ba0c 	.word	0x2000ba0c

0801334c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b086      	sub	sp, #24
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	091b      	lsrs	r3, r3, #4
 8013362:	b2db      	uxtb	r3, r3
 8013364:	2b04      	cmp	r3, #4
 8013366:	d004      	beq.n	8013372 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f7f8 fe97 	bl	800c09c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801336e:	2300      	movs	r3, #0
 8013370:	e124      	b.n	80135bc <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	b29b      	uxth	r3, r3
 8013378:	f003 030f 	and.w	r3, r3, #15
 801337c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801337e:	897b      	ldrh	r3, [r7, #10]
 8013380:	009b      	lsls	r3, r3, #2
 8013382:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	885b      	ldrh	r3, [r3, #2]
 8013388:	b29b      	uxth	r3, r3
 801338a:	4618      	mov	r0, r3
 801338c:	f7f7 fcb0 	bl	800acf0 <lwip_htons>
 8013390:	4603      	mov	r3, r0
 8013392:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	891b      	ldrh	r3, [r3, #8]
 8013398:	893a      	ldrh	r2, [r7, #8]
 801339a:	429a      	cmp	r2, r3
 801339c:	d204      	bcs.n	80133a8 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 801339e:	893b      	ldrh	r3, [r7, #8]
 80133a0:	4619      	mov	r1, r3
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f7f8 fd06 	bl	800bdb4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	895b      	ldrh	r3, [r3, #10]
 80133ac:	897a      	ldrh	r2, [r7, #10]
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d807      	bhi.n	80133c2 <ip4_input+0x76>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	891b      	ldrh	r3, [r3, #8]
 80133b6:	893a      	ldrh	r2, [r7, #8]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d802      	bhi.n	80133c2 <ip4_input+0x76>
 80133bc:	897b      	ldrh	r3, [r7, #10]
 80133be:	2b13      	cmp	r3, #19
 80133c0:	d804      	bhi.n	80133cc <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	f7f8 fe6a 	bl	800c09c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80133c8:	2300      	movs	r3, #0
 80133ca:	e0f7      	b.n	80135bc <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	691b      	ldr	r3, [r3, #16]
 80133d0:	4a7c      	ldr	r2, [pc, #496]	; (80135c4 <ip4_input+0x278>)
 80133d2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	68db      	ldr	r3, [r3, #12]
 80133d8:	4a7a      	ldr	r2, [pc, #488]	; (80135c4 <ip4_input+0x278>)
 80133da:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80133dc:	4b79      	ldr	r3, [pc, #484]	; (80135c4 <ip4_input+0x278>)
 80133de:	695b      	ldr	r3, [r3, #20]
 80133e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80133e4:	2be0      	cmp	r3, #224	; 0xe0
 80133e6:	d112      	bne.n	801340e <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80133ee:	f003 0301 	and.w	r3, r3, #1
 80133f2:	b2db      	uxtb	r3, r3
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d007      	beq.n	8013408 <ip4_input+0xbc>
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	3304      	adds	r3, #4
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d002      	beq.n	8013408 <ip4_input+0xbc>
      netif = inp;
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	613b      	str	r3, [r7, #16]
 8013406:	e041      	b.n	801348c <ip4_input+0x140>
    } else {
      netif = NULL;
 8013408:	2300      	movs	r3, #0
 801340a:	613b      	str	r3, [r7, #16]
 801340c:	e03e      	b.n	801348c <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801340e:	2301      	movs	r3, #1
 8013410:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801341c:	f003 0301 	and.w	r3, r3, #1
 8013420:	b2db      	uxtb	r3, r3
 8013422:	2b00      	cmp	r3, #0
 8013424:	d014      	beq.n	8013450 <ip4_input+0x104>
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	3304      	adds	r3, #4
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d00f      	beq.n	8013450 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013430:	4b64      	ldr	r3, [pc, #400]	; (80135c4 <ip4_input+0x278>)
 8013432:	695a      	ldr	r2, [r3, #20]
 8013434:	693b      	ldr	r3, [r7, #16]
 8013436:	3304      	adds	r3, #4
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	429a      	cmp	r2, r3
 801343c:	d026      	beq.n	801348c <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801343e:	4b61      	ldr	r3, [pc, #388]	; (80135c4 <ip4_input+0x278>)
 8013440:	695b      	ldr	r3, [r3, #20]
 8013442:	6939      	ldr	r1, [r7, #16]
 8013444:	4618      	mov	r0, r3
 8013446:	f000 f993 	bl	8013770 <ip4_addr_isbroadcast_u32>
 801344a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801344c:	2b00      	cmp	r3, #0
 801344e:	d11d      	bne.n	801348c <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d00d      	beq.n	8013472 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8013456:	4b5b      	ldr	r3, [pc, #364]	; (80135c4 <ip4_input+0x278>)
 8013458:	695b      	ldr	r3, [r3, #20]
 801345a:	b2db      	uxtb	r3, r3
 801345c:	2b7f      	cmp	r3, #127	; 0x7f
 801345e:	d102      	bne.n	8013466 <ip4_input+0x11a>
          netif = NULL;
 8013460:	2300      	movs	r3, #0
 8013462:	613b      	str	r3, [r7, #16]
          break;
 8013464:	e012      	b.n	801348c <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8013466:	2300      	movs	r3, #0
 8013468:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 801346a:	4b57      	ldr	r3, [pc, #348]	; (80135c8 <ip4_input+0x27c>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	613b      	str	r3, [r7, #16]
 8013470:	e002      	b.n	8013478 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8013478:	693a      	ldr	r2, [r7, #16]
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	429a      	cmp	r2, r3
 801347e:	d102      	bne.n	8013486 <ip4_input+0x13a>
        netif = netif->next;
 8013480:	693b      	ldr	r3, [r7, #16]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d1c4      	bne.n	8013416 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801348c:	4b4d      	ldr	r3, [pc, #308]	; (80135c4 <ip4_input+0x278>)
 801348e:	691b      	ldr	r3, [r3, #16]
 8013490:	6839      	ldr	r1, [r7, #0]
 8013492:	4618      	mov	r0, r3
 8013494:	f000 f96c 	bl	8013770 <ip4_addr_isbroadcast_u32>
 8013498:	4603      	mov	r3, r0
 801349a:	2b00      	cmp	r3, #0
 801349c:	d105      	bne.n	80134aa <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801349e:	4b49      	ldr	r3, [pc, #292]	; (80135c4 <ip4_input+0x278>)
 80134a0:	691b      	ldr	r3, [r3, #16]
 80134a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80134a6:	2be0      	cmp	r3, #224	; 0xe0
 80134a8:	d104      	bne.n	80134b4 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f7f8 fdf6 	bl	800c09c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80134b0:	2300      	movs	r3, #0
 80134b2:	e083      	b.n	80135bc <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d104      	bne.n	80134c4 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f7f8 fdee 	bl	800c09c <pbuf_free>
    return ERR_OK;
 80134c0:	2300      	movs	r3, #0
 80134c2:	e07b      	b.n	80135bc <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	88db      	ldrh	r3, [r3, #6]
 80134c8:	b29b      	uxth	r3, r3
 80134ca:	461a      	mov	r2, r3
 80134cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80134d0:	4013      	ands	r3, r2
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d00b      	beq.n	80134ee <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f000 fc8e 	bl	8013df8 <ip4_reass>
 80134dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d101      	bne.n	80134e8 <ip4_input+0x19c>
      return ERR_OK;
 80134e4:	2300      	movs	r3, #0
 80134e6:	e069      	b.n	80135bc <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80134ee:	4a35      	ldr	r2, [pc, #212]	; (80135c4 <ip4_input+0x278>)
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80134f4:	4a33      	ldr	r2, [pc, #204]	; (80135c4 <ip4_input+0x278>)
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80134fa:	4a32      	ldr	r2, [pc, #200]	; (80135c4 <ip4_input+0x278>)
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8013500:	697b      	ldr	r3, [r7, #20]
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	b29b      	uxth	r3, r3
 8013506:	f003 030f 	and.w	r3, r3, #15
 801350a:	b29b      	uxth	r3, r3
 801350c:	009b      	lsls	r3, r3, #2
 801350e:	b29a      	uxth	r2, r3
 8013510:	4b2c      	ldr	r3, [pc, #176]	; (80135c4 <ip4_input+0x278>)
 8013512:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8013514:	897b      	ldrh	r3, [r7, #10]
 8013516:	425b      	negs	r3, r3
 8013518:	b29b      	uxth	r3, r3
 801351a:	b21b      	sxth	r3, r3
 801351c:	4619      	mov	r1, r3
 801351e:	6878      	ldr	r0, [r7, #4]
 8013520:	f7f8 fd98 	bl	800c054 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	7a5b      	ldrb	r3, [r3, #9]
 8013528:	2b11      	cmp	r3, #17
 801352a:	d006      	beq.n	801353a <ip4_input+0x1ee>
 801352c:	2b11      	cmp	r3, #17
 801352e:	dc13      	bgt.n	8013558 <ip4_input+0x20c>
 8013530:	2b01      	cmp	r3, #1
 8013532:	d00c      	beq.n	801354e <ip4_input+0x202>
 8013534:	2b06      	cmp	r3, #6
 8013536:	d005      	beq.n	8013544 <ip4_input+0x1f8>
 8013538:	e00e      	b.n	8013558 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801353a:	6839      	ldr	r1, [r7, #0]
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f7fe fc3d 	bl	8011dbc <udp_input>
      break;
 8013542:	e028      	b.n	8013596 <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8013544:	6839      	ldr	r1, [r7, #0]
 8013546:	6878      	ldr	r0, [r7, #4]
 8013548:	f7fa fc72 	bl	800de30 <tcp_input>
      break;
 801354c:	e023      	b.n	8013596 <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801354e:	6839      	ldr	r1, [r7, #0]
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f7ff fd03 	bl	8012f5c <icmp_input>
      break;
 8013556:	e01e      	b.n	8013596 <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013558:	4b1a      	ldr	r3, [pc, #104]	; (80135c4 <ip4_input+0x278>)
 801355a:	695b      	ldr	r3, [r3, #20]
 801355c:	6939      	ldr	r1, [r7, #16]
 801355e:	4618      	mov	r0, r3
 8013560:	f000 f906 	bl	8013770 <ip4_addr_isbroadcast_u32>
 8013564:	4603      	mov	r3, r0
 8013566:	2b00      	cmp	r3, #0
 8013568:	d112      	bne.n	8013590 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801356a:	4b16      	ldr	r3, [pc, #88]	; (80135c4 <ip4_input+0x278>)
 801356c:	695b      	ldr	r3, [r3, #20]
 801356e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013572:	2be0      	cmp	r3, #224	; 0xe0
 8013574:	d00c      	beq.n	8013590 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8013576:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801357a:	4619      	mov	r1, r3
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f7f8 fd7b 	bl	800c078 <pbuf_header_force>
        p->payload = iphdr;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	697a      	ldr	r2, [r7, #20]
 8013586:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013588:	2102      	movs	r1, #2
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f7ff fdec 	bl	8013168 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f7f8 fd83 	bl	800c09c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013596:	4b0b      	ldr	r3, [pc, #44]	; (80135c4 <ip4_input+0x278>)
 8013598:	2200      	movs	r2, #0
 801359a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801359c:	4b09      	ldr	r3, [pc, #36]	; (80135c4 <ip4_input+0x278>)
 801359e:	2200      	movs	r2, #0
 80135a0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80135a2:	4b08      	ldr	r3, [pc, #32]	; (80135c4 <ip4_input+0x278>)
 80135a4:	2200      	movs	r2, #0
 80135a6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80135a8:	4b06      	ldr	r3, [pc, #24]	; (80135c4 <ip4_input+0x278>)
 80135aa:	2200      	movs	r2, #0
 80135ac:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80135ae:	4b05      	ldr	r3, [pc, #20]	; (80135c4 <ip4_input+0x278>)
 80135b0:	2200      	movs	r2, #0
 80135b2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80135b4:	4b03      	ldr	r3, [pc, #12]	; (80135c4 <ip4_input+0x278>)
 80135b6:	2200      	movs	r2, #0
 80135b8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80135ba:	2300      	movs	r3, #0
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3718      	adds	r7, #24
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}
 80135c4:	200082c4 	.word	0x200082c4
 80135c8:	2000ba08 	.word	0x2000ba08

080135cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b08a      	sub	sp, #40	; 0x28
 80135d0:	af04      	add	r7, sp, #16
 80135d2:	60f8      	str	r0, [r7, #12]
 80135d4:	60b9      	str	r1, [r7, #8]
 80135d6:	607a      	str	r2, [r7, #4]
 80135d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d009      	beq.n	80135f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d003      	beq.n	80135f2 <ip4_output_if+0x26>
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d102      	bne.n	80135f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80135f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f4:	3304      	adds	r3, #4
 80135f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80135f8:	78fa      	ldrb	r2, [r7, #3]
 80135fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135fc:	9302      	str	r3, [sp, #8]
 80135fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013602:	9301      	str	r3, [sp, #4]
 8013604:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013608:	9300      	str	r3, [sp, #0]
 801360a:	4613      	mov	r3, r2
 801360c:	687a      	ldr	r2, [r7, #4]
 801360e:	6979      	ldr	r1, [r7, #20]
 8013610:	68f8      	ldr	r0, [r7, #12]
 8013612:	f000 f805 	bl	8013620 <ip4_output_if_src>
 8013616:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013618:	4618      	mov	r0, r3
 801361a:	3718      	adds	r7, #24
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b088      	sub	sp, #32
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	607a      	str	r2, [r7, #4]
 801362c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	89db      	ldrh	r3, [r3, #14]
 8013632:	2b01      	cmp	r3, #1
 8013634:	d006      	beq.n	8013644 <ip4_output_if_src+0x24>
 8013636:	4b48      	ldr	r3, [pc, #288]	; (8013758 <ip4_output_if_src+0x138>)
 8013638:	f240 3233 	movw	r2, #819	; 0x333
 801363c:	4947      	ldr	r1, [pc, #284]	; (801375c <ip4_output_if_src+0x13c>)
 801363e:	4848      	ldr	r0, [pc, #288]	; (8013760 <ip4_output_if_src+0x140>)
 8013640:	f001 fa0a 	bl	8014a58 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d060      	beq.n	801370c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801364a:	2314      	movs	r3, #20
 801364c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801364e:	2114      	movs	r1, #20
 8013650:	68f8      	ldr	r0, [r7, #12]
 8013652:	f7f8 fcff 	bl	800c054 <pbuf_header>
 8013656:	4603      	mov	r3, r0
 8013658:	2b00      	cmp	r3, #0
 801365a:	d002      	beq.n	8013662 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801365c:	f06f 0301 	mvn.w	r3, #1
 8013660:	e075      	b.n	801374e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	895b      	ldrh	r3, [r3, #10]
 801366c:	2b13      	cmp	r3, #19
 801366e:	d806      	bhi.n	801367e <ip4_output_if_src+0x5e>
 8013670:	4b39      	ldr	r3, [pc, #228]	; (8013758 <ip4_output_if_src+0x138>)
 8013672:	f44f 7258 	mov.w	r2, #864	; 0x360
 8013676:	493b      	ldr	r1, [pc, #236]	; (8013764 <ip4_output_if_src+0x144>)
 8013678:	4839      	ldr	r0, [pc, #228]	; (8013760 <ip4_output_if_src+0x140>)
 801367a:	f001 f9ed 	bl	8014a58 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	78fa      	ldrb	r2, [r7, #3]
 8013682:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013684:	69fb      	ldr	r3, [r7, #28]
 8013686:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801368a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	681a      	ldr	r2, [r3, #0]
 8013690:	69fb      	ldr	r3, [r7, #28]
 8013692:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013694:	8b7b      	ldrh	r3, [r7, #26]
 8013696:	089b      	lsrs	r3, r3, #2
 8013698:	b29b      	uxth	r3, r3
 801369a:	b2db      	uxtb	r3, r3
 801369c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136a0:	b2da      	uxtb	r2, r3
 80136a2:	69fb      	ldr	r3, [r7, #28]
 80136a4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80136a6:	69fb      	ldr	r3, [r7, #28]
 80136a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80136ac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	891b      	ldrh	r3, [r3, #8]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7f7 fb1c 	bl	800acf0 <lwip_htons>
 80136b8:	4603      	mov	r3, r0
 80136ba:	461a      	mov	r2, r3
 80136bc:	69fb      	ldr	r3, [r7, #28]
 80136be:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	2200      	movs	r2, #0
 80136c4:	719a      	strb	r2, [r3, #6]
 80136c6:	2200      	movs	r2, #0
 80136c8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80136ca:	4b27      	ldr	r3, [pc, #156]	; (8013768 <ip4_output_if_src+0x148>)
 80136cc:	881b      	ldrh	r3, [r3, #0]
 80136ce:	4618      	mov	r0, r3
 80136d0:	f7f7 fb0e 	bl	800acf0 <lwip_htons>
 80136d4:	4603      	mov	r3, r0
 80136d6:	461a      	mov	r2, r3
 80136d8:	69fb      	ldr	r3, [r7, #28]
 80136da:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80136dc:	4b22      	ldr	r3, [pc, #136]	; (8013768 <ip4_output_if_src+0x148>)
 80136de:	881b      	ldrh	r3, [r3, #0]
 80136e0:	3301      	adds	r3, #1
 80136e2:	b29a      	uxth	r2, r3
 80136e4:	4b20      	ldr	r3, [pc, #128]	; (8013768 <ip4_output_if_src+0x148>)
 80136e6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d104      	bne.n	80136f8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80136ee:	4b1f      	ldr	r3, [pc, #124]	; (801376c <ip4_output_if_src+0x14c>)
 80136f0:	681a      	ldr	r2, [r3, #0]
 80136f2:	69fb      	ldr	r3, [r7, #28]
 80136f4:	60da      	str	r2, [r3, #12]
 80136f6:	e003      	b.n	8013700 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	681a      	ldr	r2, [r3, #0]
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013700:	69fb      	ldr	r3, [r7, #28]
 8013702:	2200      	movs	r2, #0
 8013704:	729a      	strb	r2, [r3, #10]
 8013706:	2200      	movs	r2, #0
 8013708:	72da      	strb	r2, [r3, #11]
 801370a:	e008      	b.n	801371e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013712:	69fb      	ldr	r3, [r7, #28]
 8013714:	691b      	ldr	r3, [r3, #16]
 8013716:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013718:	f107 0314 	add.w	r3, r7, #20
 801371c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013720:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013722:	2b00      	cmp	r3, #0
 8013724:	d00c      	beq.n	8013740 <ip4_output_if_src+0x120>
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	891a      	ldrh	r2, [r3, #8]
 801372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801372e:	429a      	cmp	r2, r3
 8013730:	d906      	bls.n	8013740 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8013732:	687a      	ldr	r2, [r7, #4]
 8013734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013736:	68f8      	ldr	r0, [r7, #12]
 8013738:	f000 fd08 	bl	801414c <ip4_frag>
 801373c:	4603      	mov	r3, r0
 801373e:	e006      	b.n	801374e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013742:	695b      	ldr	r3, [r3, #20]
 8013744:	687a      	ldr	r2, [r7, #4]
 8013746:	68f9      	ldr	r1, [r7, #12]
 8013748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801374a:	4798      	blx	r3
 801374c:	4603      	mov	r3, r0
}
 801374e:	4618      	mov	r0, r3
 8013750:	3720      	adds	r7, #32
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
 8013756:	bf00      	nop
 8013758:	08017b20 	.word	0x08017b20
 801375c:	08017b54 	.word	0x08017b54
 8013760:	08017b60 	.word	0x08017b60
 8013764:	08017b88 	.word	0x08017b88
 8013768:	2000bb66 	.word	0x2000bb66
 801376c:	08017f88 	.word	0x08017f88

08013770 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013770:	b480      	push	{r7}
 8013772:	b085      	sub	sp, #20
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013784:	d002      	beq.n	801378c <ip4_addr_isbroadcast_u32+0x1c>
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d101      	bne.n	8013790 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801378c:	2301      	movs	r3, #1
 801378e:	e02a      	b.n	80137e6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013796:	f003 0302 	and.w	r3, r3, #2
 801379a:	2b00      	cmp	r3, #0
 801379c:	d101      	bne.n	80137a2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801379e:	2300      	movs	r3, #0
 80137a0:	e021      	b.n	80137e6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	3304      	adds	r3, #4
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d101      	bne.n	80137b2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80137ae:	2300      	movs	r3, #0
 80137b0:	e019      	b.n	80137e6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80137b2:	68fa      	ldr	r2, [r7, #12]
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	3304      	adds	r3, #4
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	405a      	eors	r2, r3
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	3308      	adds	r3, #8
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	4013      	ands	r3, r2
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d10d      	bne.n	80137e4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	3308      	adds	r3, #8
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	43da      	mvns	r2, r3
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	3308      	adds	r3, #8
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80137dc:	429a      	cmp	r2, r3
 80137de:	d101      	bne.n	80137e4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80137e0:	2301      	movs	r3, #1
 80137e2:	e000      	b.n	80137e6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80137e4:	2300      	movs	r3, #0
  }
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3714      	adds	r7, #20
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bc80      	pop	{r7}
 80137ee:	4770      	bx	lr

080137f0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b084      	sub	sp, #16
 80137f4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80137f6:	2300      	movs	r3, #0
 80137f8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80137fa:	4b12      	ldr	r3, [pc, #72]	; (8013844 <ip_reass_tmr+0x54>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013800:	e018      	b.n	8013834 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	7fdb      	ldrb	r3, [r3, #31]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d00b      	beq.n	8013822 <ip_reass_tmr+0x32>
      r->timer--;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	7fdb      	ldrb	r3, [r3, #31]
 801380e:	3b01      	subs	r3, #1
 8013810:	b2da      	uxtb	r2, r3
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	60fb      	str	r3, [r7, #12]
 8013820:	e008      	b.n	8013834 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801382c:	68b9      	ldr	r1, [r7, #8]
 801382e:	6878      	ldr	r0, [r7, #4]
 8013830:	f000 f80a 	bl	8013848 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d1e3      	bne.n	8013802 <ip_reass_tmr+0x12>
     }
   }
}
 801383a:	bf00      	nop
 801383c:	bf00      	nop
 801383e:	3710      	adds	r7, #16
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	2000bb68 	.word	0x2000bb68

08013848 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b088      	sub	sp, #32
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013852:	2300      	movs	r3, #0
 8013854:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013856:	683a      	ldr	r2, [r7, #0]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	429a      	cmp	r2, r3
 801385c:	d105      	bne.n	801386a <ip_reass_free_complete_datagram+0x22>
 801385e:	4b45      	ldr	r3, [pc, #276]	; (8013974 <ip_reass_free_complete_datagram+0x12c>)
 8013860:	22ab      	movs	r2, #171	; 0xab
 8013862:	4945      	ldr	r1, [pc, #276]	; (8013978 <ip_reass_free_complete_datagram+0x130>)
 8013864:	4845      	ldr	r0, [pc, #276]	; (801397c <ip_reass_free_complete_datagram+0x134>)
 8013866:	f001 f8f7 	bl	8014a58 <iprintf>
  if (prev != NULL) {
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d00a      	beq.n	8013886 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	687a      	ldr	r2, [r7, #4]
 8013876:	429a      	cmp	r2, r3
 8013878:	d005      	beq.n	8013886 <ip_reass_free_complete_datagram+0x3e>
 801387a:	4b3e      	ldr	r3, [pc, #248]	; (8013974 <ip_reass_free_complete_datagram+0x12c>)
 801387c:	22ad      	movs	r2, #173	; 0xad
 801387e:	4940      	ldr	r1, [pc, #256]	; (8013980 <ip_reass_free_complete_datagram+0x138>)
 8013880:	483e      	ldr	r0, [pc, #248]	; (801397c <ip_reass_free_complete_datagram+0x134>)
 8013882:	f001 f8e9 	bl	8014a58 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	889b      	ldrh	r3, [r3, #4]
 8013892:	b29b      	uxth	r3, r3
 8013894:	2b00      	cmp	r3, #0
 8013896:	d12a      	bne.n	80138ee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	681a      	ldr	r2, [r3, #0]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80138a6:	69bb      	ldr	r3, [r7, #24]
 80138a8:	6858      	ldr	r0, [r3, #4]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	3308      	adds	r3, #8
 80138ae:	2214      	movs	r2, #20
 80138b0:	4619      	mov	r1, r3
 80138b2:	f001 fa02 	bl	8014cba <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80138b6:	2101      	movs	r1, #1
 80138b8:	69b8      	ldr	r0, [r7, #24]
 80138ba:	f7ff fc65 	bl	8013188 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80138be:	69b8      	ldr	r0, [r7, #24]
 80138c0:	f7f8 fc86 	bl	800c1d0 <pbuf_clen>
 80138c4:	4603      	mov	r3, r0
 80138c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80138c8:	8bfa      	ldrh	r2, [r7, #30]
 80138ca:	8a7b      	ldrh	r3, [r7, #18]
 80138cc:	4413      	add	r3, r2
 80138ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80138d2:	db05      	blt.n	80138e0 <ip_reass_free_complete_datagram+0x98>
 80138d4:	4b27      	ldr	r3, [pc, #156]	; (8013974 <ip_reass_free_complete_datagram+0x12c>)
 80138d6:	22bc      	movs	r2, #188	; 0xbc
 80138d8:	492a      	ldr	r1, [pc, #168]	; (8013984 <ip_reass_free_complete_datagram+0x13c>)
 80138da:	4828      	ldr	r0, [pc, #160]	; (801397c <ip_reass_free_complete_datagram+0x134>)
 80138dc:	f001 f8bc 	bl	8014a58 <iprintf>
    pbufs_freed += clen;
 80138e0:	8bfa      	ldrh	r2, [r7, #30]
 80138e2:	8a7b      	ldrh	r3, [r7, #18]
 80138e4:	4413      	add	r3, r2
 80138e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80138e8:	69b8      	ldr	r0, [r7, #24]
 80138ea:	f7f8 fbd7 	bl	800c09c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80138f4:	e01f      	b.n	8013936 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80138f6:	69bb      	ldr	r3, [r7, #24]
 80138f8:	685b      	ldr	r3, [r3, #4]
 80138fa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80138fc:	69bb      	ldr	r3, [r7, #24]
 80138fe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013906:	68f8      	ldr	r0, [r7, #12]
 8013908:	f7f8 fc62 	bl	800c1d0 <pbuf_clen>
 801390c:	4603      	mov	r3, r0
 801390e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013910:	8bfa      	ldrh	r2, [r7, #30]
 8013912:	8a7b      	ldrh	r3, [r7, #18]
 8013914:	4413      	add	r3, r2
 8013916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801391a:	db05      	blt.n	8013928 <ip_reass_free_complete_datagram+0xe0>
 801391c:	4b15      	ldr	r3, [pc, #84]	; (8013974 <ip_reass_free_complete_datagram+0x12c>)
 801391e:	22cc      	movs	r2, #204	; 0xcc
 8013920:	4918      	ldr	r1, [pc, #96]	; (8013984 <ip_reass_free_complete_datagram+0x13c>)
 8013922:	4816      	ldr	r0, [pc, #88]	; (801397c <ip_reass_free_complete_datagram+0x134>)
 8013924:	f001 f898 	bl	8014a58 <iprintf>
    pbufs_freed += clen;
 8013928:	8bfa      	ldrh	r2, [r7, #30]
 801392a:	8a7b      	ldrh	r3, [r7, #18]
 801392c:	4413      	add	r3, r2
 801392e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013930:	68f8      	ldr	r0, [r7, #12]
 8013932:	f7f8 fbb3 	bl	800c09c <pbuf_free>
  while (p != NULL) {
 8013936:	69bb      	ldr	r3, [r7, #24]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d1dc      	bne.n	80138f6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801393c:	6839      	ldr	r1, [r7, #0]
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f000 f8c2 	bl	8013ac8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8013944:	4b10      	ldr	r3, [pc, #64]	; (8013988 <ip_reass_free_complete_datagram+0x140>)
 8013946:	881b      	ldrh	r3, [r3, #0]
 8013948:	8bfa      	ldrh	r2, [r7, #30]
 801394a:	429a      	cmp	r2, r3
 801394c:	d905      	bls.n	801395a <ip_reass_free_complete_datagram+0x112>
 801394e:	4b09      	ldr	r3, [pc, #36]	; (8013974 <ip_reass_free_complete_datagram+0x12c>)
 8013950:	22d2      	movs	r2, #210	; 0xd2
 8013952:	490e      	ldr	r1, [pc, #56]	; (801398c <ip_reass_free_complete_datagram+0x144>)
 8013954:	4809      	ldr	r0, [pc, #36]	; (801397c <ip_reass_free_complete_datagram+0x134>)
 8013956:	f001 f87f 	bl	8014a58 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801395a:	4b0b      	ldr	r3, [pc, #44]	; (8013988 <ip_reass_free_complete_datagram+0x140>)
 801395c:	881a      	ldrh	r2, [r3, #0]
 801395e:	8bfb      	ldrh	r3, [r7, #30]
 8013960:	1ad3      	subs	r3, r2, r3
 8013962:	b29a      	uxth	r2, r3
 8013964:	4b08      	ldr	r3, [pc, #32]	; (8013988 <ip_reass_free_complete_datagram+0x140>)
 8013966:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013968:	8bfb      	ldrh	r3, [r7, #30]
}
 801396a:	4618      	mov	r0, r3
 801396c:	3720      	adds	r7, #32
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	08017bb8 	.word	0x08017bb8
 8013978:	08017bf4 	.word	0x08017bf4
 801397c:	08017c00 	.word	0x08017c00
 8013980:	08017c28 	.word	0x08017c28
 8013984:	08017c3c 	.word	0x08017c3c
 8013988:	2000bb6c 	.word	0x2000bb6c
 801398c:	08017c5c 	.word	0x08017c5c

08013990 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b08a      	sub	sp, #40	; 0x28
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801399a:	2300      	movs	r3, #0
 801399c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801399e:	2300      	movs	r3, #0
 80139a0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80139a2:	2300      	movs	r3, #0
 80139a4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80139a6:	2300      	movs	r3, #0
 80139a8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80139aa:	2300      	movs	r3, #0
 80139ac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80139ae:	4b28      	ldr	r3, [pc, #160]	; (8013a50 <ip_reass_remove_oldest_datagram+0xc0>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80139b4:	e030      	b.n	8013a18 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80139b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b8:	695a      	ldr	r2, [r3, #20]
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	68db      	ldr	r3, [r3, #12]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d10c      	bne.n	80139dc <ip_reass_remove_oldest_datagram+0x4c>
 80139c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c4:	699a      	ldr	r2, [r3, #24]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	691b      	ldr	r3, [r3, #16]
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d106      	bne.n	80139dc <ip_reass_remove_oldest_datagram+0x4c>
 80139ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d0:	899a      	ldrh	r2, [r3, #12]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	889b      	ldrh	r3, [r3, #4]
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	429a      	cmp	r2, r3
 80139da:	d014      	beq.n	8013a06 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	3301      	adds	r3, #1
 80139e0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80139e2:	6a3b      	ldr	r3, [r7, #32]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d104      	bne.n	80139f2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80139e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80139ec:	69fb      	ldr	r3, [r7, #28]
 80139ee:	61bb      	str	r3, [r7, #24]
 80139f0:	e009      	b.n	8013a06 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80139f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f4:	7fda      	ldrb	r2, [r3, #31]
 80139f6:	6a3b      	ldr	r3, [r7, #32]
 80139f8:	7fdb      	ldrb	r3, [r3, #31]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d803      	bhi.n	8013a06 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80139fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a00:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d001      	beq.n	8013a12 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a10:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d1cb      	bne.n	80139b6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013a1e:	6a3b      	ldr	r3, [r7, #32]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d008      	beq.n	8013a36 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013a24:	69b9      	ldr	r1, [r7, #24]
 8013a26:	6a38      	ldr	r0, [r7, #32]
 8013a28:	f7ff ff0e 	bl	8013848 <ip_reass_free_complete_datagram>
 8013a2c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013a2e:	697a      	ldr	r2, [r7, #20]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	4413      	add	r3, r2
 8013a34:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013a36:	697a      	ldr	r2, [r7, #20]
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	da02      	bge.n	8013a44 <ip_reass_remove_oldest_datagram+0xb4>
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	dcac      	bgt.n	801399e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013a44:	697b      	ldr	r3, [r7, #20]
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	3728      	adds	r7, #40	; 0x28
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	bd80      	pop	{r7, pc}
 8013a4e:	bf00      	nop
 8013a50:	2000bb68 	.word	0x2000bb68

08013a54 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b084      	sub	sp, #16
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
 8013a5c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013a5e:	2004      	movs	r0, #4
 8013a60:	f7f7 fd32 	bl	800b4c8 <memp_malloc>
 8013a64:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d110      	bne.n	8013a8e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013a6c:	6839      	ldr	r1, [r7, #0]
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f7ff ff8e 	bl	8013990 <ip_reass_remove_oldest_datagram>
 8013a74:	4602      	mov	r2, r0
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	dc03      	bgt.n	8013a84 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013a7c:	2004      	movs	r0, #4
 8013a7e:	f7f7 fd23 	bl	800b4c8 <memp_malloc>
 8013a82:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d101      	bne.n	8013a8e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	e016      	b.n	8013abc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013a8e:	2220      	movs	r2, #32
 8013a90:	2100      	movs	r1, #0
 8013a92:	68f8      	ldr	r0, [r7, #12]
 8013a94:	f001 f845 	bl	8014b22 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2203      	movs	r2, #3
 8013a9c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013a9e:	4b09      	ldr	r3, [pc, #36]	; (8013ac4 <ip_reass_enqueue_new_datagram+0x70>)
 8013aa0:	681a      	ldr	r2, [r3, #0]
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013aa6:	4a07      	ldr	r2, [pc, #28]	; (8013ac4 <ip_reass_enqueue_new_datagram+0x70>)
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	3308      	adds	r3, #8
 8013ab0:	2214      	movs	r2, #20
 8013ab2:	6879      	ldr	r1, [r7, #4]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f001 f900 	bl	8014cba <memcpy>
  return ipr;
 8013aba:	68fb      	ldr	r3, [r7, #12]
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3710      	adds	r7, #16
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}
 8013ac4:	2000bb68 	.word	0x2000bb68

08013ac8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013ad2:	4b10      	ldr	r3, [pc, #64]	; (8013b14 <ip_reass_dequeue_datagram+0x4c>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d104      	bne.n	8013ae6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	4a0c      	ldr	r2, [pc, #48]	; (8013b14 <ip_reass_dequeue_datagram+0x4c>)
 8013ae2:	6013      	str	r3, [r2, #0]
 8013ae4:	e00d      	b.n	8013b02 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013ae6:	683b      	ldr	r3, [r7, #0]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d106      	bne.n	8013afa <ip_reass_dequeue_datagram+0x32>
 8013aec:	4b0a      	ldr	r3, [pc, #40]	; (8013b18 <ip_reass_dequeue_datagram+0x50>)
 8013aee:	f240 1245 	movw	r2, #325	; 0x145
 8013af2:	490a      	ldr	r1, [pc, #40]	; (8013b1c <ip_reass_dequeue_datagram+0x54>)
 8013af4:	480a      	ldr	r0, [pc, #40]	; (8013b20 <ip_reass_dequeue_datagram+0x58>)
 8013af6:	f000 ffaf 	bl	8014a58 <iprintf>
    prev->next = ipr->next;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013b02:	6879      	ldr	r1, [r7, #4]
 8013b04:	2004      	movs	r0, #4
 8013b06:	f7f7 fd31 	bl	800b56c <memp_free>
}
 8013b0a:	bf00      	nop
 8013b0c:	3708      	adds	r7, #8
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	2000bb68 	.word	0x2000bb68
 8013b18:	08017bb8 	.word	0x08017bb8
 8013b1c:	08017c78 	.word	0x08017c78
 8013b20:	08017c00 	.word	0x08017c00

08013b24 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b08c      	sub	sp, #48	; 0x30
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	60f8      	str	r0, [r7, #12]
 8013b2c:	60b9      	str	r1, [r7, #8]
 8013b2e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8013b30:	2300      	movs	r3, #0
 8013b32:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013b34:	2301      	movs	r3, #1
 8013b36:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	685b      	ldr	r3, [r3, #4]
 8013b3c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	885b      	ldrh	r3, [r3, #2]
 8013b42:	b29b      	uxth	r3, r3
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7f7 f8d3 	bl	800acf0 <lwip_htons>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	69fb      	ldr	r3, [r7, #28]
 8013b50:	781b      	ldrb	r3, [r3, #0]
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	f003 030f 	and.w	r3, r3, #15
 8013b58:	b29b      	uxth	r3, r3
 8013b5a:	009b      	lsls	r3, r3, #2
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	1ad3      	subs	r3, r2, r3
 8013b60:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	88db      	ldrh	r3, [r3, #6]
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7f7 f8c1 	bl	800acf0 <lwip_htons>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b74:	b29b      	uxth	r3, r3
 8013b76:	00db      	lsls	r3, r3, #3
 8013b78:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	685b      	ldr	r3, [r3, #4]
 8013b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b82:	2200      	movs	r2, #0
 8013b84:	701a      	strb	r2, [r3, #0]
 8013b86:	2200      	movs	r2, #0
 8013b88:	705a      	strb	r2, [r3, #1]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	709a      	strb	r2, [r3, #2]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b94:	8b3a      	ldrh	r2, [r7, #24]
 8013b96:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8013b98:	8b3a      	ldrh	r2, [r7, #24]
 8013b9a:	8b7b      	ldrh	r3, [r7, #26]
 8013b9c:	4413      	add	r3, r2
 8013b9e:	b29a      	uxth	r2, r3
 8013ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	685b      	ldr	r3, [r3, #4]
 8013ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8013baa:	e061      	b.n	8013c70 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8013bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bae:	685b      	ldr	r3, [r3, #4]
 8013bb0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8013bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb4:	889b      	ldrh	r3, [r3, #4]
 8013bb6:	b29a      	uxth	r2, r3
 8013bb8:	697b      	ldr	r3, [r7, #20]
 8013bba:	889b      	ldrh	r3, [r3, #4]
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d232      	bcs.n	8013c28 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bc6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d01f      	beq.n	8013c0e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd0:	889b      	ldrh	r3, [r3, #4]
 8013bd2:	b29a      	uxth	r2, r3
 8013bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd6:	88db      	ldrh	r3, [r3, #6]
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	f0c0 80e3 	bcc.w	8013da6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8013be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be2:	88db      	ldrh	r3, [r3, #6]
 8013be4:	b29a      	uxth	r2, r3
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	889b      	ldrh	r3, [r3, #4]
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	429a      	cmp	r2, r3
 8013bee:	f200 80da 	bhi.w	8013da6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bf4:	68ba      	ldr	r2, [r7, #8]
 8013bf6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bfa:	88db      	ldrh	r3, [r3, #6]
 8013bfc:	b29a      	uxth	r2, r3
 8013bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c00:	889b      	ldrh	r3, [r3, #4]
 8013c02:	b29b      	uxth	r3, r3
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d037      	beq.n	8013c78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013c08:	2300      	movs	r3, #0
 8013c0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013c0c:	e034      	b.n	8013c78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8013c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c10:	88db      	ldrh	r3, [r3, #6]
 8013c12:	b29a      	uxth	r2, r3
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	889b      	ldrh	r3, [r3, #4]
 8013c18:	b29b      	uxth	r3, r3
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	f200 80c5 	bhi.w	8013daa <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	68ba      	ldr	r2, [r7, #8]
 8013c24:	605a      	str	r2, [r3, #4]
      break;
 8013c26:	e027      	b.n	8013c78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8013c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c2a:	889b      	ldrh	r3, [r3, #4]
 8013c2c:	b29a      	uxth	r2, r3
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	889b      	ldrh	r3, [r3, #4]
 8013c32:	b29b      	uxth	r3, r3
 8013c34:	429a      	cmp	r2, r3
 8013c36:	f000 80ba 	beq.w	8013dae <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c3c:	889b      	ldrh	r3, [r3, #4]
 8013c3e:	b29a      	uxth	r2, r3
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	88db      	ldrh	r3, [r3, #6]
 8013c44:	b29b      	uxth	r3, r3
 8013c46:	429a      	cmp	r2, r3
 8013c48:	f0c0 80b3 	bcc.w	8013db2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d009      	beq.n	8013c66 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8013c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c54:	88db      	ldrh	r3, [r3, #6]
 8013c56:	b29a      	uxth	r2, r3
 8013c58:	697b      	ldr	r3, [r7, #20]
 8013c5a:	889b      	ldrh	r3, [r3, #4]
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	d001      	beq.n	8013c66 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013c62:	2300      	movs	r3, #0
 8013c64:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d19a      	bne.n	8013bac <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8013c76:	e000      	b.n	8013c7a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8013c78:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d12d      	bne.n	8013cdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8013c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d01c      	beq.n	8013cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c88:	88db      	ldrh	r3, [r3, #6]
 8013c8a:	b29a      	uxth	r2, r3
 8013c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c8e:	889b      	ldrh	r3, [r3, #4]
 8013c90:	b29b      	uxth	r3, r3
 8013c92:	429a      	cmp	r2, r3
 8013c94:	d906      	bls.n	8013ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8013c96:	4b51      	ldr	r3, [pc, #324]	; (8013ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013c98:	f240 12ab 	movw	r2, #427	; 0x1ab
 8013c9c:	4950      	ldr	r1, [pc, #320]	; (8013de0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c9e:	4851      	ldr	r0, [pc, #324]	; (8013de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013ca0:	f000 feda 	bl	8014a58 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca6:	68ba      	ldr	r2, [r7, #8]
 8013ca8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cac:	88db      	ldrh	r3, [r3, #6]
 8013cae:	b29a      	uxth	r2, r3
 8013cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb2:	889b      	ldrh	r3, [r3, #4]
 8013cb4:	b29b      	uxth	r3, r3
 8013cb6:	429a      	cmp	r2, r3
 8013cb8:	d010      	beq.n	8013cdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	623b      	str	r3, [r7, #32]
 8013cbe:	e00d      	b.n	8013cdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d006      	beq.n	8013cd6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8013cc8:	4b44      	ldr	r3, [pc, #272]	; (8013ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013cca:	f240 12b3 	movw	r2, #435	; 0x1b3
 8013cce:	4946      	ldr	r1, [pc, #280]	; (8013de8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013cd0:	4844      	ldr	r0, [pc, #272]	; (8013de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013cd2:	f000 fec1 	bl	8014a58 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d105      	bne.n	8013cee <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	7f9b      	ldrb	r3, [r3, #30]
 8013ce6:	f003 0301 	and.w	r3, r3, #1
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d059      	beq.n	8013da2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8013cee:	6a3b      	ldr	r3, [r7, #32]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d04f      	beq.n	8013d94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	685b      	ldr	r3, [r3, #4]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d006      	beq.n	8013d0a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	685b      	ldr	r3, [r3, #4]
 8013d00:	685b      	ldr	r3, [r3, #4]
 8013d02:	889b      	ldrh	r3, [r3, #4]
 8013d04:	b29b      	uxth	r3, r3
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d002      	beq.n	8013d10 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	623b      	str	r3, [r7, #32]
 8013d0e:	e041      	b.n	8013d94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d12:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013d1a:	e012      	b.n	8013d42 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8013d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d1e:	685b      	ldr	r3, [r3, #4]
 8013d20:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d24:	88db      	ldrh	r3, [r3, #6]
 8013d26:	b29a      	uxth	r2, r3
 8013d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d2a:	889b      	ldrh	r3, [r3, #4]
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	d002      	beq.n	8013d38 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8013d32:	2300      	movs	r3, #0
 8013d34:	623b      	str	r3, [r7, #32]
            break;
 8013d36:	e007      	b.n	8013d48 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8013d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d3a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d1e9      	bne.n	8013d1c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013d48:	6a3b      	ldr	r3, [r7, #32]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d022      	beq.n	8013d94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	685b      	ldr	r3, [r3, #4]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d106      	bne.n	8013d64 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8013d56:	4b21      	ldr	r3, [pc, #132]	; (8013ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013d58:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8013d5c:	4923      	ldr	r1, [pc, #140]	; (8013dec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013d5e:	4821      	ldr	r0, [pc, #132]	; (8013de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013d60:	f000 fe7a 	bl	8014a58 <iprintf>
          LWIP_ASSERT("sanity check",
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d106      	bne.n	8013d7e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8013d70:	4b1a      	ldr	r3, [pc, #104]	; (8013ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013d72:	f240 12d5 	movw	r2, #469	; 0x1d5
 8013d76:	491d      	ldr	r1, [pc, #116]	; (8013dec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013d78:	481a      	ldr	r0, [pc, #104]	; (8013de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013d7a:	f000 fe6d 	bl	8014a58 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d006      	beq.n	8013d94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8013d86:	4b15      	ldr	r3, [pc, #84]	; (8013ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013d88:	f240 12d7 	movw	r2, #471	; 0x1d7
 8013d8c:	4918      	ldr	r1, [pc, #96]	; (8013df0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013d8e:	4815      	ldr	r0, [pc, #84]	; (8013de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013d90:	f000 fe62 	bl	8014a58 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013d94:	6a3b      	ldr	r3, [r7, #32]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	bf14      	ite	ne
 8013d9a:	2301      	movne	r3, #1
 8013d9c:	2300      	moveq	r3, #0
 8013d9e:	b2db      	uxtb	r3, r3
 8013da0:	e018      	b.n	8013dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013da2:	2300      	movs	r3, #0
 8013da4:	e016      	b.n	8013dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 8013da6:	bf00      	nop
 8013da8:	e004      	b.n	8013db4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8013daa:	bf00      	nop
 8013dac:	e002      	b.n	8013db4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8013dae:	bf00      	nop
 8013db0:	e000      	b.n	8013db4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8013db2:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8013db4:	68b8      	ldr	r0, [r7, #8]
 8013db6:	f7f8 fa0b 	bl	800c1d0 <pbuf_clen>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	4b0d      	ldr	r3, [pc, #52]	; (8013df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013dc0:	881b      	ldrh	r3, [r3, #0]
 8013dc2:	1a9b      	subs	r3, r3, r2
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	4b0b      	ldr	r3, [pc, #44]	; (8013df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013dc8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8013dca:	68b8      	ldr	r0, [r7, #8]
 8013dcc:	f7f8 f966 	bl	800c09c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013dd0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3730      	adds	r7, #48	; 0x30
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	08017bb8 	.word	0x08017bb8
 8013de0:	08017c94 	.word	0x08017c94
 8013de4:	08017c00 	.word	0x08017c00
 8013de8:	08017cb4 	.word	0x08017cb4
 8013dec:	08017cec 	.word	0x08017cec
 8013df0:	08017cfc 	.word	0x08017cfc
 8013df4:	2000bb6c 	.word	0x2000bb6c

08013df8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b08e      	sub	sp, #56	; 0x38
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	685b      	ldr	r3, [r3, #4]
 8013e04:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8013e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e08:	781b      	ldrb	r3, [r3, #0]
 8013e0a:	f003 030f 	and.w	r3, r3, #15
 8013e0e:	2b05      	cmp	r3, #5
 8013e10:	f040 8131 	bne.w	8014076 <ip4_reass+0x27e>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8013e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e16:	88db      	ldrh	r3, [r3, #6]
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7f6 ff68 	bl	800acf0 <lwip_htons>
 8013e20:	4603      	mov	r3, r0
 8013e22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	00db      	lsls	r3, r3, #3
 8013e2a:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8013e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e2e:	885b      	ldrh	r3, [r3, #2]
 8013e30:	b29b      	uxth	r3, r3
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7f6 ff5c 	bl	800acf0 <lwip_htons>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3e:	781b      	ldrb	r3, [r3, #0]
 8013e40:	b29b      	uxth	r3, r3
 8013e42:	f003 030f 	and.w	r3, r3, #15
 8013e46:	b29b      	uxth	r3, r3
 8013e48:	009b      	lsls	r3, r3, #2
 8013e4a:	b29b      	uxth	r3, r3
 8013e4c:	1ad3      	subs	r3, r2, r3
 8013e4e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	f7f8 f9bd 	bl	800c1d0 <pbuf_clen>
 8013e56:	4603      	mov	r3, r0
 8013e58:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013e5a:	4b8e      	ldr	r3, [pc, #568]	; (8014094 <ip4_reass+0x29c>)
 8013e5c:	881b      	ldrh	r3, [r3, #0]
 8013e5e:	461a      	mov	r2, r3
 8013e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e62:	4413      	add	r3, r2
 8013e64:	2b0a      	cmp	r3, #10
 8013e66:	dd10      	ble.n	8013e8a <ip4_reass+0x92>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013e68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e6a:	4619      	mov	r1, r3
 8013e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e6e:	f7ff fd8f 	bl	8013990 <ip_reass_remove_oldest_datagram>
 8013e72:	4603      	mov	r3, r0
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	f000 8100 	beq.w	801407a <ip4_reass+0x282>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013e7a:	4b86      	ldr	r3, [pc, #536]	; (8014094 <ip4_reass+0x29c>)
 8013e7c:	881b      	ldrh	r3, [r3, #0]
 8013e7e:	461a      	mov	r2, r3
 8013e80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e82:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013e84:	2b0a      	cmp	r3, #10
 8013e86:	f300 80f8 	bgt.w	801407a <ip4_reass+0x282>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013e8a:	4b83      	ldr	r3, [pc, #524]	; (8014098 <ip4_reass+0x2a0>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8013e90:	e015      	b.n	8013ebe <ip4_reass+0xc6>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e94:	695a      	ldr	r2, [r3, #20]
 8013e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e98:	68db      	ldr	r3, [r3, #12]
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d10c      	bne.n	8013eb8 <ip4_reass+0xc0>
 8013e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea0:	699a      	ldr	r2, [r3, #24]
 8013ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea4:	691b      	ldr	r3, [r3, #16]
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d106      	bne.n	8013eb8 <ip4_reass+0xc0>
 8013eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eac:	899a      	ldrh	r2, [r3, #12]
 8013eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb0:	889b      	ldrh	r3, [r3, #4]
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d006      	beq.n	8013ec6 <ip4_reass+0xce>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8013ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d1e6      	bne.n	8013e92 <ip4_reass+0x9a>
 8013ec4:	e000      	b.n	8013ec8 <ip4_reass+0xd0>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013ec6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d109      	bne.n	8013ee2 <ip4_reass+0xea>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013ece:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ed4:	f7ff fdbe 	bl	8013a54 <ip_reass_enqueue_new_datagram>
 8013ed8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d11c      	bne.n	8013f1a <ip4_reass+0x122>
      goto nullreturn;
 8013ee0:	e0d0      	b.n	8014084 <ip4_reass+0x28c>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee4:	88db      	ldrh	r3, [r3, #6]
 8013ee6:	b29b      	uxth	r3, r3
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7f6 ff01 	bl	800acf0 <lwip_htons>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d110      	bne.n	8013f1a <ip4_reass+0x122>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013efa:	89db      	ldrh	r3, [r3, #14]
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7f6 fef7 	bl	800acf0 <lwip_htons>
 8013f02:	4603      	mov	r3, r0
 8013f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d006      	beq.n	8013f1a <ip4_reass+0x122>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0e:	3308      	adds	r3, #8
 8013f10:	2214      	movs	r2, #20
 8013f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f14:	4618      	mov	r0, r3
 8013f16:	f000 fed0 	bl	8014cba <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f1c:	88db      	ldrh	r3, [r3, #6]
 8013f1e:	b29b      	uxth	r3, r3
 8013f20:	f003 0320 	and.w	r3, r3, #32
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	bf0c      	ite	eq
 8013f28:	2301      	moveq	r3, #1
 8013f2a:	2300      	movne	r3, #0
 8013f2c:	b2db      	uxtb	r3, r3
 8013f2e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013f30:	69fb      	ldr	r3, [r7, #28]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d00e      	beq.n	8013f54 <ip4_reass+0x15c>
    u16_t datagram_len = (u16_t)(offset + len);
 8013f36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f3a:	4413      	add	r3, r2
 8013f3c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013f3e:	8b7a      	ldrh	r2, [r7, #26]
 8013f40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013f42:	429a      	cmp	r2, r3
 8013f44:	f0c0 809b 	bcc.w	801407e <ip4_reass+0x286>
 8013f48:	8b7b      	ldrh	r3, [r7, #26]
 8013f4a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013f4e:	4293      	cmp	r3, r2
 8013f50:	f200 8095 	bhi.w	801407e <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013f54:	69fa      	ldr	r2, [r7, #28]
 8013f56:	6879      	ldr	r1, [r7, #4]
 8013f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f5a:	f7ff fde3 	bl	8013b24 <ip_reass_chain_frag_into_datagram_and_validate>
 8013f5e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f66:	f000 808c 	beq.w	8014082 <ip4_reass+0x28a>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013f6a:	4b4a      	ldr	r3, [pc, #296]	; (8014094 <ip4_reass+0x29c>)
 8013f6c:	881a      	ldrh	r2, [r3, #0]
 8013f6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f70:	4413      	add	r3, r2
 8013f72:	b29a      	uxth	r2, r3
 8013f74:	4b47      	ldr	r3, [pc, #284]	; (8014094 <ip4_reass+0x29c>)
 8013f76:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013f78:	69fb      	ldr	r3, [r7, #28]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d00d      	beq.n	8013f9a <ip4_reass+0x1a2>
    u16_t datagram_len = (u16_t)(offset + len);
 8013f7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f82:	4413      	add	r3, r2
 8013f84:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f88:	8a7a      	ldrh	r2, [r7, #18]
 8013f8a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f8e:	7f9b      	ldrb	r3, [r3, #30]
 8013f90:	f043 0301 	orr.w	r3, r3, #1
 8013f94:	b2da      	uxtb	r2, r3
 8013f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f98:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	d168      	bne.n	8014072 <ip4_reass+0x27a>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8013fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa2:	8b9b      	ldrh	r3, [r3, #28]
 8013fa4:	3314      	adds	r3, #20
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013faa:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8013fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fae:	685b      	ldr	r3, [r3, #4]
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8013fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	685b      	ldr	r3, [r3, #4]
 8013fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc0:	3308      	adds	r3, #8
 8013fc2:	2214      	movs	r2, #20
 8013fc4:	4619      	mov	r1, r3
 8013fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fc8:	f000 fe77 	bl	8014cba <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8013fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fce:	8b9b      	ldrh	r3, [r3, #28]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7f6 fe8d 	bl	800acf0 <lwip_htons>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	461a      	mov	r2, r3
 8013fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fdc:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	719a      	strb	r2, [r3, #6]
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fea:	2200      	movs	r2, #0
 8013fec:	729a      	strb	r2, [r3, #10]
 8013fee:	2200      	movs	r2, #0
 8013ff0:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff4:	685b      	ldr	r3, [r3, #4]
 8013ff6:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013ff8:	e00e      	b.n	8014018 <ip4_reass+0x220>
      iprh = (struct ip_reass_helper*)r->payload;
 8013ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ffc:	685b      	ldr	r3, [r3, #4]
 8013ffe:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8014000:	f06f 0113 	mvn.w	r1, #19
 8014004:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014006:	f7f8 f825 	bl	800c054 <pbuf_header>
      pbuf_cat(p, r);
 801400a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f7f8 f91d 	bl	800c24c <pbuf_cat>
      r = iprh->next_pbuf;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801401a:	2b00      	cmp	r3, #0
 801401c:	d1ed      	bne.n	8013ffa <ip4_reass+0x202>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801401e:	4b1e      	ldr	r3, [pc, #120]	; (8014098 <ip4_reass+0x2a0>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014024:	429a      	cmp	r2, r3
 8014026:	d102      	bne.n	801402e <ip4_reass+0x236>
      ipr_prev = NULL;
 8014028:	2300      	movs	r3, #0
 801402a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801402c:	e010      	b.n	8014050 <ip4_reass+0x258>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801402e:	4b1a      	ldr	r3, [pc, #104]	; (8014098 <ip4_reass+0x2a0>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014034:	e007      	b.n	8014046 <ip4_reass+0x24e>
        if (ipr_prev->next == ipr) {
 8014036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801403c:	429a      	cmp	r2, r3
 801403e:	d006      	beq.n	801404e <ip4_reass+0x256>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014048:	2b00      	cmp	r3, #0
 801404a:	d1f4      	bne.n	8014036 <ip4_reass+0x23e>
 801404c:	e000      	b.n	8014050 <ip4_reass+0x258>
          break;
 801404e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014054:	f7ff fd38 	bl	8013ac8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f7f8 f8b9 	bl	800c1d0 <pbuf_clen>
 801405e:	4603      	mov	r3, r0
 8014060:	461a      	mov	r2, r3
 8014062:	4b0c      	ldr	r3, [pc, #48]	; (8014094 <ip4_reass+0x29c>)
 8014064:	881b      	ldrh	r3, [r3, #0]
 8014066:	1a9b      	subs	r3, r3, r2
 8014068:	b29a      	uxth	r2, r3
 801406a:	4b0a      	ldr	r3, [pc, #40]	; (8014094 <ip4_reass+0x29c>)
 801406c:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	e00c      	b.n	801408c <ip4_reass+0x294>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014072:	2300      	movs	r3, #0
 8014074:	e00a      	b.n	801408c <ip4_reass+0x294>
    goto nullreturn;
 8014076:	bf00      	nop
 8014078:	e004      	b.n	8014084 <ip4_reass+0x28c>
      goto nullreturn;
 801407a:	bf00      	nop
 801407c:	e002      	b.n	8014084 <ip4_reass+0x28c>
      goto nullreturn;
 801407e:	bf00      	nop
 8014080:	e000      	b.n	8014084 <ip4_reass+0x28c>
    goto nullreturn;
 8014082:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f7f8 f809 	bl	800c09c <pbuf_free>
  return NULL;
 801408a:	2300      	movs	r3, #0
}
 801408c:	4618      	mov	r0, r3
 801408e:	3738      	adds	r7, #56	; 0x38
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}
 8014094:	2000bb6c 	.word	0x2000bb6c
 8014098:	2000bb68 	.word	0x2000bb68

0801409c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80140a0:	2005      	movs	r0, #5
 80140a2:	f7f7 fa11 	bl	800b4c8 <memp_malloc>
 80140a6:	4603      	mov	r3, r0
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	bd80      	pop	{r7, pc}

080140ac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b082      	sub	sp, #8
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d106      	bne.n	80140c8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80140ba:	4b07      	ldr	r3, [pc, #28]	; (80140d8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80140bc:	f240 22ae 	movw	r2, #686	; 0x2ae
 80140c0:	4906      	ldr	r1, [pc, #24]	; (80140dc <ip_frag_free_pbuf_custom_ref+0x30>)
 80140c2:	4807      	ldr	r0, [pc, #28]	; (80140e0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80140c4:	f000 fcc8 	bl	8014a58 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80140c8:	6879      	ldr	r1, [r7, #4]
 80140ca:	2005      	movs	r0, #5
 80140cc:	f7f7 fa4e 	bl	800b56c <memp_free>
}
 80140d0:	bf00      	nop
 80140d2:	3708      	adds	r7, #8
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	08017bb8 	.word	0x08017bb8
 80140dc:	08017d20 	.word	0x08017d20
 80140e0:	08017c00 	.word	0x08017c00

080140e4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b084      	sub	sp, #16
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d106      	bne.n	8014104 <ipfrag_free_pbuf_custom+0x20>
 80140f6:	4b11      	ldr	r3, [pc, #68]	; (801413c <ipfrag_free_pbuf_custom+0x58>)
 80140f8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80140fc:	4910      	ldr	r1, [pc, #64]	; (8014140 <ipfrag_free_pbuf_custom+0x5c>)
 80140fe:	4811      	ldr	r0, [pc, #68]	; (8014144 <ipfrag_free_pbuf_custom+0x60>)
 8014100:	f000 fcaa 	bl	8014a58 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8014104:	68fa      	ldr	r2, [r7, #12]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	429a      	cmp	r2, r3
 801410a:	d006      	beq.n	801411a <ipfrag_free_pbuf_custom+0x36>
 801410c:	4b0b      	ldr	r3, [pc, #44]	; (801413c <ipfrag_free_pbuf_custom+0x58>)
 801410e:	f240 22b9 	movw	r2, #697	; 0x2b9
 8014112:	490d      	ldr	r1, [pc, #52]	; (8014148 <ipfrag_free_pbuf_custom+0x64>)
 8014114:	480b      	ldr	r0, [pc, #44]	; (8014144 <ipfrag_free_pbuf_custom+0x60>)
 8014116:	f000 fc9f 	bl	8014a58 <iprintf>
  if (pcr->original != NULL) {
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	695b      	ldr	r3, [r3, #20]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d004      	beq.n	801412c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	695b      	ldr	r3, [r3, #20]
 8014126:	4618      	mov	r0, r3
 8014128:	f7f7 ffb8 	bl	800c09c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801412c:	68f8      	ldr	r0, [r7, #12]
 801412e:	f7ff ffbd 	bl	80140ac <ip_frag_free_pbuf_custom_ref>
}
 8014132:	bf00      	nop
 8014134:	3710      	adds	r7, #16
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
 801413a:	bf00      	nop
 801413c:	08017bb8 	.word	0x08017bb8
 8014140:	08017d2c 	.word	0x08017d2c
 8014144:	08017c00 	.word	0x08017c00
 8014148:	08017d38 	.word	0x08017d38

0801414c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b092      	sub	sp, #72	; 0x48
 8014150:	af02      	add	r7, sp, #8
 8014152:	60f8      	str	r0, [r7, #12]
 8014154:	60b9      	str	r1, [r7, #8]
 8014156:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014158:	2300      	movs	r3, #0
 801415a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014160:	3b14      	subs	r3, #20
 8014162:	2b00      	cmp	r3, #0
 8014164:	da00      	bge.n	8014168 <ip4_frag+0x1c>
 8014166:	3307      	adds	r3, #7
 8014168:	10db      	asrs	r3, r3, #3
 801416a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801416c:	2314      	movs	r3, #20
 801416e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8014176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014178:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	f003 030f 	and.w	r3, r3, #15
 8014182:	2b05      	cmp	r3, #5
 8014184:	d009      	beq.n	801419a <ip4_frag+0x4e>
 8014186:	4b7a      	ldr	r3, [pc, #488]	; (8014370 <ip4_frag+0x224>)
 8014188:	f240 22e1 	movw	r2, #737	; 0x2e1
 801418c:	4979      	ldr	r1, [pc, #484]	; (8014374 <ip4_frag+0x228>)
 801418e:	487a      	ldr	r0, [pc, #488]	; (8014378 <ip4_frag+0x22c>)
 8014190:	f000 fc62 	bl	8014a58 <iprintf>
 8014194:	f06f 0305 	mvn.w	r3, #5
 8014198:	e0e6      	b.n	8014368 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801419c:	88db      	ldrh	r3, [r3, #6]
 801419e:	b29b      	uxth	r3, r3
 80141a0:	4618      	mov	r0, r3
 80141a2:	f7f6 fda5 	bl	800acf0 <lwip_htons>
 80141a6:	4603      	mov	r3, r0
 80141a8:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80141aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80141ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80141b0:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80141b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80141b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d009      	beq.n	80141d0 <ip4_frag+0x84>
 80141bc:	4b6c      	ldr	r3, [pc, #432]	; (8014370 <ip4_frag+0x224>)
 80141be:	f240 22e6 	movw	r2, #742	; 0x2e6
 80141c2:	496e      	ldr	r1, [pc, #440]	; (801437c <ip4_frag+0x230>)
 80141c4:	486c      	ldr	r0, [pc, #432]	; (8014378 <ip4_frag+0x22c>)
 80141c6:	f000 fc47 	bl	8014a58 <iprintf>
 80141ca:	f06f 0305 	mvn.w	r3, #5
 80141ce:	e0cb      	b.n	8014368 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	891b      	ldrh	r3, [r3, #8]
 80141d4:	3b14      	subs	r3, #20
 80141d6:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80141d8:	e0bd      	b.n	8014356 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80141da:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80141dc:	00da      	lsls	r2, r3, #3
 80141de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80141e0:	4293      	cmp	r3, r2
 80141e2:	bfa8      	it	ge
 80141e4:	4613      	movge	r3, r2
 80141e6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80141e8:	2200      	movs	r2, #0
 80141ea:	2114      	movs	r1, #20
 80141ec:	2002      	movs	r0, #2
 80141ee:	f7f7 fbdd 	bl	800b9ac <pbuf_alloc>
 80141f2:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80141f4:	6a3b      	ldr	r3, [r7, #32]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	f000 80b3 	beq.w	8014362 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	895b      	ldrh	r3, [r3, #10]
 8014200:	2b13      	cmp	r3, #19
 8014202:	d806      	bhi.n	8014212 <ip4_frag+0xc6>
 8014204:	4b5a      	ldr	r3, [pc, #360]	; (8014370 <ip4_frag+0x224>)
 8014206:	f44f 7242 	mov.w	r2, #776	; 0x308
 801420a:	495d      	ldr	r1, [pc, #372]	; (8014380 <ip4_frag+0x234>)
 801420c:	485a      	ldr	r0, [pc, #360]	; (8014378 <ip4_frag+0x22c>)
 801420e:	f000 fc23 	bl	8014a58 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014212:	6a3b      	ldr	r3, [r7, #32]
 8014214:	685b      	ldr	r3, [r3, #4]
 8014216:	2214      	movs	r2, #20
 8014218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801421a:	4618      	mov	r0, r3
 801421c:	f000 fd4d 	bl	8014cba <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014220:	6a3b      	ldr	r3, [r7, #32]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8014226:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014228:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801422a:	e04f      	b.n	80142cc <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	895a      	ldrh	r2, [r3, #10]
 8014230:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014232:	1ad3      	subs	r3, r2, r3
 8014234:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014236:	8b7a      	ldrh	r2, [r7, #26]
 8014238:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801423a:	4293      	cmp	r3, r2
 801423c:	bf28      	it	cs
 801423e:	4613      	movcs	r3, r2
 8014240:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014242:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014244:	2b00      	cmp	r3, #0
 8014246:	d105      	bne.n	8014254 <ip4_frag+0x108>
        poff = 0;
 8014248:	2300      	movs	r3, #0
 801424a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	60fb      	str	r3, [r7, #12]
        continue;
 8014252:	e03b      	b.n	80142cc <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014254:	f7ff ff22 	bl	801409c <ip_frag_alloc_pbuf_custom_ref>
 8014258:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d103      	bne.n	8014268 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 8014260:	6a38      	ldr	r0, [r7, #32]
 8014262:	f7f7 ff1b 	bl	800c09c <pbuf_free>
        goto memerr;
 8014266:	e07d      	b.n	8014364 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014268:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801426e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014270:	4413      	add	r3, r2
 8014272:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8014274:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014276:	9201      	str	r2, [sp, #4]
 8014278:	9300      	str	r3, [sp, #0]
 801427a:	4603      	mov	r3, r0
 801427c:	2202      	movs	r2, #2
 801427e:	2004      	movs	r0, #4
 8014280:	f7f7 fd2e 	bl	800bce0 <pbuf_alloced_custom>
 8014284:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8014286:	693b      	ldr	r3, [r7, #16]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d106      	bne.n	801429a <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 801428c:	6978      	ldr	r0, [r7, #20]
 801428e:	f7ff ff0d 	bl	80140ac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014292:	6a38      	ldr	r0, [r7, #32]
 8014294:	f7f7 ff02 	bl	800c09c <pbuf_free>
        goto memerr;
 8014298:	e064      	b.n	8014364 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801429a:	68f8      	ldr	r0, [r7, #12]
 801429c:	f7f7 ffae 	bl	800c1fc <pbuf_ref>
      pcr->original = p;
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	68fa      	ldr	r2, [r7, #12]
 80142a4:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80142a6:	697b      	ldr	r3, [r7, #20]
 80142a8:	4a36      	ldr	r2, [pc, #216]	; (8014384 <ip4_frag+0x238>)
 80142aa:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80142ac:	6939      	ldr	r1, [r7, #16]
 80142ae:	6a38      	ldr	r0, [r7, #32]
 80142b0:	f7f7 ffcc 	bl	800c24c <pbuf_cat>
      left_to_copy -= newpbuflen;
 80142b4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80142b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80142b8:	1ad3      	subs	r3, r2, r3
 80142ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80142bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d004      	beq.n	80142cc <ip4_frag+0x180>
        poff = 0;
 80142c2:	2300      	movs	r3, #0
 80142c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80142cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d1ac      	bne.n	801422c <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 80142d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80142d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80142d6:	4413      	add	r3, r2
 80142d8:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80142de:	f1a3 0213 	sub.w	r2, r3, #19
 80142e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80142e4:	429a      	cmp	r2, r3
 80142e6:	bfcc      	ite	gt
 80142e8:	2301      	movgt	r3, #1
 80142ea:	2300      	movle	r3, #0
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80142f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80142f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142f6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80142f8:	69fb      	ldr	r3, [r7, #28]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d103      	bne.n	8014306 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80142fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014300:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014304:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014306:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014308:	4618      	mov	r0, r3
 801430a:	f7f6 fcf1 	bl	800acf0 <lwip_htons>
 801430e:	4603      	mov	r3, r0
 8014310:	461a      	mov	r2, r3
 8014312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014314:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8014316:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014318:	3314      	adds	r3, #20
 801431a:	b29b      	uxth	r3, r3
 801431c:	4618      	mov	r0, r3
 801431e:	f7f6 fce7 	bl	800acf0 <lwip_htons>
 8014322:	4603      	mov	r3, r0
 8014324:	461a      	mov	r2, r3
 8014326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014328:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801432c:	2200      	movs	r2, #0
 801432e:	729a      	strb	r2, [r3, #10]
 8014330:	2200      	movs	r2, #0
 8014332:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	695b      	ldr	r3, [r3, #20]
 8014338:	687a      	ldr	r2, [r7, #4]
 801433a:	6a39      	ldr	r1, [r7, #32]
 801433c:	68b8      	ldr	r0, [r7, #8]
 801433e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014340:	6a38      	ldr	r0, [r7, #32]
 8014342:	f7f7 feab 	bl	800c09c <pbuf_free>
    left -= fragsize;
 8014346:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014348:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801434a:	1ad3      	subs	r3, r2, r3
 801434c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801434e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014350:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014352:	4413      	add	r3, r2
 8014354:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8014356:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014358:	2b00      	cmp	r3, #0
 801435a:	f47f af3e 	bne.w	80141da <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801435e:	2300      	movs	r3, #0
 8014360:	e002      	b.n	8014368 <ip4_frag+0x21c>
      goto memerr;
 8014362:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014368:	4618      	mov	r0, r3
 801436a:	3740      	adds	r7, #64	; 0x40
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	08017bb8 	.word	0x08017bb8
 8014374:	08017d44 	.word	0x08017d44
 8014378:	08017c00 	.word	0x08017c00
 801437c:	08017d6c 	.word	0x08017d6c
 8014380:	08017d88 	.word	0x08017d88
 8014384:	080140e5 	.word	0x080140e5

08014388 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b086      	sub	sp, #24
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
 8014390:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8014392:	230e      	movs	r3, #14
 8014394:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	895b      	ldrh	r3, [r3, #10]
 801439a:	2b0e      	cmp	r3, #14
 801439c:	d977      	bls.n	801448e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	685b      	ldr	r3, [r3, #4]
 80143a2:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	7b1a      	ldrb	r2, [r3, #12]
 80143a8:	7b5b      	ldrb	r3, [r3, #13]
 80143aa:	021b      	lsls	r3, r3, #8
 80143ac:	4313      	orrs	r3, r2
 80143ae:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	781b      	ldrb	r3, [r3, #0]
 80143b4:	f003 0301 	and.w	r3, r3, #1
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d023      	beq.n	8014404 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80143bc:	693b      	ldr	r3, [r7, #16]
 80143be:	781b      	ldrb	r3, [r3, #0]
 80143c0:	2b01      	cmp	r3, #1
 80143c2:	d10f      	bne.n	80143e4 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	785b      	ldrb	r3, [r3, #1]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d11b      	bne.n	8014404 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80143d0:	2b5e      	cmp	r3, #94	; 0x5e
 80143d2:	d117      	bne.n	8014404 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	7b5b      	ldrb	r3, [r3, #13]
 80143d8:	f043 0310 	orr.w	r3, r3, #16
 80143dc:	b2da      	uxtb	r2, r3
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	735a      	strb	r2, [r3, #13]
 80143e2:	e00f      	b.n	8014404 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	2206      	movs	r2, #6
 80143e8:	4931      	ldr	r1, [pc, #196]	; (80144b0 <ethernet_input+0x128>)
 80143ea:	4618      	mov	r0, r3
 80143ec:	f000 fb89 	bl	8014b02 <memcmp>
 80143f0:	4603      	mov	r3, r0
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d106      	bne.n	8014404 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	7b5b      	ldrb	r3, [r3, #13]
 80143fa:	f043 0308 	orr.w	r3, r3, #8
 80143fe:	b2da      	uxtb	r2, r3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014404:	89fb      	ldrh	r3, [r7, #14]
 8014406:	2b08      	cmp	r3, #8
 8014408:	d003      	beq.n	8014412 <ethernet_input+0x8a>
 801440a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801440e:	d01e      	beq.n	801444e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014410:	e046      	b.n	80144a0 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014418:	f003 0308 	and.w	r3, r3, #8
 801441c:	2b00      	cmp	r3, #0
 801441e:	d038      	beq.n	8014492 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	895b      	ldrh	r3, [r3, #10]
 8014424:	461a      	mov	r2, r3
 8014426:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801442a:	429a      	cmp	r2, r3
 801442c:	db33      	blt.n	8014496 <ethernet_input+0x10e>
 801442e:	8afb      	ldrh	r3, [r7, #22]
 8014430:	425b      	negs	r3, r3
 8014432:	b29b      	uxth	r3, r3
 8014434:	b21b      	sxth	r3, r3
 8014436:	4619      	mov	r1, r3
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f7f7 fe0b 	bl	800c054 <pbuf_header>
 801443e:	4603      	mov	r3, r0
 8014440:	2b00      	cmp	r3, #0
 8014442:	d128      	bne.n	8014496 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8014444:	6839      	ldr	r1, [r7, #0]
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f7fe ff80 	bl	801334c <ip4_input>
      break;
 801444c:	e01d      	b.n	801448a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014454:	f003 0308 	and.w	r3, r3, #8
 8014458:	2b00      	cmp	r3, #0
 801445a:	d01e      	beq.n	801449a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	895b      	ldrh	r3, [r3, #10]
 8014460:	461a      	mov	r2, r3
 8014462:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014466:	429a      	cmp	r2, r3
 8014468:	db19      	blt.n	801449e <ethernet_input+0x116>
 801446a:	8afb      	ldrh	r3, [r7, #22]
 801446c:	425b      	negs	r3, r3
 801446e:	b29b      	uxth	r3, r3
 8014470:	b21b      	sxth	r3, r3
 8014472:	4619      	mov	r1, r3
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f7f7 fded 	bl	800c054 <pbuf_header>
 801447a:	4603      	mov	r3, r0
 801447c:	2b00      	cmp	r3, #0
 801447e:	d10e      	bne.n	801449e <ethernet_input+0x116>
        etharp_input(p, netif);
 8014480:	6839      	ldr	r1, [r7, #0]
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f7fe f950 	bl	8012728 <etharp_input>
      break;
 8014488:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801448a:	2300      	movs	r3, #0
 801448c:	e00c      	b.n	80144a8 <ethernet_input+0x120>
    goto free_and_return;
 801448e:	bf00      	nop
 8014490:	e006      	b.n	80144a0 <ethernet_input+0x118>
        goto free_and_return;
 8014492:	bf00      	nop
 8014494:	e004      	b.n	80144a0 <ethernet_input+0x118>
        goto free_and_return;
 8014496:	bf00      	nop
 8014498:	e002      	b.n	80144a0 <ethernet_input+0x118>
        goto free_and_return;
 801449a:	bf00      	nop
 801449c:	e000      	b.n	80144a0 <ethernet_input+0x118>
        goto free_and_return;
 801449e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80144a0:	6878      	ldr	r0, [r7, #4]
 80144a2:	f7f7 fdfb 	bl	800c09c <pbuf_free>
  return ERR_OK;
 80144a6:	2300      	movs	r3, #0
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3718      	adds	r7, #24
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	08017f8c 	.word	0x08017f8c

080144b4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b086      	sub	sp, #24
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	607a      	str	r2, [r7, #4]
 80144c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80144c2:	8c3b      	ldrh	r3, [r7, #32]
 80144c4:	4618      	mov	r0, r3
 80144c6:	f7f6 fc13 	bl	800acf0 <lwip_htons>
 80144ca:	4603      	mov	r3, r0
 80144cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80144ce:	210e      	movs	r1, #14
 80144d0:	68b8      	ldr	r0, [r7, #8]
 80144d2:	f7f7 fdbf 	bl	800c054 <pbuf_header>
 80144d6:	4603      	mov	r3, r0
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d125      	bne.n	8014528 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	8afa      	ldrh	r2, [r7, #22]
 80144e6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	2206      	movs	r2, #6
 80144ec:	6839      	ldr	r1, [r7, #0]
 80144ee:	4618      	mov	r0, r3
 80144f0:	f000 fbe3 	bl	8014cba <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	3306      	adds	r3, #6
 80144f8:	2206      	movs	r2, #6
 80144fa:	6879      	ldr	r1, [r7, #4]
 80144fc:	4618      	mov	r0, r3
 80144fe:	f000 fbdc 	bl	8014cba <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014508:	2b06      	cmp	r3, #6
 801450a:	d006      	beq.n	801451a <ethernet_output+0x66>
 801450c:	4b0a      	ldr	r3, [pc, #40]	; (8014538 <ethernet_output+0x84>)
 801450e:	f240 122b 	movw	r2, #299	; 0x12b
 8014512:	490a      	ldr	r1, [pc, #40]	; (801453c <ethernet_output+0x88>)
 8014514:	480a      	ldr	r0, [pc, #40]	; (8014540 <ethernet_output+0x8c>)
 8014516:	f000 fa9f 	bl	8014a58 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	699b      	ldr	r3, [r3, #24]
 801451e:	68b9      	ldr	r1, [r7, #8]
 8014520:	68f8      	ldr	r0, [r7, #12]
 8014522:	4798      	blx	r3
 8014524:	4603      	mov	r3, r0
 8014526:	e002      	b.n	801452e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014528:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801452a:	f06f 0301 	mvn.w	r3, #1
}
 801452e:	4618      	mov	r0, r3
 8014530:	3718      	adds	r7, #24
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	08017da8 	.word	0x08017da8
 801453c:	08017de0 	.word	0x08017de0
 8014540:	08017e14 	.word	0x08017e14

08014544 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b082      	sub	sp, #8
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
 801454c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	2200      	movs	r2, #0
 8014552:	2104      	movs	r1, #4
 8014554:	4618      	mov	r0, r3
 8014556:	f7f0 ff83 	bl	8005460 <osMessageQueueNew>
 801455a:	4602      	mov	r2, r0
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d102      	bne.n	801456e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8014568:	f04f 33ff 	mov.w	r3, #4294967295
 801456c:	e000      	b.n	8014570 <sys_mbox_new+0x2c>

  return ERR_OK;
 801456e:	2300      	movs	r3, #0
}
 8014570:	4618      	mov	r0, r3
 8014572:	3708      	adds	r7, #8
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	4618      	mov	r0, r3
 8014586:	f7f1 f8d7 	bl	8005738 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	4618      	mov	r0, r3
 8014590:	f7f1 f904 	bl	800579c <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014594:	bf00      	nop
 8014596:	3708      	adds	r7, #8
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}

0801459c <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
 80145a6:	bf00      	nop
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6818      	ldr	r0, [r3, #0]
 80145ac:	4639      	mov	r1, r7
 80145ae:	f04f 33ff 	mov.w	r3, #4294967295
 80145b2:	2200      	movs	r2, #0
 80145b4:	f7f0 ffda 	bl	800556c <osMessageQueuePut>
 80145b8:	4603      	mov	r3, r0
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d1f4      	bne.n	80145a8 <sys_mbox_post+0xc>
#endif
}
 80145be:	bf00      	nop
 80145c0:	bf00      	nop
 80145c2:	3708      	adds	r7, #8
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}

080145c8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b084      	sub	sp, #16
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	6818      	ldr	r0, [r3, #0]
 80145d6:	4639      	mov	r1, r7
 80145d8:	2300      	movs	r3, #0
 80145da:	2200      	movs	r2, #0
 80145dc:	f7f0 ffc6 	bl	800556c <osMessageQueuePut>
 80145e0:	4603      	mov	r3, r0
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d102      	bne.n	80145ec <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80145e6:	2300      	movs	r3, #0
 80145e8:	73fb      	strb	r3, [r7, #15]
 80145ea:	e001      	b.n	80145f0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80145ec:	23ff      	movs	r3, #255	; 0xff
 80145ee:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80145f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3710      	adds	r7, #16
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}

080145fc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b086      	sub	sp, #24
 8014600:	af00      	add	r7, sp, #0
 8014602:	60f8      	str	r0, [r7, #12]
 8014604:	60b9      	str	r1, [r7, #8]
 8014606:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8014608:	f7f0 fb52 	bl	8004cb0 <osKernelGetTickCount>
 801460c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d013      	beq.n	801463c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	6818      	ldr	r0, [r3, #0]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2200      	movs	r2, #0
 801461c:	68b9      	ldr	r1, [r7, #8]
 801461e:	f7f1 f819 	bl	8005654 <osMessageQueueGet>
 8014622:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d105      	bne.n	8014636 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801462a:	f7f0 fb41 	bl	8004cb0 <osKernelGetTickCount>
 801462e:	4602      	mov	r2, r0
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	1ad3      	subs	r3, r2, r3
 8014634:	e00f      	b.n	8014656 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014636:	f04f 33ff 	mov.w	r3, #4294967295
 801463a:	e00c      	b.n	8014656 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	6818      	ldr	r0, [r3, #0]
 8014640:	f04f 33ff 	mov.w	r3, #4294967295
 8014644:	2200      	movs	r2, #0
 8014646:	68b9      	ldr	r1, [r7, #8]
 8014648:	f7f1 f804 	bl	8005654 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801464c:	f7f0 fb30 	bl	8004cb0 <osKernelGetTickCount>
 8014650:	4602      	mov	r2, r0
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8014656:	4618      	mov	r0, r3
 8014658:	3718      	adds	r7, #24
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}

0801465e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801465e:	b580      	push	{r7, lr}
 8014660:	b082      	sub	sp, #8
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]
 8014666:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	6818      	ldr	r0, [r3, #0]
 801466c:	2300      	movs	r3, #0
 801466e:	2200      	movs	r2, #0
 8014670:	6839      	ldr	r1, [r7, #0]
 8014672:	f7f0 ffef 	bl	8005654 <osMessageQueueGet>
 8014676:	4603      	mov	r3, r0
 8014678:	2b00      	cmp	r3, #0
 801467a:	d101      	bne.n	8014680 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801467c:	2300      	movs	r3, #0
 801467e:	e001      	b.n	8014684 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8014680:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8014684:	4618      	mov	r0, r3
 8014686:	3708      	adds	r7, #8
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801468c:	b480      	push	{r7}
 801468e:	b083      	sub	sp, #12
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d101      	bne.n	80146a0 <sys_mbox_valid+0x14>
    return 0;
 801469c:	2300      	movs	r3, #0
 801469e:	e000      	b.n	80146a2 <sys_mbox_valid+0x16>
  else
    return 1;
 80146a0:	2301      	movs	r3, #1
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	370c      	adds	r7, #12
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bc80      	pop	{r7}
 80146aa:	4770      	bx	lr

080146ac <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80146ac:	b480      	push	{r7}
 80146ae:	b083      	sub	sp, #12
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2200      	movs	r2, #0
 80146b8:	601a      	str	r2, [r3, #0]
}
 80146ba:	bf00      	nop
 80146bc:	370c      	adds	r7, #12
 80146be:	46bd      	mov	sp, r7
 80146c0:	bc80      	pop	{r7}
 80146c2:	4770      	bx	lr

080146c4 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	460b      	mov	r3, r1
 80146ce:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80146d0:	78fb      	ldrb	r3, [r7, #3]
 80146d2:	2200      	movs	r2, #0
 80146d4:	4619      	mov	r1, r3
 80146d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80146da:	f7f0 fd31 	bl	8005140 <osSemaphoreNew>
 80146de:	4602      	mov	r2, r0
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d102      	bne.n	80146f2 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80146ec:	f04f 33ff 	mov.w	r3, #4294967295
 80146f0:	e009      	b.n	8014706 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80146f2:	78fb      	ldrb	r3, [r7, #3]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d105      	bne.n	8014704 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	2100      	movs	r1, #0
 80146fe:	4618      	mov	r0, r3
 8014700:	f7f0 fdba 	bl	8005278 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8014704:	2300      	movs	r3, #0
}
 8014706:	4618      	mov	r0, r3
 8014708:	3708      	adds	r7, #8
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}

0801470e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801470e:	b580      	push	{r7, lr}
 8014710:	b084      	sub	sp, #16
 8014712:	af00      	add	r7, sp, #0
 8014714:	6078      	str	r0, [r7, #4]
 8014716:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8014718:	f7f0 faca 	bl	8004cb0 <osKernelGetTickCount>
 801471c:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d011      	beq.n	8014748 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	6839      	ldr	r1, [r7, #0]
 801472a:	4618      	mov	r0, r3
 801472c:	f7f0 fda4 	bl	8005278 <osSemaphoreAcquire>
 8014730:	4603      	mov	r3, r0
 8014732:	2b00      	cmp	r3, #0
 8014734:	d105      	bne.n	8014742 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8014736:	f7f0 fabb 	bl	8004cb0 <osKernelGetTickCount>
 801473a:	4602      	mov	r2, r0
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	1ad3      	subs	r3, r2, r3
 8014740:	e012      	b.n	8014768 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014742:	f04f 33ff 	mov.w	r3, #4294967295
 8014746:	e00f      	b.n	8014768 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8014748:	bf00      	nop
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	f04f 31ff 	mov.w	r1, #4294967295
 8014752:	4618      	mov	r0, r3
 8014754:	f7f0 fd90 	bl	8005278 <osSemaphoreAcquire>
 8014758:	4603      	mov	r3, r0
 801475a:	2b00      	cmp	r3, #0
 801475c:	d1f5      	bne.n	801474a <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801475e:	f7f0 faa7 	bl	8004cb0 <osKernelGetTickCount>
 8014762:	4602      	mov	r2, r0
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8014768:	4618      	mov	r0, r3
 801476a:	3710      	adds	r7, #16
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}

08014770 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b082      	sub	sp, #8
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	4618      	mov	r0, r3
 801477e:	f7f0 fde1 	bl	8005344 <osSemaphoreRelease>
}
 8014782:	bf00      	nop
 8014784:	3708      	adds	r7, #8
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}

0801478a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801478a:	b580      	push	{r7, lr}
 801478c:	b082      	sub	sp, #8
 801478e:	af00      	add	r7, sp, #0
 8014790:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	4618      	mov	r0, r3
 8014798:	f7f0 fe2c 	bl	80053f4 <osSemaphoreDelete>
}
 801479c:	bf00      	nop
 801479e:	3708      	adds	r7, #8
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80147a4:	b480      	push	{r7}
 80147a6:	b083      	sub	sp, #12
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d101      	bne.n	80147b8 <sys_sem_valid+0x14>
    return 0;
 80147b4:	2300      	movs	r3, #0
 80147b6:	e000      	b.n	80147ba <sys_sem_valid+0x16>
  else
    return 1;
 80147b8:	2301      	movs	r3, #1
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	370c      	adds	r7, #12
 80147be:	46bd      	mov	sp, r7
 80147c0:	bc80      	pop	{r7}
 80147c2:	4770      	bx	lr

080147c4 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80147c4:	b480      	push	{r7}
 80147c6:	b083      	sub	sp, #12
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	2200      	movs	r2, #0
 80147d0:	601a      	str	r2, [r3, #0]
}
 80147d2:	bf00      	nop
 80147d4:	370c      	adds	r7, #12
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bc80      	pop	{r7}
 80147da:	4770      	bx	lr

080147dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80147e0:	2000      	movs	r0, #0
 80147e2:	f7f0 fb65 	bl	8004eb0 <osMutexNew>
 80147e6:	4603      	mov	r3, r0
 80147e8:	4a01      	ldr	r2, [pc, #4]	; (80147f0 <sys_init+0x14>)
 80147ea:	6013      	str	r3, [r2, #0]
#endif
}
 80147ec:	bf00      	nop
 80147ee:	bd80      	pop	{r7, pc}
 80147f0:	2000bb70 	.word	0x2000bb70

080147f4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b082      	sub	sp, #8
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80147fc:	2000      	movs	r0, #0
 80147fe:	f7f0 fb57 	bl	8004eb0 <osMutexNew>
 8014802:	4602      	mov	r2, r0
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d102      	bne.n	8014816 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014810:	f04f 33ff 	mov.w	r3, #4294967295
 8014814:	e000      	b.n	8014818 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014816:	2300      	movs	r3, #0
}
 8014818:	4618      	mov	r0, r3
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}

08014820 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	f04f 31ff 	mov.w	r1, #4294967295
 8014830:	4618      	mov	r0, r3
 8014832:	f7f0 fbd7 	bl	8004fe4 <osMutexAcquire>
#endif
}
 8014836:	bf00      	nop
 8014838:	3708      	adds	r7, #8
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}

0801483e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801483e:	b580      	push	{r7, lr}
 8014840:	b082      	sub	sp, #8
 8014842:	af00      	add	r7, sp, #0
 8014844:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	4618      	mov	r0, r3
 801484c:	f7f0 fc28 	bl	80050a0 <osMutexRelease>
}
 8014850:	bf00      	nop
 8014852:	3708      	adds	r7, #8
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b08e      	sub	sp, #56	; 0x38
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	607a      	str	r2, [r7, #4]
 8014864:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8014866:	f107 0314 	add.w	r3, r7, #20
 801486a:	2224      	movs	r2, #36	; 0x24
 801486c:	2100      	movs	r1, #0
 801486e:	4618      	mov	r0, r3
 8014870:	f000 f957 	bl	8014b22 <memset>
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	617b      	str	r3, [r7, #20]
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	62bb      	str	r3, [r7, #40]	; 0x28
 801487c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801487e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8014880:	f107 0314 	add.w	r3, r7, #20
 8014884:	461a      	mov	r2, r3
 8014886:	6879      	ldr	r1, [r7, #4]
 8014888:	68b8      	ldr	r0, [r7, #8]
 801488a:	f7f0 fa39 	bl	8004d00 <osThreadNew>
 801488e:	4603      	mov	r3, r0
#endif
}
 8014890:	4618      	mov	r0, r3
 8014892:	3738      	adds	r7, #56	; 0x38
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801489c:	4b04      	ldr	r3, [pc, #16]	; (80148b0 <sys_arch_protect+0x18>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	f04f 31ff 	mov.w	r1, #4294967295
 80148a4:	4618      	mov	r0, r3
 80148a6:	f7f0 fb9d 	bl	8004fe4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80148aa:	2301      	movs	r3, #1
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	2000bb70 	.word	0x2000bb70

080148b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80148bc:	4b04      	ldr	r3, [pc, #16]	; (80148d0 <sys_arch_unprotect+0x1c>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7f0 fbed 	bl	80050a0 <osMutexRelease>
}
 80148c6:	bf00      	nop
 80148c8:	3708      	adds	r7, #8
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	2000bb70 	.word	0x2000bb70

080148d4 <std>:
 80148d4:	2300      	movs	r3, #0
 80148d6:	b510      	push	{r4, lr}
 80148d8:	4604      	mov	r4, r0
 80148da:	e9c0 3300 	strd	r3, r3, [r0]
 80148de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148e2:	6083      	str	r3, [r0, #8]
 80148e4:	8181      	strh	r1, [r0, #12]
 80148e6:	6643      	str	r3, [r0, #100]	; 0x64
 80148e8:	81c2      	strh	r2, [r0, #14]
 80148ea:	6183      	str	r3, [r0, #24]
 80148ec:	4619      	mov	r1, r3
 80148ee:	2208      	movs	r2, #8
 80148f0:	305c      	adds	r0, #92	; 0x5c
 80148f2:	f000 f916 	bl	8014b22 <memset>
 80148f6:	4b0d      	ldr	r3, [pc, #52]	; (801492c <std+0x58>)
 80148f8:	6224      	str	r4, [r4, #32]
 80148fa:	6263      	str	r3, [r4, #36]	; 0x24
 80148fc:	4b0c      	ldr	r3, [pc, #48]	; (8014930 <std+0x5c>)
 80148fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8014900:	4b0c      	ldr	r3, [pc, #48]	; (8014934 <std+0x60>)
 8014902:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014904:	4b0c      	ldr	r3, [pc, #48]	; (8014938 <std+0x64>)
 8014906:	6323      	str	r3, [r4, #48]	; 0x30
 8014908:	4b0c      	ldr	r3, [pc, #48]	; (801493c <std+0x68>)
 801490a:	429c      	cmp	r4, r3
 801490c:	d006      	beq.n	801491c <std+0x48>
 801490e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014912:	4294      	cmp	r4, r2
 8014914:	d002      	beq.n	801491c <std+0x48>
 8014916:	33d0      	adds	r3, #208	; 0xd0
 8014918:	429c      	cmp	r4, r3
 801491a:	d105      	bne.n	8014928 <std+0x54>
 801491c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014924:	f000 b9c6 	b.w	8014cb4 <__retarget_lock_init_recursive>
 8014928:	bd10      	pop	{r4, pc}
 801492a:	bf00      	nop
 801492c:	08014a7d 	.word	0x08014a7d
 8014930:	08014a9f 	.word	0x08014a9f
 8014934:	08014ad7 	.word	0x08014ad7
 8014938:	08014afb 	.word	0x08014afb
 801493c:	2000bb74 	.word	0x2000bb74

08014940 <stdio_exit_handler>:
 8014940:	4a02      	ldr	r2, [pc, #8]	; (801494c <stdio_exit_handler+0xc>)
 8014942:	4903      	ldr	r1, [pc, #12]	; (8014950 <stdio_exit_handler+0x10>)
 8014944:	4803      	ldr	r0, [pc, #12]	; (8014954 <stdio_exit_handler+0x14>)
 8014946:	f000 b869 	b.w	8014a1c <_fwalk_sglue>
 801494a:	bf00      	nop
 801494c:	20000024 	.word	0x20000024
 8014950:	08015571 	.word	0x08015571
 8014954:	20000030 	.word	0x20000030

08014958 <cleanup_stdio>:
 8014958:	6841      	ldr	r1, [r0, #4]
 801495a:	4b0c      	ldr	r3, [pc, #48]	; (801498c <cleanup_stdio+0x34>)
 801495c:	b510      	push	{r4, lr}
 801495e:	4299      	cmp	r1, r3
 8014960:	4604      	mov	r4, r0
 8014962:	d001      	beq.n	8014968 <cleanup_stdio+0x10>
 8014964:	f000 fe04 	bl	8015570 <_fflush_r>
 8014968:	68a1      	ldr	r1, [r4, #8]
 801496a:	4b09      	ldr	r3, [pc, #36]	; (8014990 <cleanup_stdio+0x38>)
 801496c:	4299      	cmp	r1, r3
 801496e:	d002      	beq.n	8014976 <cleanup_stdio+0x1e>
 8014970:	4620      	mov	r0, r4
 8014972:	f000 fdfd 	bl	8015570 <_fflush_r>
 8014976:	68e1      	ldr	r1, [r4, #12]
 8014978:	4b06      	ldr	r3, [pc, #24]	; (8014994 <cleanup_stdio+0x3c>)
 801497a:	4299      	cmp	r1, r3
 801497c:	d004      	beq.n	8014988 <cleanup_stdio+0x30>
 801497e:	4620      	mov	r0, r4
 8014980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014984:	f000 bdf4 	b.w	8015570 <_fflush_r>
 8014988:	bd10      	pop	{r4, pc}
 801498a:	bf00      	nop
 801498c:	2000bb74 	.word	0x2000bb74
 8014990:	2000bbdc 	.word	0x2000bbdc
 8014994:	2000bc44 	.word	0x2000bc44

08014998 <global_stdio_init.part.0>:
 8014998:	b510      	push	{r4, lr}
 801499a:	4b0b      	ldr	r3, [pc, #44]	; (80149c8 <global_stdio_init.part.0+0x30>)
 801499c:	4c0b      	ldr	r4, [pc, #44]	; (80149cc <global_stdio_init.part.0+0x34>)
 801499e:	4a0c      	ldr	r2, [pc, #48]	; (80149d0 <global_stdio_init.part.0+0x38>)
 80149a0:	4620      	mov	r0, r4
 80149a2:	601a      	str	r2, [r3, #0]
 80149a4:	2104      	movs	r1, #4
 80149a6:	2200      	movs	r2, #0
 80149a8:	f7ff ff94 	bl	80148d4 <std>
 80149ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80149b0:	2201      	movs	r2, #1
 80149b2:	2109      	movs	r1, #9
 80149b4:	f7ff ff8e 	bl	80148d4 <std>
 80149b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80149bc:	2202      	movs	r2, #2
 80149be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149c2:	2112      	movs	r1, #18
 80149c4:	f7ff bf86 	b.w	80148d4 <std>
 80149c8:	2000bcac 	.word	0x2000bcac
 80149cc:	2000bb74 	.word	0x2000bb74
 80149d0:	08014941 	.word	0x08014941

080149d4 <__sfp_lock_acquire>:
 80149d4:	4801      	ldr	r0, [pc, #4]	; (80149dc <__sfp_lock_acquire+0x8>)
 80149d6:	f000 b96e 	b.w	8014cb6 <__retarget_lock_acquire_recursive>
 80149da:	bf00      	nop
 80149dc:	2000bcb5 	.word	0x2000bcb5

080149e0 <__sfp_lock_release>:
 80149e0:	4801      	ldr	r0, [pc, #4]	; (80149e8 <__sfp_lock_release+0x8>)
 80149e2:	f000 b969 	b.w	8014cb8 <__retarget_lock_release_recursive>
 80149e6:	bf00      	nop
 80149e8:	2000bcb5 	.word	0x2000bcb5

080149ec <__sinit>:
 80149ec:	b510      	push	{r4, lr}
 80149ee:	4604      	mov	r4, r0
 80149f0:	f7ff fff0 	bl	80149d4 <__sfp_lock_acquire>
 80149f4:	6a23      	ldr	r3, [r4, #32]
 80149f6:	b11b      	cbz	r3, 8014a00 <__sinit+0x14>
 80149f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149fc:	f7ff bff0 	b.w	80149e0 <__sfp_lock_release>
 8014a00:	4b04      	ldr	r3, [pc, #16]	; (8014a14 <__sinit+0x28>)
 8014a02:	6223      	str	r3, [r4, #32]
 8014a04:	4b04      	ldr	r3, [pc, #16]	; (8014a18 <__sinit+0x2c>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d1f5      	bne.n	80149f8 <__sinit+0xc>
 8014a0c:	f7ff ffc4 	bl	8014998 <global_stdio_init.part.0>
 8014a10:	e7f2      	b.n	80149f8 <__sinit+0xc>
 8014a12:	bf00      	nop
 8014a14:	08014959 	.word	0x08014959
 8014a18:	2000bcac 	.word	0x2000bcac

08014a1c <_fwalk_sglue>:
 8014a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a20:	4607      	mov	r7, r0
 8014a22:	4688      	mov	r8, r1
 8014a24:	4614      	mov	r4, r2
 8014a26:	2600      	movs	r6, #0
 8014a28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a2c:	f1b9 0901 	subs.w	r9, r9, #1
 8014a30:	d505      	bpl.n	8014a3e <_fwalk_sglue+0x22>
 8014a32:	6824      	ldr	r4, [r4, #0]
 8014a34:	2c00      	cmp	r4, #0
 8014a36:	d1f7      	bne.n	8014a28 <_fwalk_sglue+0xc>
 8014a38:	4630      	mov	r0, r6
 8014a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a3e:	89ab      	ldrh	r3, [r5, #12]
 8014a40:	2b01      	cmp	r3, #1
 8014a42:	d907      	bls.n	8014a54 <_fwalk_sglue+0x38>
 8014a44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014a48:	3301      	adds	r3, #1
 8014a4a:	d003      	beq.n	8014a54 <_fwalk_sglue+0x38>
 8014a4c:	4629      	mov	r1, r5
 8014a4e:	4638      	mov	r0, r7
 8014a50:	47c0      	blx	r8
 8014a52:	4306      	orrs	r6, r0
 8014a54:	3568      	adds	r5, #104	; 0x68
 8014a56:	e7e9      	b.n	8014a2c <_fwalk_sglue+0x10>

08014a58 <iprintf>:
 8014a58:	b40f      	push	{r0, r1, r2, r3}
 8014a5a:	b507      	push	{r0, r1, r2, lr}
 8014a5c:	4906      	ldr	r1, [pc, #24]	; (8014a78 <iprintf+0x20>)
 8014a5e:	ab04      	add	r3, sp, #16
 8014a60:	6808      	ldr	r0, [r1, #0]
 8014a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a66:	6881      	ldr	r1, [r0, #8]
 8014a68:	9301      	str	r3, [sp, #4]
 8014a6a:	f000 fa51 	bl	8014f10 <_vfiprintf_r>
 8014a6e:	b003      	add	sp, #12
 8014a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a74:	b004      	add	sp, #16
 8014a76:	4770      	bx	lr
 8014a78:	2000007c 	.word	0x2000007c

08014a7c <__sread>:
 8014a7c:	b510      	push	{r4, lr}
 8014a7e:	460c      	mov	r4, r1
 8014a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a84:	f000 f8ce 	bl	8014c24 <_read_r>
 8014a88:	2800      	cmp	r0, #0
 8014a8a:	bfab      	itete	ge
 8014a8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8014a90:	181b      	addge	r3, r3, r0
 8014a92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014a96:	bfac      	ite	ge
 8014a98:	6563      	strge	r3, [r4, #84]	; 0x54
 8014a9a:	81a3      	strhlt	r3, [r4, #12]
 8014a9c:	bd10      	pop	{r4, pc}

08014a9e <__swrite>:
 8014a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014aa2:	461f      	mov	r7, r3
 8014aa4:	898b      	ldrh	r3, [r1, #12]
 8014aa6:	4605      	mov	r5, r0
 8014aa8:	05db      	lsls	r3, r3, #23
 8014aaa:	460c      	mov	r4, r1
 8014aac:	4616      	mov	r6, r2
 8014aae:	d505      	bpl.n	8014abc <__swrite+0x1e>
 8014ab0:	2302      	movs	r3, #2
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ab8:	f000 f8a2 	bl	8014c00 <_lseek_r>
 8014abc:	89a3      	ldrh	r3, [r4, #12]
 8014abe:	4632      	mov	r2, r6
 8014ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014ac4:	81a3      	strh	r3, [r4, #12]
 8014ac6:	4628      	mov	r0, r5
 8014ac8:	463b      	mov	r3, r7
 8014aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ad2:	f000 b8b9 	b.w	8014c48 <_write_r>

08014ad6 <__sseek>:
 8014ad6:	b510      	push	{r4, lr}
 8014ad8:	460c      	mov	r4, r1
 8014ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ade:	f000 f88f 	bl	8014c00 <_lseek_r>
 8014ae2:	1c43      	adds	r3, r0, #1
 8014ae4:	89a3      	ldrh	r3, [r4, #12]
 8014ae6:	bf15      	itete	ne
 8014ae8:	6560      	strne	r0, [r4, #84]	; 0x54
 8014aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014af2:	81a3      	strheq	r3, [r4, #12]
 8014af4:	bf18      	it	ne
 8014af6:	81a3      	strhne	r3, [r4, #12]
 8014af8:	bd10      	pop	{r4, pc}

08014afa <__sclose>:
 8014afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014afe:	f000 b819 	b.w	8014b34 <_close_r>

08014b02 <memcmp>:
 8014b02:	b510      	push	{r4, lr}
 8014b04:	3901      	subs	r1, #1
 8014b06:	4402      	add	r2, r0
 8014b08:	4290      	cmp	r0, r2
 8014b0a:	d101      	bne.n	8014b10 <memcmp+0xe>
 8014b0c:	2000      	movs	r0, #0
 8014b0e:	e005      	b.n	8014b1c <memcmp+0x1a>
 8014b10:	7803      	ldrb	r3, [r0, #0]
 8014b12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014b16:	42a3      	cmp	r3, r4
 8014b18:	d001      	beq.n	8014b1e <memcmp+0x1c>
 8014b1a:	1b18      	subs	r0, r3, r4
 8014b1c:	bd10      	pop	{r4, pc}
 8014b1e:	3001      	adds	r0, #1
 8014b20:	e7f2      	b.n	8014b08 <memcmp+0x6>

08014b22 <memset>:
 8014b22:	4603      	mov	r3, r0
 8014b24:	4402      	add	r2, r0
 8014b26:	4293      	cmp	r3, r2
 8014b28:	d100      	bne.n	8014b2c <memset+0xa>
 8014b2a:	4770      	bx	lr
 8014b2c:	f803 1b01 	strb.w	r1, [r3], #1
 8014b30:	e7f9      	b.n	8014b26 <memset+0x4>
	...

08014b34 <_close_r>:
 8014b34:	b538      	push	{r3, r4, r5, lr}
 8014b36:	2300      	movs	r3, #0
 8014b38:	4d05      	ldr	r5, [pc, #20]	; (8014b50 <_close_r+0x1c>)
 8014b3a:	4604      	mov	r4, r0
 8014b3c:	4608      	mov	r0, r1
 8014b3e:	602b      	str	r3, [r5, #0]
 8014b40:	f7ec f919 	bl	8000d76 <_close>
 8014b44:	1c43      	adds	r3, r0, #1
 8014b46:	d102      	bne.n	8014b4e <_close_r+0x1a>
 8014b48:	682b      	ldr	r3, [r5, #0]
 8014b4a:	b103      	cbz	r3, 8014b4e <_close_r+0x1a>
 8014b4c:	6023      	str	r3, [r4, #0]
 8014b4e:	bd38      	pop	{r3, r4, r5, pc}
 8014b50:	2000bcb0 	.word	0x2000bcb0

08014b54 <_reclaim_reent>:
 8014b54:	4b29      	ldr	r3, [pc, #164]	; (8014bfc <_reclaim_reent+0xa8>)
 8014b56:	b570      	push	{r4, r5, r6, lr}
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	4283      	cmp	r3, r0
 8014b5e:	d04b      	beq.n	8014bf8 <_reclaim_reent+0xa4>
 8014b60:	69c3      	ldr	r3, [r0, #28]
 8014b62:	b143      	cbz	r3, 8014b76 <_reclaim_reent+0x22>
 8014b64:	68db      	ldr	r3, [r3, #12]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d144      	bne.n	8014bf4 <_reclaim_reent+0xa0>
 8014b6a:	69e3      	ldr	r3, [r4, #28]
 8014b6c:	6819      	ldr	r1, [r3, #0]
 8014b6e:	b111      	cbz	r1, 8014b76 <_reclaim_reent+0x22>
 8014b70:	4620      	mov	r0, r4
 8014b72:	f000 f8b1 	bl	8014cd8 <_free_r>
 8014b76:	6961      	ldr	r1, [r4, #20]
 8014b78:	b111      	cbz	r1, 8014b80 <_reclaim_reent+0x2c>
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	f000 f8ac 	bl	8014cd8 <_free_r>
 8014b80:	69e1      	ldr	r1, [r4, #28]
 8014b82:	b111      	cbz	r1, 8014b8a <_reclaim_reent+0x36>
 8014b84:	4620      	mov	r0, r4
 8014b86:	f000 f8a7 	bl	8014cd8 <_free_r>
 8014b8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014b8c:	b111      	cbz	r1, 8014b94 <_reclaim_reent+0x40>
 8014b8e:	4620      	mov	r0, r4
 8014b90:	f000 f8a2 	bl	8014cd8 <_free_r>
 8014b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b96:	b111      	cbz	r1, 8014b9e <_reclaim_reent+0x4a>
 8014b98:	4620      	mov	r0, r4
 8014b9a:	f000 f89d 	bl	8014cd8 <_free_r>
 8014b9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014ba0:	b111      	cbz	r1, 8014ba8 <_reclaim_reent+0x54>
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	f000 f898 	bl	8014cd8 <_free_r>
 8014ba8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014baa:	b111      	cbz	r1, 8014bb2 <_reclaim_reent+0x5e>
 8014bac:	4620      	mov	r0, r4
 8014bae:	f000 f893 	bl	8014cd8 <_free_r>
 8014bb2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014bb4:	b111      	cbz	r1, 8014bbc <_reclaim_reent+0x68>
 8014bb6:	4620      	mov	r0, r4
 8014bb8:	f000 f88e 	bl	8014cd8 <_free_r>
 8014bbc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014bbe:	b111      	cbz	r1, 8014bc6 <_reclaim_reent+0x72>
 8014bc0:	4620      	mov	r0, r4
 8014bc2:	f000 f889 	bl	8014cd8 <_free_r>
 8014bc6:	6a23      	ldr	r3, [r4, #32]
 8014bc8:	b1b3      	cbz	r3, 8014bf8 <_reclaim_reent+0xa4>
 8014bca:	4620      	mov	r0, r4
 8014bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bd0:	4718      	bx	r3
 8014bd2:	5949      	ldr	r1, [r1, r5]
 8014bd4:	b941      	cbnz	r1, 8014be8 <_reclaim_reent+0x94>
 8014bd6:	3504      	adds	r5, #4
 8014bd8:	69e3      	ldr	r3, [r4, #28]
 8014bda:	2d80      	cmp	r5, #128	; 0x80
 8014bdc:	68d9      	ldr	r1, [r3, #12]
 8014bde:	d1f8      	bne.n	8014bd2 <_reclaim_reent+0x7e>
 8014be0:	4620      	mov	r0, r4
 8014be2:	f000 f879 	bl	8014cd8 <_free_r>
 8014be6:	e7c0      	b.n	8014b6a <_reclaim_reent+0x16>
 8014be8:	680e      	ldr	r6, [r1, #0]
 8014bea:	4620      	mov	r0, r4
 8014bec:	f000 f874 	bl	8014cd8 <_free_r>
 8014bf0:	4631      	mov	r1, r6
 8014bf2:	e7ef      	b.n	8014bd4 <_reclaim_reent+0x80>
 8014bf4:	2500      	movs	r5, #0
 8014bf6:	e7ef      	b.n	8014bd8 <_reclaim_reent+0x84>
 8014bf8:	bd70      	pop	{r4, r5, r6, pc}
 8014bfa:	bf00      	nop
 8014bfc:	2000007c 	.word	0x2000007c

08014c00 <_lseek_r>:
 8014c00:	b538      	push	{r3, r4, r5, lr}
 8014c02:	4604      	mov	r4, r0
 8014c04:	4608      	mov	r0, r1
 8014c06:	4611      	mov	r1, r2
 8014c08:	2200      	movs	r2, #0
 8014c0a:	4d05      	ldr	r5, [pc, #20]	; (8014c20 <_lseek_r+0x20>)
 8014c0c:	602a      	str	r2, [r5, #0]
 8014c0e:	461a      	mov	r2, r3
 8014c10:	f7ec f8d5 	bl	8000dbe <_lseek>
 8014c14:	1c43      	adds	r3, r0, #1
 8014c16:	d102      	bne.n	8014c1e <_lseek_r+0x1e>
 8014c18:	682b      	ldr	r3, [r5, #0]
 8014c1a:	b103      	cbz	r3, 8014c1e <_lseek_r+0x1e>
 8014c1c:	6023      	str	r3, [r4, #0]
 8014c1e:	bd38      	pop	{r3, r4, r5, pc}
 8014c20:	2000bcb0 	.word	0x2000bcb0

08014c24 <_read_r>:
 8014c24:	b538      	push	{r3, r4, r5, lr}
 8014c26:	4604      	mov	r4, r0
 8014c28:	4608      	mov	r0, r1
 8014c2a:	4611      	mov	r1, r2
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	4d05      	ldr	r5, [pc, #20]	; (8014c44 <_read_r+0x20>)
 8014c30:	602a      	str	r2, [r5, #0]
 8014c32:	461a      	mov	r2, r3
 8014c34:	f7ec f866 	bl	8000d04 <_read>
 8014c38:	1c43      	adds	r3, r0, #1
 8014c3a:	d102      	bne.n	8014c42 <_read_r+0x1e>
 8014c3c:	682b      	ldr	r3, [r5, #0]
 8014c3e:	b103      	cbz	r3, 8014c42 <_read_r+0x1e>
 8014c40:	6023      	str	r3, [r4, #0]
 8014c42:	bd38      	pop	{r3, r4, r5, pc}
 8014c44:	2000bcb0 	.word	0x2000bcb0

08014c48 <_write_r>:
 8014c48:	b538      	push	{r3, r4, r5, lr}
 8014c4a:	4604      	mov	r4, r0
 8014c4c:	4608      	mov	r0, r1
 8014c4e:	4611      	mov	r1, r2
 8014c50:	2200      	movs	r2, #0
 8014c52:	4d05      	ldr	r5, [pc, #20]	; (8014c68 <_write_r+0x20>)
 8014c54:	602a      	str	r2, [r5, #0]
 8014c56:	461a      	mov	r2, r3
 8014c58:	f7ec f871 	bl	8000d3e <_write>
 8014c5c:	1c43      	adds	r3, r0, #1
 8014c5e:	d102      	bne.n	8014c66 <_write_r+0x1e>
 8014c60:	682b      	ldr	r3, [r5, #0]
 8014c62:	b103      	cbz	r3, 8014c66 <_write_r+0x1e>
 8014c64:	6023      	str	r3, [r4, #0]
 8014c66:	bd38      	pop	{r3, r4, r5, pc}
 8014c68:	2000bcb0 	.word	0x2000bcb0

08014c6c <__libc_init_array>:
 8014c6c:	b570      	push	{r4, r5, r6, lr}
 8014c6e:	2600      	movs	r6, #0
 8014c70:	4d0c      	ldr	r5, [pc, #48]	; (8014ca4 <__libc_init_array+0x38>)
 8014c72:	4c0d      	ldr	r4, [pc, #52]	; (8014ca8 <__libc_init_array+0x3c>)
 8014c74:	1b64      	subs	r4, r4, r5
 8014c76:	10a4      	asrs	r4, r4, #2
 8014c78:	42a6      	cmp	r6, r4
 8014c7a:	d109      	bne.n	8014c90 <__libc_init_array+0x24>
 8014c7c:	f000 fdd8 	bl	8015830 <_init>
 8014c80:	2600      	movs	r6, #0
 8014c82:	4d0a      	ldr	r5, [pc, #40]	; (8014cac <__libc_init_array+0x40>)
 8014c84:	4c0a      	ldr	r4, [pc, #40]	; (8014cb0 <__libc_init_array+0x44>)
 8014c86:	1b64      	subs	r4, r4, r5
 8014c88:	10a4      	asrs	r4, r4, #2
 8014c8a:	42a6      	cmp	r6, r4
 8014c8c:	d105      	bne.n	8014c9a <__libc_init_array+0x2e>
 8014c8e:	bd70      	pop	{r4, r5, r6, pc}
 8014c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c94:	4798      	blx	r3
 8014c96:	3601      	adds	r6, #1
 8014c98:	e7ee      	b.n	8014c78 <__libc_init_array+0xc>
 8014c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c9e:	4798      	blx	r3
 8014ca0:	3601      	adds	r6, #1
 8014ca2:	e7f2      	b.n	8014c8a <__libc_init_array+0x1e>
 8014ca4:	08017fd8 	.word	0x08017fd8
 8014ca8:	08017fd8 	.word	0x08017fd8
 8014cac:	08017fd8 	.word	0x08017fd8
 8014cb0:	08017fdc 	.word	0x08017fdc

08014cb4 <__retarget_lock_init_recursive>:
 8014cb4:	4770      	bx	lr

08014cb6 <__retarget_lock_acquire_recursive>:
 8014cb6:	4770      	bx	lr

08014cb8 <__retarget_lock_release_recursive>:
 8014cb8:	4770      	bx	lr

08014cba <memcpy>:
 8014cba:	440a      	add	r2, r1
 8014cbc:	4291      	cmp	r1, r2
 8014cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8014cc2:	d100      	bne.n	8014cc6 <memcpy+0xc>
 8014cc4:	4770      	bx	lr
 8014cc6:	b510      	push	{r4, lr}
 8014cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ccc:	4291      	cmp	r1, r2
 8014cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014cd2:	d1f9      	bne.n	8014cc8 <memcpy+0xe>
 8014cd4:	bd10      	pop	{r4, pc}
	...

08014cd8 <_free_r>:
 8014cd8:	b538      	push	{r3, r4, r5, lr}
 8014cda:	4605      	mov	r5, r0
 8014cdc:	2900      	cmp	r1, #0
 8014cde:	d040      	beq.n	8014d62 <_free_r+0x8a>
 8014ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ce4:	1f0c      	subs	r4, r1, #4
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	bfb8      	it	lt
 8014cea:	18e4      	addlt	r4, r4, r3
 8014cec:	f000 f8dc 	bl	8014ea8 <__malloc_lock>
 8014cf0:	4a1c      	ldr	r2, [pc, #112]	; (8014d64 <_free_r+0x8c>)
 8014cf2:	6813      	ldr	r3, [r2, #0]
 8014cf4:	b933      	cbnz	r3, 8014d04 <_free_r+0x2c>
 8014cf6:	6063      	str	r3, [r4, #4]
 8014cf8:	6014      	str	r4, [r2, #0]
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d00:	f000 b8d8 	b.w	8014eb4 <__malloc_unlock>
 8014d04:	42a3      	cmp	r3, r4
 8014d06:	d908      	bls.n	8014d1a <_free_r+0x42>
 8014d08:	6820      	ldr	r0, [r4, #0]
 8014d0a:	1821      	adds	r1, r4, r0
 8014d0c:	428b      	cmp	r3, r1
 8014d0e:	bf01      	itttt	eq
 8014d10:	6819      	ldreq	r1, [r3, #0]
 8014d12:	685b      	ldreq	r3, [r3, #4]
 8014d14:	1809      	addeq	r1, r1, r0
 8014d16:	6021      	streq	r1, [r4, #0]
 8014d18:	e7ed      	b.n	8014cf6 <_free_r+0x1e>
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	685b      	ldr	r3, [r3, #4]
 8014d1e:	b10b      	cbz	r3, 8014d24 <_free_r+0x4c>
 8014d20:	42a3      	cmp	r3, r4
 8014d22:	d9fa      	bls.n	8014d1a <_free_r+0x42>
 8014d24:	6811      	ldr	r1, [r2, #0]
 8014d26:	1850      	adds	r0, r2, r1
 8014d28:	42a0      	cmp	r0, r4
 8014d2a:	d10b      	bne.n	8014d44 <_free_r+0x6c>
 8014d2c:	6820      	ldr	r0, [r4, #0]
 8014d2e:	4401      	add	r1, r0
 8014d30:	1850      	adds	r0, r2, r1
 8014d32:	4283      	cmp	r3, r0
 8014d34:	6011      	str	r1, [r2, #0]
 8014d36:	d1e0      	bne.n	8014cfa <_free_r+0x22>
 8014d38:	6818      	ldr	r0, [r3, #0]
 8014d3a:	685b      	ldr	r3, [r3, #4]
 8014d3c:	4408      	add	r0, r1
 8014d3e:	6010      	str	r0, [r2, #0]
 8014d40:	6053      	str	r3, [r2, #4]
 8014d42:	e7da      	b.n	8014cfa <_free_r+0x22>
 8014d44:	d902      	bls.n	8014d4c <_free_r+0x74>
 8014d46:	230c      	movs	r3, #12
 8014d48:	602b      	str	r3, [r5, #0]
 8014d4a:	e7d6      	b.n	8014cfa <_free_r+0x22>
 8014d4c:	6820      	ldr	r0, [r4, #0]
 8014d4e:	1821      	adds	r1, r4, r0
 8014d50:	428b      	cmp	r3, r1
 8014d52:	bf01      	itttt	eq
 8014d54:	6819      	ldreq	r1, [r3, #0]
 8014d56:	685b      	ldreq	r3, [r3, #4]
 8014d58:	1809      	addeq	r1, r1, r0
 8014d5a:	6021      	streq	r1, [r4, #0]
 8014d5c:	6063      	str	r3, [r4, #4]
 8014d5e:	6054      	str	r4, [r2, #4]
 8014d60:	e7cb      	b.n	8014cfa <_free_r+0x22>
 8014d62:	bd38      	pop	{r3, r4, r5, pc}
 8014d64:	2000bcb8 	.word	0x2000bcb8

08014d68 <sbrk_aligned>:
 8014d68:	b570      	push	{r4, r5, r6, lr}
 8014d6a:	4e0e      	ldr	r6, [pc, #56]	; (8014da4 <sbrk_aligned+0x3c>)
 8014d6c:	460c      	mov	r4, r1
 8014d6e:	6831      	ldr	r1, [r6, #0]
 8014d70:	4605      	mov	r5, r0
 8014d72:	b911      	cbnz	r1, 8014d7a <sbrk_aligned+0x12>
 8014d74:	f000 fcba 	bl	80156ec <_sbrk_r>
 8014d78:	6030      	str	r0, [r6, #0]
 8014d7a:	4621      	mov	r1, r4
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	f000 fcb5 	bl	80156ec <_sbrk_r>
 8014d82:	1c43      	adds	r3, r0, #1
 8014d84:	d00a      	beq.n	8014d9c <sbrk_aligned+0x34>
 8014d86:	1cc4      	adds	r4, r0, #3
 8014d88:	f024 0403 	bic.w	r4, r4, #3
 8014d8c:	42a0      	cmp	r0, r4
 8014d8e:	d007      	beq.n	8014da0 <sbrk_aligned+0x38>
 8014d90:	1a21      	subs	r1, r4, r0
 8014d92:	4628      	mov	r0, r5
 8014d94:	f000 fcaa 	bl	80156ec <_sbrk_r>
 8014d98:	3001      	adds	r0, #1
 8014d9a:	d101      	bne.n	8014da0 <sbrk_aligned+0x38>
 8014d9c:	f04f 34ff 	mov.w	r4, #4294967295
 8014da0:	4620      	mov	r0, r4
 8014da2:	bd70      	pop	{r4, r5, r6, pc}
 8014da4:	2000bcbc 	.word	0x2000bcbc

08014da8 <_malloc_r>:
 8014da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dac:	1ccd      	adds	r5, r1, #3
 8014dae:	f025 0503 	bic.w	r5, r5, #3
 8014db2:	3508      	adds	r5, #8
 8014db4:	2d0c      	cmp	r5, #12
 8014db6:	bf38      	it	cc
 8014db8:	250c      	movcc	r5, #12
 8014dba:	2d00      	cmp	r5, #0
 8014dbc:	4607      	mov	r7, r0
 8014dbe:	db01      	blt.n	8014dc4 <_malloc_r+0x1c>
 8014dc0:	42a9      	cmp	r1, r5
 8014dc2:	d905      	bls.n	8014dd0 <_malloc_r+0x28>
 8014dc4:	230c      	movs	r3, #12
 8014dc6:	2600      	movs	r6, #0
 8014dc8:	603b      	str	r3, [r7, #0]
 8014dca:	4630      	mov	r0, r6
 8014dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014ea4 <_malloc_r+0xfc>
 8014dd4:	f000 f868 	bl	8014ea8 <__malloc_lock>
 8014dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8014ddc:	461c      	mov	r4, r3
 8014dde:	bb5c      	cbnz	r4, 8014e38 <_malloc_r+0x90>
 8014de0:	4629      	mov	r1, r5
 8014de2:	4638      	mov	r0, r7
 8014de4:	f7ff ffc0 	bl	8014d68 <sbrk_aligned>
 8014de8:	1c43      	adds	r3, r0, #1
 8014dea:	4604      	mov	r4, r0
 8014dec:	d155      	bne.n	8014e9a <_malloc_r+0xf2>
 8014dee:	f8d8 4000 	ldr.w	r4, [r8]
 8014df2:	4626      	mov	r6, r4
 8014df4:	2e00      	cmp	r6, #0
 8014df6:	d145      	bne.n	8014e84 <_malloc_r+0xdc>
 8014df8:	2c00      	cmp	r4, #0
 8014dfa:	d048      	beq.n	8014e8e <_malloc_r+0xe6>
 8014dfc:	6823      	ldr	r3, [r4, #0]
 8014dfe:	4631      	mov	r1, r6
 8014e00:	4638      	mov	r0, r7
 8014e02:	eb04 0903 	add.w	r9, r4, r3
 8014e06:	f000 fc71 	bl	80156ec <_sbrk_r>
 8014e0a:	4581      	cmp	r9, r0
 8014e0c:	d13f      	bne.n	8014e8e <_malloc_r+0xe6>
 8014e0e:	6821      	ldr	r1, [r4, #0]
 8014e10:	4638      	mov	r0, r7
 8014e12:	1a6d      	subs	r5, r5, r1
 8014e14:	4629      	mov	r1, r5
 8014e16:	f7ff ffa7 	bl	8014d68 <sbrk_aligned>
 8014e1a:	3001      	adds	r0, #1
 8014e1c:	d037      	beq.n	8014e8e <_malloc_r+0xe6>
 8014e1e:	6823      	ldr	r3, [r4, #0]
 8014e20:	442b      	add	r3, r5
 8014e22:	6023      	str	r3, [r4, #0]
 8014e24:	f8d8 3000 	ldr.w	r3, [r8]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d038      	beq.n	8014e9e <_malloc_r+0xf6>
 8014e2c:	685a      	ldr	r2, [r3, #4]
 8014e2e:	42a2      	cmp	r2, r4
 8014e30:	d12b      	bne.n	8014e8a <_malloc_r+0xe2>
 8014e32:	2200      	movs	r2, #0
 8014e34:	605a      	str	r2, [r3, #4]
 8014e36:	e00f      	b.n	8014e58 <_malloc_r+0xb0>
 8014e38:	6822      	ldr	r2, [r4, #0]
 8014e3a:	1b52      	subs	r2, r2, r5
 8014e3c:	d41f      	bmi.n	8014e7e <_malloc_r+0xd6>
 8014e3e:	2a0b      	cmp	r2, #11
 8014e40:	d917      	bls.n	8014e72 <_malloc_r+0xca>
 8014e42:	1961      	adds	r1, r4, r5
 8014e44:	42a3      	cmp	r3, r4
 8014e46:	6025      	str	r5, [r4, #0]
 8014e48:	bf18      	it	ne
 8014e4a:	6059      	strne	r1, [r3, #4]
 8014e4c:	6863      	ldr	r3, [r4, #4]
 8014e4e:	bf08      	it	eq
 8014e50:	f8c8 1000 	streq.w	r1, [r8]
 8014e54:	5162      	str	r2, [r4, r5]
 8014e56:	604b      	str	r3, [r1, #4]
 8014e58:	4638      	mov	r0, r7
 8014e5a:	f104 060b 	add.w	r6, r4, #11
 8014e5e:	f000 f829 	bl	8014eb4 <__malloc_unlock>
 8014e62:	f026 0607 	bic.w	r6, r6, #7
 8014e66:	1d23      	adds	r3, r4, #4
 8014e68:	1af2      	subs	r2, r6, r3
 8014e6a:	d0ae      	beq.n	8014dca <_malloc_r+0x22>
 8014e6c:	1b9b      	subs	r3, r3, r6
 8014e6e:	50a3      	str	r3, [r4, r2]
 8014e70:	e7ab      	b.n	8014dca <_malloc_r+0x22>
 8014e72:	42a3      	cmp	r3, r4
 8014e74:	6862      	ldr	r2, [r4, #4]
 8014e76:	d1dd      	bne.n	8014e34 <_malloc_r+0x8c>
 8014e78:	f8c8 2000 	str.w	r2, [r8]
 8014e7c:	e7ec      	b.n	8014e58 <_malloc_r+0xb0>
 8014e7e:	4623      	mov	r3, r4
 8014e80:	6864      	ldr	r4, [r4, #4]
 8014e82:	e7ac      	b.n	8014dde <_malloc_r+0x36>
 8014e84:	4634      	mov	r4, r6
 8014e86:	6876      	ldr	r6, [r6, #4]
 8014e88:	e7b4      	b.n	8014df4 <_malloc_r+0x4c>
 8014e8a:	4613      	mov	r3, r2
 8014e8c:	e7cc      	b.n	8014e28 <_malloc_r+0x80>
 8014e8e:	230c      	movs	r3, #12
 8014e90:	4638      	mov	r0, r7
 8014e92:	603b      	str	r3, [r7, #0]
 8014e94:	f000 f80e 	bl	8014eb4 <__malloc_unlock>
 8014e98:	e797      	b.n	8014dca <_malloc_r+0x22>
 8014e9a:	6025      	str	r5, [r4, #0]
 8014e9c:	e7dc      	b.n	8014e58 <_malloc_r+0xb0>
 8014e9e:	605b      	str	r3, [r3, #4]
 8014ea0:	deff      	udf	#255	; 0xff
 8014ea2:	bf00      	nop
 8014ea4:	2000bcb8 	.word	0x2000bcb8

08014ea8 <__malloc_lock>:
 8014ea8:	4801      	ldr	r0, [pc, #4]	; (8014eb0 <__malloc_lock+0x8>)
 8014eaa:	f7ff bf04 	b.w	8014cb6 <__retarget_lock_acquire_recursive>
 8014eae:	bf00      	nop
 8014eb0:	2000bcb4 	.word	0x2000bcb4

08014eb4 <__malloc_unlock>:
 8014eb4:	4801      	ldr	r0, [pc, #4]	; (8014ebc <__malloc_unlock+0x8>)
 8014eb6:	f7ff beff 	b.w	8014cb8 <__retarget_lock_release_recursive>
 8014eba:	bf00      	nop
 8014ebc:	2000bcb4 	.word	0x2000bcb4

08014ec0 <__sfputc_r>:
 8014ec0:	6893      	ldr	r3, [r2, #8]
 8014ec2:	b410      	push	{r4}
 8014ec4:	3b01      	subs	r3, #1
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	6093      	str	r3, [r2, #8]
 8014eca:	da07      	bge.n	8014edc <__sfputc_r+0x1c>
 8014ecc:	6994      	ldr	r4, [r2, #24]
 8014ece:	42a3      	cmp	r3, r4
 8014ed0:	db01      	blt.n	8014ed6 <__sfputc_r+0x16>
 8014ed2:	290a      	cmp	r1, #10
 8014ed4:	d102      	bne.n	8014edc <__sfputc_r+0x1c>
 8014ed6:	bc10      	pop	{r4}
 8014ed8:	f000 bb72 	b.w	80155c0 <__swbuf_r>
 8014edc:	6813      	ldr	r3, [r2, #0]
 8014ede:	1c58      	adds	r0, r3, #1
 8014ee0:	6010      	str	r0, [r2, #0]
 8014ee2:	7019      	strb	r1, [r3, #0]
 8014ee4:	4608      	mov	r0, r1
 8014ee6:	bc10      	pop	{r4}
 8014ee8:	4770      	bx	lr

08014eea <__sfputs_r>:
 8014eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eec:	4606      	mov	r6, r0
 8014eee:	460f      	mov	r7, r1
 8014ef0:	4614      	mov	r4, r2
 8014ef2:	18d5      	adds	r5, r2, r3
 8014ef4:	42ac      	cmp	r4, r5
 8014ef6:	d101      	bne.n	8014efc <__sfputs_r+0x12>
 8014ef8:	2000      	movs	r0, #0
 8014efa:	e007      	b.n	8014f0c <__sfputs_r+0x22>
 8014efc:	463a      	mov	r2, r7
 8014efe:	4630      	mov	r0, r6
 8014f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f04:	f7ff ffdc 	bl	8014ec0 <__sfputc_r>
 8014f08:	1c43      	adds	r3, r0, #1
 8014f0a:	d1f3      	bne.n	8014ef4 <__sfputs_r+0xa>
 8014f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014f10 <_vfiprintf_r>:
 8014f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f14:	460d      	mov	r5, r1
 8014f16:	4614      	mov	r4, r2
 8014f18:	4698      	mov	r8, r3
 8014f1a:	4606      	mov	r6, r0
 8014f1c:	b09d      	sub	sp, #116	; 0x74
 8014f1e:	b118      	cbz	r0, 8014f28 <_vfiprintf_r+0x18>
 8014f20:	6a03      	ldr	r3, [r0, #32]
 8014f22:	b90b      	cbnz	r3, 8014f28 <_vfiprintf_r+0x18>
 8014f24:	f7ff fd62 	bl	80149ec <__sinit>
 8014f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f2a:	07d9      	lsls	r1, r3, #31
 8014f2c:	d405      	bmi.n	8014f3a <_vfiprintf_r+0x2a>
 8014f2e:	89ab      	ldrh	r3, [r5, #12]
 8014f30:	059a      	lsls	r2, r3, #22
 8014f32:	d402      	bmi.n	8014f3a <_vfiprintf_r+0x2a>
 8014f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f36:	f7ff febe 	bl	8014cb6 <__retarget_lock_acquire_recursive>
 8014f3a:	89ab      	ldrh	r3, [r5, #12]
 8014f3c:	071b      	lsls	r3, r3, #28
 8014f3e:	d501      	bpl.n	8014f44 <_vfiprintf_r+0x34>
 8014f40:	692b      	ldr	r3, [r5, #16]
 8014f42:	b99b      	cbnz	r3, 8014f6c <_vfiprintf_r+0x5c>
 8014f44:	4629      	mov	r1, r5
 8014f46:	4630      	mov	r0, r6
 8014f48:	f000 fb78 	bl	801563c <__swsetup_r>
 8014f4c:	b170      	cbz	r0, 8014f6c <_vfiprintf_r+0x5c>
 8014f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f50:	07dc      	lsls	r4, r3, #31
 8014f52:	d504      	bpl.n	8014f5e <_vfiprintf_r+0x4e>
 8014f54:	f04f 30ff 	mov.w	r0, #4294967295
 8014f58:	b01d      	add	sp, #116	; 0x74
 8014f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f5e:	89ab      	ldrh	r3, [r5, #12]
 8014f60:	0598      	lsls	r0, r3, #22
 8014f62:	d4f7      	bmi.n	8014f54 <_vfiprintf_r+0x44>
 8014f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f66:	f7ff fea7 	bl	8014cb8 <__retarget_lock_release_recursive>
 8014f6a:	e7f3      	b.n	8014f54 <_vfiprintf_r+0x44>
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8014f70:	2320      	movs	r3, #32
 8014f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f76:	2330      	movs	r3, #48	; 0x30
 8014f78:	f04f 0901 	mov.w	r9, #1
 8014f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f80:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8015130 <_vfiprintf_r+0x220>
 8014f84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f88:	4623      	mov	r3, r4
 8014f8a:	469a      	mov	sl, r3
 8014f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f90:	b10a      	cbz	r2, 8014f96 <_vfiprintf_r+0x86>
 8014f92:	2a25      	cmp	r2, #37	; 0x25
 8014f94:	d1f9      	bne.n	8014f8a <_vfiprintf_r+0x7a>
 8014f96:	ebba 0b04 	subs.w	fp, sl, r4
 8014f9a:	d00b      	beq.n	8014fb4 <_vfiprintf_r+0xa4>
 8014f9c:	465b      	mov	r3, fp
 8014f9e:	4622      	mov	r2, r4
 8014fa0:	4629      	mov	r1, r5
 8014fa2:	4630      	mov	r0, r6
 8014fa4:	f7ff ffa1 	bl	8014eea <__sfputs_r>
 8014fa8:	3001      	adds	r0, #1
 8014faa:	f000 80a9 	beq.w	8015100 <_vfiprintf_r+0x1f0>
 8014fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fb0:	445a      	add	r2, fp
 8014fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8014fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	f000 80a1 	beq.w	8015100 <_vfiprintf_r+0x1f0>
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8014fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fc8:	f10a 0a01 	add.w	sl, sl, #1
 8014fcc:	9304      	str	r3, [sp, #16]
 8014fce:	9307      	str	r3, [sp, #28]
 8014fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8014fd6:	4654      	mov	r4, sl
 8014fd8:	2205      	movs	r2, #5
 8014fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fde:	4854      	ldr	r0, [pc, #336]	; (8015130 <_vfiprintf_r+0x220>)
 8014fe0:	f000 fb94 	bl	801570c <memchr>
 8014fe4:	9a04      	ldr	r2, [sp, #16]
 8014fe6:	b9d8      	cbnz	r0, 8015020 <_vfiprintf_r+0x110>
 8014fe8:	06d1      	lsls	r1, r2, #27
 8014fea:	bf44      	itt	mi
 8014fec:	2320      	movmi	r3, #32
 8014fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ff2:	0713      	lsls	r3, r2, #28
 8014ff4:	bf44      	itt	mi
 8014ff6:	232b      	movmi	r3, #43	; 0x2b
 8014ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8015000:	2b2a      	cmp	r3, #42	; 0x2a
 8015002:	d015      	beq.n	8015030 <_vfiprintf_r+0x120>
 8015004:	4654      	mov	r4, sl
 8015006:	2000      	movs	r0, #0
 8015008:	f04f 0c0a 	mov.w	ip, #10
 801500c:	9a07      	ldr	r2, [sp, #28]
 801500e:	4621      	mov	r1, r4
 8015010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015014:	3b30      	subs	r3, #48	; 0x30
 8015016:	2b09      	cmp	r3, #9
 8015018:	d94d      	bls.n	80150b6 <_vfiprintf_r+0x1a6>
 801501a:	b1b0      	cbz	r0, 801504a <_vfiprintf_r+0x13a>
 801501c:	9207      	str	r2, [sp, #28]
 801501e:	e014      	b.n	801504a <_vfiprintf_r+0x13a>
 8015020:	eba0 0308 	sub.w	r3, r0, r8
 8015024:	fa09 f303 	lsl.w	r3, r9, r3
 8015028:	4313      	orrs	r3, r2
 801502a:	46a2      	mov	sl, r4
 801502c:	9304      	str	r3, [sp, #16]
 801502e:	e7d2      	b.n	8014fd6 <_vfiprintf_r+0xc6>
 8015030:	9b03      	ldr	r3, [sp, #12]
 8015032:	1d19      	adds	r1, r3, #4
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	9103      	str	r1, [sp, #12]
 8015038:	2b00      	cmp	r3, #0
 801503a:	bfbb      	ittet	lt
 801503c:	425b      	neglt	r3, r3
 801503e:	f042 0202 	orrlt.w	r2, r2, #2
 8015042:	9307      	strge	r3, [sp, #28]
 8015044:	9307      	strlt	r3, [sp, #28]
 8015046:	bfb8      	it	lt
 8015048:	9204      	strlt	r2, [sp, #16]
 801504a:	7823      	ldrb	r3, [r4, #0]
 801504c:	2b2e      	cmp	r3, #46	; 0x2e
 801504e:	d10c      	bne.n	801506a <_vfiprintf_r+0x15a>
 8015050:	7863      	ldrb	r3, [r4, #1]
 8015052:	2b2a      	cmp	r3, #42	; 0x2a
 8015054:	d134      	bne.n	80150c0 <_vfiprintf_r+0x1b0>
 8015056:	9b03      	ldr	r3, [sp, #12]
 8015058:	3402      	adds	r4, #2
 801505a:	1d1a      	adds	r2, r3, #4
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	9203      	str	r2, [sp, #12]
 8015060:	2b00      	cmp	r3, #0
 8015062:	bfb8      	it	lt
 8015064:	f04f 33ff 	movlt.w	r3, #4294967295
 8015068:	9305      	str	r3, [sp, #20]
 801506a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015134 <_vfiprintf_r+0x224>
 801506e:	2203      	movs	r2, #3
 8015070:	4650      	mov	r0, sl
 8015072:	7821      	ldrb	r1, [r4, #0]
 8015074:	f000 fb4a 	bl	801570c <memchr>
 8015078:	b138      	cbz	r0, 801508a <_vfiprintf_r+0x17a>
 801507a:	2240      	movs	r2, #64	; 0x40
 801507c:	9b04      	ldr	r3, [sp, #16]
 801507e:	eba0 000a 	sub.w	r0, r0, sl
 8015082:	4082      	lsls	r2, r0
 8015084:	4313      	orrs	r3, r2
 8015086:	3401      	adds	r4, #1
 8015088:	9304      	str	r3, [sp, #16]
 801508a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801508e:	2206      	movs	r2, #6
 8015090:	4829      	ldr	r0, [pc, #164]	; (8015138 <_vfiprintf_r+0x228>)
 8015092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015096:	f000 fb39 	bl	801570c <memchr>
 801509a:	2800      	cmp	r0, #0
 801509c:	d03f      	beq.n	801511e <_vfiprintf_r+0x20e>
 801509e:	4b27      	ldr	r3, [pc, #156]	; (801513c <_vfiprintf_r+0x22c>)
 80150a0:	bb1b      	cbnz	r3, 80150ea <_vfiprintf_r+0x1da>
 80150a2:	9b03      	ldr	r3, [sp, #12]
 80150a4:	3307      	adds	r3, #7
 80150a6:	f023 0307 	bic.w	r3, r3, #7
 80150aa:	3308      	adds	r3, #8
 80150ac:	9303      	str	r3, [sp, #12]
 80150ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150b0:	443b      	add	r3, r7
 80150b2:	9309      	str	r3, [sp, #36]	; 0x24
 80150b4:	e768      	b.n	8014f88 <_vfiprintf_r+0x78>
 80150b6:	460c      	mov	r4, r1
 80150b8:	2001      	movs	r0, #1
 80150ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80150be:	e7a6      	b.n	801500e <_vfiprintf_r+0xfe>
 80150c0:	2300      	movs	r3, #0
 80150c2:	f04f 0c0a 	mov.w	ip, #10
 80150c6:	4619      	mov	r1, r3
 80150c8:	3401      	adds	r4, #1
 80150ca:	9305      	str	r3, [sp, #20]
 80150cc:	4620      	mov	r0, r4
 80150ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150d2:	3a30      	subs	r2, #48	; 0x30
 80150d4:	2a09      	cmp	r2, #9
 80150d6:	d903      	bls.n	80150e0 <_vfiprintf_r+0x1d0>
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d0c6      	beq.n	801506a <_vfiprintf_r+0x15a>
 80150dc:	9105      	str	r1, [sp, #20]
 80150de:	e7c4      	b.n	801506a <_vfiprintf_r+0x15a>
 80150e0:	4604      	mov	r4, r0
 80150e2:	2301      	movs	r3, #1
 80150e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80150e8:	e7f0      	b.n	80150cc <_vfiprintf_r+0x1bc>
 80150ea:	ab03      	add	r3, sp, #12
 80150ec:	9300      	str	r3, [sp, #0]
 80150ee:	462a      	mov	r2, r5
 80150f0:	4630      	mov	r0, r6
 80150f2:	4b13      	ldr	r3, [pc, #76]	; (8015140 <_vfiprintf_r+0x230>)
 80150f4:	a904      	add	r1, sp, #16
 80150f6:	f3af 8000 	nop.w
 80150fa:	4607      	mov	r7, r0
 80150fc:	1c78      	adds	r0, r7, #1
 80150fe:	d1d6      	bne.n	80150ae <_vfiprintf_r+0x19e>
 8015100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015102:	07d9      	lsls	r1, r3, #31
 8015104:	d405      	bmi.n	8015112 <_vfiprintf_r+0x202>
 8015106:	89ab      	ldrh	r3, [r5, #12]
 8015108:	059a      	lsls	r2, r3, #22
 801510a:	d402      	bmi.n	8015112 <_vfiprintf_r+0x202>
 801510c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801510e:	f7ff fdd3 	bl	8014cb8 <__retarget_lock_release_recursive>
 8015112:	89ab      	ldrh	r3, [r5, #12]
 8015114:	065b      	lsls	r3, r3, #25
 8015116:	f53f af1d 	bmi.w	8014f54 <_vfiprintf_r+0x44>
 801511a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801511c:	e71c      	b.n	8014f58 <_vfiprintf_r+0x48>
 801511e:	ab03      	add	r3, sp, #12
 8015120:	9300      	str	r3, [sp, #0]
 8015122:	462a      	mov	r2, r5
 8015124:	4630      	mov	r0, r6
 8015126:	4b06      	ldr	r3, [pc, #24]	; (8015140 <_vfiprintf_r+0x230>)
 8015128:	a904      	add	r1, sp, #16
 801512a:	f000 f87d 	bl	8015228 <_printf_i>
 801512e:	e7e4      	b.n	80150fa <_vfiprintf_r+0x1ea>
 8015130:	08017f9a 	.word	0x08017f9a
 8015134:	08017fa0 	.word	0x08017fa0
 8015138:	08017fa4 	.word	0x08017fa4
 801513c:	00000000 	.word	0x00000000
 8015140:	08014eeb 	.word	0x08014eeb

08015144 <_printf_common>:
 8015144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015148:	4616      	mov	r6, r2
 801514a:	4699      	mov	r9, r3
 801514c:	688a      	ldr	r2, [r1, #8]
 801514e:	690b      	ldr	r3, [r1, #16]
 8015150:	4607      	mov	r7, r0
 8015152:	4293      	cmp	r3, r2
 8015154:	bfb8      	it	lt
 8015156:	4613      	movlt	r3, r2
 8015158:	6033      	str	r3, [r6, #0]
 801515a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801515e:	460c      	mov	r4, r1
 8015160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015164:	b10a      	cbz	r2, 801516a <_printf_common+0x26>
 8015166:	3301      	adds	r3, #1
 8015168:	6033      	str	r3, [r6, #0]
 801516a:	6823      	ldr	r3, [r4, #0]
 801516c:	0699      	lsls	r1, r3, #26
 801516e:	bf42      	ittt	mi
 8015170:	6833      	ldrmi	r3, [r6, #0]
 8015172:	3302      	addmi	r3, #2
 8015174:	6033      	strmi	r3, [r6, #0]
 8015176:	6825      	ldr	r5, [r4, #0]
 8015178:	f015 0506 	ands.w	r5, r5, #6
 801517c:	d106      	bne.n	801518c <_printf_common+0x48>
 801517e:	f104 0a19 	add.w	sl, r4, #25
 8015182:	68e3      	ldr	r3, [r4, #12]
 8015184:	6832      	ldr	r2, [r6, #0]
 8015186:	1a9b      	subs	r3, r3, r2
 8015188:	42ab      	cmp	r3, r5
 801518a:	dc2b      	bgt.n	80151e4 <_printf_common+0xa0>
 801518c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015190:	1e13      	subs	r3, r2, #0
 8015192:	6822      	ldr	r2, [r4, #0]
 8015194:	bf18      	it	ne
 8015196:	2301      	movne	r3, #1
 8015198:	0692      	lsls	r2, r2, #26
 801519a:	d430      	bmi.n	80151fe <_printf_common+0xba>
 801519c:	4649      	mov	r1, r9
 801519e:	4638      	mov	r0, r7
 80151a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80151a4:	47c0      	blx	r8
 80151a6:	3001      	adds	r0, #1
 80151a8:	d023      	beq.n	80151f2 <_printf_common+0xae>
 80151aa:	6823      	ldr	r3, [r4, #0]
 80151ac:	6922      	ldr	r2, [r4, #16]
 80151ae:	f003 0306 	and.w	r3, r3, #6
 80151b2:	2b04      	cmp	r3, #4
 80151b4:	bf14      	ite	ne
 80151b6:	2500      	movne	r5, #0
 80151b8:	6833      	ldreq	r3, [r6, #0]
 80151ba:	f04f 0600 	mov.w	r6, #0
 80151be:	bf08      	it	eq
 80151c0:	68e5      	ldreq	r5, [r4, #12]
 80151c2:	f104 041a 	add.w	r4, r4, #26
 80151c6:	bf08      	it	eq
 80151c8:	1aed      	subeq	r5, r5, r3
 80151ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80151ce:	bf08      	it	eq
 80151d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80151d4:	4293      	cmp	r3, r2
 80151d6:	bfc4      	itt	gt
 80151d8:	1a9b      	subgt	r3, r3, r2
 80151da:	18ed      	addgt	r5, r5, r3
 80151dc:	42b5      	cmp	r5, r6
 80151de:	d11a      	bne.n	8015216 <_printf_common+0xd2>
 80151e0:	2000      	movs	r0, #0
 80151e2:	e008      	b.n	80151f6 <_printf_common+0xb2>
 80151e4:	2301      	movs	r3, #1
 80151e6:	4652      	mov	r2, sl
 80151e8:	4649      	mov	r1, r9
 80151ea:	4638      	mov	r0, r7
 80151ec:	47c0      	blx	r8
 80151ee:	3001      	adds	r0, #1
 80151f0:	d103      	bne.n	80151fa <_printf_common+0xb6>
 80151f2:	f04f 30ff 	mov.w	r0, #4294967295
 80151f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151fa:	3501      	adds	r5, #1
 80151fc:	e7c1      	b.n	8015182 <_printf_common+0x3e>
 80151fe:	2030      	movs	r0, #48	; 0x30
 8015200:	18e1      	adds	r1, r4, r3
 8015202:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015206:	1c5a      	adds	r2, r3, #1
 8015208:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801520c:	4422      	add	r2, r4
 801520e:	3302      	adds	r3, #2
 8015210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015214:	e7c2      	b.n	801519c <_printf_common+0x58>
 8015216:	2301      	movs	r3, #1
 8015218:	4622      	mov	r2, r4
 801521a:	4649      	mov	r1, r9
 801521c:	4638      	mov	r0, r7
 801521e:	47c0      	blx	r8
 8015220:	3001      	adds	r0, #1
 8015222:	d0e6      	beq.n	80151f2 <_printf_common+0xae>
 8015224:	3601      	adds	r6, #1
 8015226:	e7d9      	b.n	80151dc <_printf_common+0x98>

08015228 <_printf_i>:
 8015228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801522c:	7e0f      	ldrb	r7, [r1, #24]
 801522e:	4691      	mov	r9, r2
 8015230:	2f78      	cmp	r7, #120	; 0x78
 8015232:	4680      	mov	r8, r0
 8015234:	460c      	mov	r4, r1
 8015236:	469a      	mov	sl, r3
 8015238:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801523a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801523e:	d807      	bhi.n	8015250 <_printf_i+0x28>
 8015240:	2f62      	cmp	r7, #98	; 0x62
 8015242:	d80a      	bhi.n	801525a <_printf_i+0x32>
 8015244:	2f00      	cmp	r7, #0
 8015246:	f000 80d5 	beq.w	80153f4 <_printf_i+0x1cc>
 801524a:	2f58      	cmp	r7, #88	; 0x58
 801524c:	f000 80c1 	beq.w	80153d2 <_printf_i+0x1aa>
 8015250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015258:	e03a      	b.n	80152d0 <_printf_i+0xa8>
 801525a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801525e:	2b15      	cmp	r3, #21
 8015260:	d8f6      	bhi.n	8015250 <_printf_i+0x28>
 8015262:	a101      	add	r1, pc, #4	; (adr r1, 8015268 <_printf_i+0x40>)
 8015264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015268:	080152c1 	.word	0x080152c1
 801526c:	080152d5 	.word	0x080152d5
 8015270:	08015251 	.word	0x08015251
 8015274:	08015251 	.word	0x08015251
 8015278:	08015251 	.word	0x08015251
 801527c:	08015251 	.word	0x08015251
 8015280:	080152d5 	.word	0x080152d5
 8015284:	08015251 	.word	0x08015251
 8015288:	08015251 	.word	0x08015251
 801528c:	08015251 	.word	0x08015251
 8015290:	08015251 	.word	0x08015251
 8015294:	080153db 	.word	0x080153db
 8015298:	08015301 	.word	0x08015301
 801529c:	08015395 	.word	0x08015395
 80152a0:	08015251 	.word	0x08015251
 80152a4:	08015251 	.word	0x08015251
 80152a8:	080153fd 	.word	0x080153fd
 80152ac:	08015251 	.word	0x08015251
 80152b0:	08015301 	.word	0x08015301
 80152b4:	08015251 	.word	0x08015251
 80152b8:	08015251 	.word	0x08015251
 80152bc:	0801539d 	.word	0x0801539d
 80152c0:	682b      	ldr	r3, [r5, #0]
 80152c2:	1d1a      	adds	r2, r3, #4
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	602a      	str	r2, [r5, #0]
 80152c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80152cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80152d0:	2301      	movs	r3, #1
 80152d2:	e0a0      	b.n	8015416 <_printf_i+0x1ee>
 80152d4:	6820      	ldr	r0, [r4, #0]
 80152d6:	682b      	ldr	r3, [r5, #0]
 80152d8:	0607      	lsls	r7, r0, #24
 80152da:	f103 0104 	add.w	r1, r3, #4
 80152de:	6029      	str	r1, [r5, #0]
 80152e0:	d501      	bpl.n	80152e6 <_printf_i+0xbe>
 80152e2:	681e      	ldr	r6, [r3, #0]
 80152e4:	e003      	b.n	80152ee <_printf_i+0xc6>
 80152e6:	0646      	lsls	r6, r0, #25
 80152e8:	d5fb      	bpl.n	80152e2 <_printf_i+0xba>
 80152ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80152ee:	2e00      	cmp	r6, #0
 80152f0:	da03      	bge.n	80152fa <_printf_i+0xd2>
 80152f2:	232d      	movs	r3, #45	; 0x2d
 80152f4:	4276      	negs	r6, r6
 80152f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80152fa:	230a      	movs	r3, #10
 80152fc:	4859      	ldr	r0, [pc, #356]	; (8015464 <_printf_i+0x23c>)
 80152fe:	e012      	b.n	8015326 <_printf_i+0xfe>
 8015300:	682b      	ldr	r3, [r5, #0]
 8015302:	6820      	ldr	r0, [r4, #0]
 8015304:	1d19      	adds	r1, r3, #4
 8015306:	6029      	str	r1, [r5, #0]
 8015308:	0605      	lsls	r5, r0, #24
 801530a:	d501      	bpl.n	8015310 <_printf_i+0xe8>
 801530c:	681e      	ldr	r6, [r3, #0]
 801530e:	e002      	b.n	8015316 <_printf_i+0xee>
 8015310:	0641      	lsls	r1, r0, #25
 8015312:	d5fb      	bpl.n	801530c <_printf_i+0xe4>
 8015314:	881e      	ldrh	r6, [r3, #0]
 8015316:	2f6f      	cmp	r7, #111	; 0x6f
 8015318:	bf0c      	ite	eq
 801531a:	2308      	moveq	r3, #8
 801531c:	230a      	movne	r3, #10
 801531e:	4851      	ldr	r0, [pc, #324]	; (8015464 <_printf_i+0x23c>)
 8015320:	2100      	movs	r1, #0
 8015322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015326:	6865      	ldr	r5, [r4, #4]
 8015328:	2d00      	cmp	r5, #0
 801532a:	bfa8      	it	ge
 801532c:	6821      	ldrge	r1, [r4, #0]
 801532e:	60a5      	str	r5, [r4, #8]
 8015330:	bfa4      	itt	ge
 8015332:	f021 0104 	bicge.w	r1, r1, #4
 8015336:	6021      	strge	r1, [r4, #0]
 8015338:	b90e      	cbnz	r6, 801533e <_printf_i+0x116>
 801533a:	2d00      	cmp	r5, #0
 801533c:	d04b      	beq.n	80153d6 <_printf_i+0x1ae>
 801533e:	4615      	mov	r5, r2
 8015340:	fbb6 f1f3 	udiv	r1, r6, r3
 8015344:	fb03 6711 	mls	r7, r3, r1, r6
 8015348:	5dc7      	ldrb	r7, [r0, r7]
 801534a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801534e:	4637      	mov	r7, r6
 8015350:	42bb      	cmp	r3, r7
 8015352:	460e      	mov	r6, r1
 8015354:	d9f4      	bls.n	8015340 <_printf_i+0x118>
 8015356:	2b08      	cmp	r3, #8
 8015358:	d10b      	bne.n	8015372 <_printf_i+0x14a>
 801535a:	6823      	ldr	r3, [r4, #0]
 801535c:	07de      	lsls	r6, r3, #31
 801535e:	d508      	bpl.n	8015372 <_printf_i+0x14a>
 8015360:	6923      	ldr	r3, [r4, #16]
 8015362:	6861      	ldr	r1, [r4, #4]
 8015364:	4299      	cmp	r1, r3
 8015366:	bfde      	ittt	le
 8015368:	2330      	movle	r3, #48	; 0x30
 801536a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801536e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015372:	1b52      	subs	r2, r2, r5
 8015374:	6122      	str	r2, [r4, #16]
 8015376:	464b      	mov	r3, r9
 8015378:	4621      	mov	r1, r4
 801537a:	4640      	mov	r0, r8
 801537c:	f8cd a000 	str.w	sl, [sp]
 8015380:	aa03      	add	r2, sp, #12
 8015382:	f7ff fedf 	bl	8015144 <_printf_common>
 8015386:	3001      	adds	r0, #1
 8015388:	d14a      	bne.n	8015420 <_printf_i+0x1f8>
 801538a:	f04f 30ff 	mov.w	r0, #4294967295
 801538e:	b004      	add	sp, #16
 8015390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015394:	6823      	ldr	r3, [r4, #0]
 8015396:	f043 0320 	orr.w	r3, r3, #32
 801539a:	6023      	str	r3, [r4, #0]
 801539c:	2778      	movs	r7, #120	; 0x78
 801539e:	4832      	ldr	r0, [pc, #200]	; (8015468 <_printf_i+0x240>)
 80153a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80153a4:	6823      	ldr	r3, [r4, #0]
 80153a6:	6829      	ldr	r1, [r5, #0]
 80153a8:	061f      	lsls	r7, r3, #24
 80153aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80153ae:	d402      	bmi.n	80153b6 <_printf_i+0x18e>
 80153b0:	065f      	lsls	r7, r3, #25
 80153b2:	bf48      	it	mi
 80153b4:	b2b6      	uxthmi	r6, r6
 80153b6:	07df      	lsls	r7, r3, #31
 80153b8:	bf48      	it	mi
 80153ba:	f043 0320 	orrmi.w	r3, r3, #32
 80153be:	6029      	str	r1, [r5, #0]
 80153c0:	bf48      	it	mi
 80153c2:	6023      	strmi	r3, [r4, #0]
 80153c4:	b91e      	cbnz	r6, 80153ce <_printf_i+0x1a6>
 80153c6:	6823      	ldr	r3, [r4, #0]
 80153c8:	f023 0320 	bic.w	r3, r3, #32
 80153cc:	6023      	str	r3, [r4, #0]
 80153ce:	2310      	movs	r3, #16
 80153d0:	e7a6      	b.n	8015320 <_printf_i+0xf8>
 80153d2:	4824      	ldr	r0, [pc, #144]	; (8015464 <_printf_i+0x23c>)
 80153d4:	e7e4      	b.n	80153a0 <_printf_i+0x178>
 80153d6:	4615      	mov	r5, r2
 80153d8:	e7bd      	b.n	8015356 <_printf_i+0x12e>
 80153da:	682b      	ldr	r3, [r5, #0]
 80153dc:	6826      	ldr	r6, [r4, #0]
 80153de:	1d18      	adds	r0, r3, #4
 80153e0:	6961      	ldr	r1, [r4, #20]
 80153e2:	6028      	str	r0, [r5, #0]
 80153e4:	0635      	lsls	r5, r6, #24
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	d501      	bpl.n	80153ee <_printf_i+0x1c6>
 80153ea:	6019      	str	r1, [r3, #0]
 80153ec:	e002      	b.n	80153f4 <_printf_i+0x1cc>
 80153ee:	0670      	lsls	r0, r6, #25
 80153f0:	d5fb      	bpl.n	80153ea <_printf_i+0x1c2>
 80153f2:	8019      	strh	r1, [r3, #0]
 80153f4:	2300      	movs	r3, #0
 80153f6:	4615      	mov	r5, r2
 80153f8:	6123      	str	r3, [r4, #16]
 80153fa:	e7bc      	b.n	8015376 <_printf_i+0x14e>
 80153fc:	682b      	ldr	r3, [r5, #0]
 80153fe:	2100      	movs	r1, #0
 8015400:	1d1a      	adds	r2, r3, #4
 8015402:	602a      	str	r2, [r5, #0]
 8015404:	681d      	ldr	r5, [r3, #0]
 8015406:	6862      	ldr	r2, [r4, #4]
 8015408:	4628      	mov	r0, r5
 801540a:	f000 f97f 	bl	801570c <memchr>
 801540e:	b108      	cbz	r0, 8015414 <_printf_i+0x1ec>
 8015410:	1b40      	subs	r0, r0, r5
 8015412:	6060      	str	r0, [r4, #4]
 8015414:	6863      	ldr	r3, [r4, #4]
 8015416:	6123      	str	r3, [r4, #16]
 8015418:	2300      	movs	r3, #0
 801541a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801541e:	e7aa      	b.n	8015376 <_printf_i+0x14e>
 8015420:	462a      	mov	r2, r5
 8015422:	4649      	mov	r1, r9
 8015424:	4640      	mov	r0, r8
 8015426:	6923      	ldr	r3, [r4, #16]
 8015428:	47d0      	blx	sl
 801542a:	3001      	adds	r0, #1
 801542c:	d0ad      	beq.n	801538a <_printf_i+0x162>
 801542e:	6823      	ldr	r3, [r4, #0]
 8015430:	079b      	lsls	r3, r3, #30
 8015432:	d413      	bmi.n	801545c <_printf_i+0x234>
 8015434:	68e0      	ldr	r0, [r4, #12]
 8015436:	9b03      	ldr	r3, [sp, #12]
 8015438:	4298      	cmp	r0, r3
 801543a:	bfb8      	it	lt
 801543c:	4618      	movlt	r0, r3
 801543e:	e7a6      	b.n	801538e <_printf_i+0x166>
 8015440:	2301      	movs	r3, #1
 8015442:	4632      	mov	r2, r6
 8015444:	4649      	mov	r1, r9
 8015446:	4640      	mov	r0, r8
 8015448:	47d0      	blx	sl
 801544a:	3001      	adds	r0, #1
 801544c:	d09d      	beq.n	801538a <_printf_i+0x162>
 801544e:	3501      	adds	r5, #1
 8015450:	68e3      	ldr	r3, [r4, #12]
 8015452:	9903      	ldr	r1, [sp, #12]
 8015454:	1a5b      	subs	r3, r3, r1
 8015456:	42ab      	cmp	r3, r5
 8015458:	dcf2      	bgt.n	8015440 <_printf_i+0x218>
 801545a:	e7eb      	b.n	8015434 <_printf_i+0x20c>
 801545c:	2500      	movs	r5, #0
 801545e:	f104 0619 	add.w	r6, r4, #25
 8015462:	e7f5      	b.n	8015450 <_printf_i+0x228>
 8015464:	08017fab 	.word	0x08017fab
 8015468:	08017fbc 	.word	0x08017fbc

0801546c <__sflush_r>:
 801546c:	898a      	ldrh	r2, [r1, #12]
 801546e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015470:	4605      	mov	r5, r0
 8015472:	0710      	lsls	r0, r2, #28
 8015474:	460c      	mov	r4, r1
 8015476:	d457      	bmi.n	8015528 <__sflush_r+0xbc>
 8015478:	684b      	ldr	r3, [r1, #4]
 801547a:	2b00      	cmp	r3, #0
 801547c:	dc04      	bgt.n	8015488 <__sflush_r+0x1c>
 801547e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015480:	2b00      	cmp	r3, #0
 8015482:	dc01      	bgt.n	8015488 <__sflush_r+0x1c>
 8015484:	2000      	movs	r0, #0
 8015486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801548a:	2e00      	cmp	r6, #0
 801548c:	d0fa      	beq.n	8015484 <__sflush_r+0x18>
 801548e:	2300      	movs	r3, #0
 8015490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015494:	682f      	ldr	r7, [r5, #0]
 8015496:	6a21      	ldr	r1, [r4, #32]
 8015498:	602b      	str	r3, [r5, #0]
 801549a:	d032      	beq.n	8015502 <__sflush_r+0x96>
 801549c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801549e:	89a3      	ldrh	r3, [r4, #12]
 80154a0:	075a      	lsls	r2, r3, #29
 80154a2:	d505      	bpl.n	80154b0 <__sflush_r+0x44>
 80154a4:	6863      	ldr	r3, [r4, #4]
 80154a6:	1ac0      	subs	r0, r0, r3
 80154a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80154aa:	b10b      	cbz	r3, 80154b0 <__sflush_r+0x44>
 80154ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80154ae:	1ac0      	subs	r0, r0, r3
 80154b0:	2300      	movs	r3, #0
 80154b2:	4602      	mov	r2, r0
 80154b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80154b6:	4628      	mov	r0, r5
 80154b8:	6a21      	ldr	r1, [r4, #32]
 80154ba:	47b0      	blx	r6
 80154bc:	1c43      	adds	r3, r0, #1
 80154be:	89a3      	ldrh	r3, [r4, #12]
 80154c0:	d106      	bne.n	80154d0 <__sflush_r+0x64>
 80154c2:	6829      	ldr	r1, [r5, #0]
 80154c4:	291d      	cmp	r1, #29
 80154c6:	d82b      	bhi.n	8015520 <__sflush_r+0xb4>
 80154c8:	4a28      	ldr	r2, [pc, #160]	; (801556c <__sflush_r+0x100>)
 80154ca:	410a      	asrs	r2, r1
 80154cc:	07d6      	lsls	r6, r2, #31
 80154ce:	d427      	bmi.n	8015520 <__sflush_r+0xb4>
 80154d0:	2200      	movs	r2, #0
 80154d2:	6062      	str	r2, [r4, #4]
 80154d4:	6922      	ldr	r2, [r4, #16]
 80154d6:	04d9      	lsls	r1, r3, #19
 80154d8:	6022      	str	r2, [r4, #0]
 80154da:	d504      	bpl.n	80154e6 <__sflush_r+0x7a>
 80154dc:	1c42      	adds	r2, r0, #1
 80154de:	d101      	bne.n	80154e4 <__sflush_r+0x78>
 80154e0:	682b      	ldr	r3, [r5, #0]
 80154e2:	b903      	cbnz	r3, 80154e6 <__sflush_r+0x7a>
 80154e4:	6560      	str	r0, [r4, #84]	; 0x54
 80154e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154e8:	602f      	str	r7, [r5, #0]
 80154ea:	2900      	cmp	r1, #0
 80154ec:	d0ca      	beq.n	8015484 <__sflush_r+0x18>
 80154ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154f2:	4299      	cmp	r1, r3
 80154f4:	d002      	beq.n	80154fc <__sflush_r+0x90>
 80154f6:	4628      	mov	r0, r5
 80154f8:	f7ff fbee 	bl	8014cd8 <_free_r>
 80154fc:	2000      	movs	r0, #0
 80154fe:	6360      	str	r0, [r4, #52]	; 0x34
 8015500:	e7c1      	b.n	8015486 <__sflush_r+0x1a>
 8015502:	2301      	movs	r3, #1
 8015504:	4628      	mov	r0, r5
 8015506:	47b0      	blx	r6
 8015508:	1c41      	adds	r1, r0, #1
 801550a:	d1c8      	bne.n	801549e <__sflush_r+0x32>
 801550c:	682b      	ldr	r3, [r5, #0]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d0c5      	beq.n	801549e <__sflush_r+0x32>
 8015512:	2b1d      	cmp	r3, #29
 8015514:	d001      	beq.n	801551a <__sflush_r+0xae>
 8015516:	2b16      	cmp	r3, #22
 8015518:	d101      	bne.n	801551e <__sflush_r+0xb2>
 801551a:	602f      	str	r7, [r5, #0]
 801551c:	e7b2      	b.n	8015484 <__sflush_r+0x18>
 801551e:	89a3      	ldrh	r3, [r4, #12]
 8015520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015524:	81a3      	strh	r3, [r4, #12]
 8015526:	e7ae      	b.n	8015486 <__sflush_r+0x1a>
 8015528:	690f      	ldr	r7, [r1, #16]
 801552a:	2f00      	cmp	r7, #0
 801552c:	d0aa      	beq.n	8015484 <__sflush_r+0x18>
 801552e:	0793      	lsls	r3, r2, #30
 8015530:	bf18      	it	ne
 8015532:	2300      	movne	r3, #0
 8015534:	680e      	ldr	r6, [r1, #0]
 8015536:	bf08      	it	eq
 8015538:	694b      	ldreq	r3, [r1, #20]
 801553a:	1bf6      	subs	r6, r6, r7
 801553c:	600f      	str	r7, [r1, #0]
 801553e:	608b      	str	r3, [r1, #8]
 8015540:	2e00      	cmp	r6, #0
 8015542:	dd9f      	ble.n	8015484 <__sflush_r+0x18>
 8015544:	4633      	mov	r3, r6
 8015546:	463a      	mov	r2, r7
 8015548:	4628      	mov	r0, r5
 801554a:	6a21      	ldr	r1, [r4, #32]
 801554c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8015550:	47e0      	blx	ip
 8015552:	2800      	cmp	r0, #0
 8015554:	dc06      	bgt.n	8015564 <__sflush_r+0xf8>
 8015556:	89a3      	ldrh	r3, [r4, #12]
 8015558:	f04f 30ff 	mov.w	r0, #4294967295
 801555c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015560:	81a3      	strh	r3, [r4, #12]
 8015562:	e790      	b.n	8015486 <__sflush_r+0x1a>
 8015564:	4407      	add	r7, r0
 8015566:	1a36      	subs	r6, r6, r0
 8015568:	e7ea      	b.n	8015540 <__sflush_r+0xd4>
 801556a:	bf00      	nop
 801556c:	dfbffffe 	.word	0xdfbffffe

08015570 <_fflush_r>:
 8015570:	b538      	push	{r3, r4, r5, lr}
 8015572:	690b      	ldr	r3, [r1, #16]
 8015574:	4605      	mov	r5, r0
 8015576:	460c      	mov	r4, r1
 8015578:	b913      	cbnz	r3, 8015580 <_fflush_r+0x10>
 801557a:	2500      	movs	r5, #0
 801557c:	4628      	mov	r0, r5
 801557e:	bd38      	pop	{r3, r4, r5, pc}
 8015580:	b118      	cbz	r0, 801558a <_fflush_r+0x1a>
 8015582:	6a03      	ldr	r3, [r0, #32]
 8015584:	b90b      	cbnz	r3, 801558a <_fflush_r+0x1a>
 8015586:	f7ff fa31 	bl	80149ec <__sinit>
 801558a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d0f3      	beq.n	801557a <_fflush_r+0xa>
 8015592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015594:	07d0      	lsls	r0, r2, #31
 8015596:	d404      	bmi.n	80155a2 <_fflush_r+0x32>
 8015598:	0599      	lsls	r1, r3, #22
 801559a:	d402      	bmi.n	80155a2 <_fflush_r+0x32>
 801559c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801559e:	f7ff fb8a 	bl	8014cb6 <__retarget_lock_acquire_recursive>
 80155a2:	4628      	mov	r0, r5
 80155a4:	4621      	mov	r1, r4
 80155a6:	f7ff ff61 	bl	801546c <__sflush_r>
 80155aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80155ac:	4605      	mov	r5, r0
 80155ae:	07da      	lsls	r2, r3, #31
 80155b0:	d4e4      	bmi.n	801557c <_fflush_r+0xc>
 80155b2:	89a3      	ldrh	r3, [r4, #12]
 80155b4:	059b      	lsls	r3, r3, #22
 80155b6:	d4e1      	bmi.n	801557c <_fflush_r+0xc>
 80155b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155ba:	f7ff fb7d 	bl	8014cb8 <__retarget_lock_release_recursive>
 80155be:	e7dd      	b.n	801557c <_fflush_r+0xc>

080155c0 <__swbuf_r>:
 80155c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155c2:	460e      	mov	r6, r1
 80155c4:	4614      	mov	r4, r2
 80155c6:	4605      	mov	r5, r0
 80155c8:	b118      	cbz	r0, 80155d2 <__swbuf_r+0x12>
 80155ca:	6a03      	ldr	r3, [r0, #32]
 80155cc:	b90b      	cbnz	r3, 80155d2 <__swbuf_r+0x12>
 80155ce:	f7ff fa0d 	bl	80149ec <__sinit>
 80155d2:	69a3      	ldr	r3, [r4, #24]
 80155d4:	60a3      	str	r3, [r4, #8]
 80155d6:	89a3      	ldrh	r3, [r4, #12]
 80155d8:	071a      	lsls	r2, r3, #28
 80155da:	d525      	bpl.n	8015628 <__swbuf_r+0x68>
 80155dc:	6923      	ldr	r3, [r4, #16]
 80155de:	b31b      	cbz	r3, 8015628 <__swbuf_r+0x68>
 80155e0:	6823      	ldr	r3, [r4, #0]
 80155e2:	6922      	ldr	r2, [r4, #16]
 80155e4:	b2f6      	uxtb	r6, r6
 80155e6:	1a98      	subs	r0, r3, r2
 80155e8:	6963      	ldr	r3, [r4, #20]
 80155ea:	4637      	mov	r7, r6
 80155ec:	4283      	cmp	r3, r0
 80155ee:	dc04      	bgt.n	80155fa <__swbuf_r+0x3a>
 80155f0:	4621      	mov	r1, r4
 80155f2:	4628      	mov	r0, r5
 80155f4:	f7ff ffbc 	bl	8015570 <_fflush_r>
 80155f8:	b9e0      	cbnz	r0, 8015634 <__swbuf_r+0x74>
 80155fa:	68a3      	ldr	r3, [r4, #8]
 80155fc:	3b01      	subs	r3, #1
 80155fe:	60a3      	str	r3, [r4, #8]
 8015600:	6823      	ldr	r3, [r4, #0]
 8015602:	1c5a      	adds	r2, r3, #1
 8015604:	6022      	str	r2, [r4, #0]
 8015606:	701e      	strb	r6, [r3, #0]
 8015608:	6962      	ldr	r2, [r4, #20]
 801560a:	1c43      	adds	r3, r0, #1
 801560c:	429a      	cmp	r2, r3
 801560e:	d004      	beq.n	801561a <__swbuf_r+0x5a>
 8015610:	89a3      	ldrh	r3, [r4, #12]
 8015612:	07db      	lsls	r3, r3, #31
 8015614:	d506      	bpl.n	8015624 <__swbuf_r+0x64>
 8015616:	2e0a      	cmp	r6, #10
 8015618:	d104      	bne.n	8015624 <__swbuf_r+0x64>
 801561a:	4621      	mov	r1, r4
 801561c:	4628      	mov	r0, r5
 801561e:	f7ff ffa7 	bl	8015570 <_fflush_r>
 8015622:	b938      	cbnz	r0, 8015634 <__swbuf_r+0x74>
 8015624:	4638      	mov	r0, r7
 8015626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015628:	4621      	mov	r1, r4
 801562a:	4628      	mov	r0, r5
 801562c:	f000 f806 	bl	801563c <__swsetup_r>
 8015630:	2800      	cmp	r0, #0
 8015632:	d0d5      	beq.n	80155e0 <__swbuf_r+0x20>
 8015634:	f04f 37ff 	mov.w	r7, #4294967295
 8015638:	e7f4      	b.n	8015624 <__swbuf_r+0x64>
	...

0801563c <__swsetup_r>:
 801563c:	b538      	push	{r3, r4, r5, lr}
 801563e:	4b2a      	ldr	r3, [pc, #168]	; (80156e8 <__swsetup_r+0xac>)
 8015640:	4605      	mov	r5, r0
 8015642:	6818      	ldr	r0, [r3, #0]
 8015644:	460c      	mov	r4, r1
 8015646:	b118      	cbz	r0, 8015650 <__swsetup_r+0x14>
 8015648:	6a03      	ldr	r3, [r0, #32]
 801564a:	b90b      	cbnz	r3, 8015650 <__swsetup_r+0x14>
 801564c:	f7ff f9ce 	bl	80149ec <__sinit>
 8015650:	89a3      	ldrh	r3, [r4, #12]
 8015652:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015656:	0718      	lsls	r0, r3, #28
 8015658:	d422      	bmi.n	80156a0 <__swsetup_r+0x64>
 801565a:	06d9      	lsls	r1, r3, #27
 801565c:	d407      	bmi.n	801566e <__swsetup_r+0x32>
 801565e:	2309      	movs	r3, #9
 8015660:	602b      	str	r3, [r5, #0]
 8015662:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015666:	f04f 30ff 	mov.w	r0, #4294967295
 801566a:	81a3      	strh	r3, [r4, #12]
 801566c:	e034      	b.n	80156d8 <__swsetup_r+0x9c>
 801566e:	0758      	lsls	r0, r3, #29
 8015670:	d512      	bpl.n	8015698 <__swsetup_r+0x5c>
 8015672:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015674:	b141      	cbz	r1, 8015688 <__swsetup_r+0x4c>
 8015676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801567a:	4299      	cmp	r1, r3
 801567c:	d002      	beq.n	8015684 <__swsetup_r+0x48>
 801567e:	4628      	mov	r0, r5
 8015680:	f7ff fb2a 	bl	8014cd8 <_free_r>
 8015684:	2300      	movs	r3, #0
 8015686:	6363      	str	r3, [r4, #52]	; 0x34
 8015688:	89a3      	ldrh	r3, [r4, #12]
 801568a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801568e:	81a3      	strh	r3, [r4, #12]
 8015690:	2300      	movs	r3, #0
 8015692:	6063      	str	r3, [r4, #4]
 8015694:	6923      	ldr	r3, [r4, #16]
 8015696:	6023      	str	r3, [r4, #0]
 8015698:	89a3      	ldrh	r3, [r4, #12]
 801569a:	f043 0308 	orr.w	r3, r3, #8
 801569e:	81a3      	strh	r3, [r4, #12]
 80156a0:	6923      	ldr	r3, [r4, #16]
 80156a2:	b94b      	cbnz	r3, 80156b8 <__swsetup_r+0x7c>
 80156a4:	89a3      	ldrh	r3, [r4, #12]
 80156a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80156aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80156ae:	d003      	beq.n	80156b8 <__swsetup_r+0x7c>
 80156b0:	4621      	mov	r1, r4
 80156b2:	4628      	mov	r0, r5
 80156b4:	f000 f85d 	bl	8015772 <__smakebuf_r>
 80156b8:	89a0      	ldrh	r0, [r4, #12]
 80156ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80156be:	f010 0301 	ands.w	r3, r0, #1
 80156c2:	d00a      	beq.n	80156da <__swsetup_r+0x9e>
 80156c4:	2300      	movs	r3, #0
 80156c6:	60a3      	str	r3, [r4, #8]
 80156c8:	6963      	ldr	r3, [r4, #20]
 80156ca:	425b      	negs	r3, r3
 80156cc:	61a3      	str	r3, [r4, #24]
 80156ce:	6923      	ldr	r3, [r4, #16]
 80156d0:	b943      	cbnz	r3, 80156e4 <__swsetup_r+0xa8>
 80156d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80156d6:	d1c4      	bne.n	8015662 <__swsetup_r+0x26>
 80156d8:	bd38      	pop	{r3, r4, r5, pc}
 80156da:	0781      	lsls	r1, r0, #30
 80156dc:	bf58      	it	pl
 80156de:	6963      	ldrpl	r3, [r4, #20]
 80156e0:	60a3      	str	r3, [r4, #8]
 80156e2:	e7f4      	b.n	80156ce <__swsetup_r+0x92>
 80156e4:	2000      	movs	r0, #0
 80156e6:	e7f7      	b.n	80156d8 <__swsetup_r+0x9c>
 80156e8:	2000007c 	.word	0x2000007c

080156ec <_sbrk_r>:
 80156ec:	b538      	push	{r3, r4, r5, lr}
 80156ee:	2300      	movs	r3, #0
 80156f0:	4d05      	ldr	r5, [pc, #20]	; (8015708 <_sbrk_r+0x1c>)
 80156f2:	4604      	mov	r4, r0
 80156f4:	4608      	mov	r0, r1
 80156f6:	602b      	str	r3, [r5, #0]
 80156f8:	f7eb fb6e 	bl	8000dd8 <_sbrk>
 80156fc:	1c43      	adds	r3, r0, #1
 80156fe:	d102      	bne.n	8015706 <_sbrk_r+0x1a>
 8015700:	682b      	ldr	r3, [r5, #0]
 8015702:	b103      	cbz	r3, 8015706 <_sbrk_r+0x1a>
 8015704:	6023      	str	r3, [r4, #0]
 8015706:	bd38      	pop	{r3, r4, r5, pc}
 8015708:	2000bcb0 	.word	0x2000bcb0

0801570c <memchr>:
 801570c:	4603      	mov	r3, r0
 801570e:	b510      	push	{r4, lr}
 8015710:	b2c9      	uxtb	r1, r1
 8015712:	4402      	add	r2, r0
 8015714:	4293      	cmp	r3, r2
 8015716:	4618      	mov	r0, r3
 8015718:	d101      	bne.n	801571e <memchr+0x12>
 801571a:	2000      	movs	r0, #0
 801571c:	e003      	b.n	8015726 <memchr+0x1a>
 801571e:	7804      	ldrb	r4, [r0, #0]
 8015720:	3301      	adds	r3, #1
 8015722:	428c      	cmp	r4, r1
 8015724:	d1f6      	bne.n	8015714 <memchr+0x8>
 8015726:	bd10      	pop	{r4, pc}

08015728 <__swhatbuf_r>:
 8015728:	b570      	push	{r4, r5, r6, lr}
 801572a:	460c      	mov	r4, r1
 801572c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015730:	4615      	mov	r5, r2
 8015732:	2900      	cmp	r1, #0
 8015734:	461e      	mov	r6, r3
 8015736:	b096      	sub	sp, #88	; 0x58
 8015738:	da0c      	bge.n	8015754 <__swhatbuf_r+0x2c>
 801573a:	89a3      	ldrh	r3, [r4, #12]
 801573c:	2100      	movs	r1, #0
 801573e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015742:	bf0c      	ite	eq
 8015744:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015748:	2340      	movne	r3, #64	; 0x40
 801574a:	2000      	movs	r0, #0
 801574c:	6031      	str	r1, [r6, #0]
 801574e:	602b      	str	r3, [r5, #0]
 8015750:	b016      	add	sp, #88	; 0x58
 8015752:	bd70      	pop	{r4, r5, r6, pc}
 8015754:	466a      	mov	r2, sp
 8015756:	f000 f849 	bl	80157ec <_fstat_r>
 801575a:	2800      	cmp	r0, #0
 801575c:	dbed      	blt.n	801573a <__swhatbuf_r+0x12>
 801575e:	9901      	ldr	r1, [sp, #4]
 8015760:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015764:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015768:	4259      	negs	r1, r3
 801576a:	4159      	adcs	r1, r3
 801576c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015770:	e7eb      	b.n	801574a <__swhatbuf_r+0x22>

08015772 <__smakebuf_r>:
 8015772:	898b      	ldrh	r3, [r1, #12]
 8015774:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015776:	079d      	lsls	r5, r3, #30
 8015778:	4606      	mov	r6, r0
 801577a:	460c      	mov	r4, r1
 801577c:	d507      	bpl.n	801578e <__smakebuf_r+0x1c>
 801577e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015782:	6023      	str	r3, [r4, #0]
 8015784:	6123      	str	r3, [r4, #16]
 8015786:	2301      	movs	r3, #1
 8015788:	6163      	str	r3, [r4, #20]
 801578a:	b002      	add	sp, #8
 801578c:	bd70      	pop	{r4, r5, r6, pc}
 801578e:	466a      	mov	r2, sp
 8015790:	ab01      	add	r3, sp, #4
 8015792:	f7ff ffc9 	bl	8015728 <__swhatbuf_r>
 8015796:	9900      	ldr	r1, [sp, #0]
 8015798:	4605      	mov	r5, r0
 801579a:	4630      	mov	r0, r6
 801579c:	f7ff fb04 	bl	8014da8 <_malloc_r>
 80157a0:	b948      	cbnz	r0, 80157b6 <__smakebuf_r+0x44>
 80157a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157a6:	059a      	lsls	r2, r3, #22
 80157a8:	d4ef      	bmi.n	801578a <__smakebuf_r+0x18>
 80157aa:	f023 0303 	bic.w	r3, r3, #3
 80157ae:	f043 0302 	orr.w	r3, r3, #2
 80157b2:	81a3      	strh	r3, [r4, #12]
 80157b4:	e7e3      	b.n	801577e <__smakebuf_r+0xc>
 80157b6:	89a3      	ldrh	r3, [r4, #12]
 80157b8:	6020      	str	r0, [r4, #0]
 80157ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157be:	81a3      	strh	r3, [r4, #12]
 80157c0:	9b00      	ldr	r3, [sp, #0]
 80157c2:	6120      	str	r0, [r4, #16]
 80157c4:	6163      	str	r3, [r4, #20]
 80157c6:	9b01      	ldr	r3, [sp, #4]
 80157c8:	b15b      	cbz	r3, 80157e2 <__smakebuf_r+0x70>
 80157ca:	4630      	mov	r0, r6
 80157cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80157d0:	f000 f81e 	bl	8015810 <_isatty_r>
 80157d4:	b128      	cbz	r0, 80157e2 <__smakebuf_r+0x70>
 80157d6:	89a3      	ldrh	r3, [r4, #12]
 80157d8:	f023 0303 	bic.w	r3, r3, #3
 80157dc:	f043 0301 	orr.w	r3, r3, #1
 80157e0:	81a3      	strh	r3, [r4, #12]
 80157e2:	89a3      	ldrh	r3, [r4, #12]
 80157e4:	431d      	orrs	r5, r3
 80157e6:	81a5      	strh	r5, [r4, #12]
 80157e8:	e7cf      	b.n	801578a <__smakebuf_r+0x18>
	...

080157ec <_fstat_r>:
 80157ec:	b538      	push	{r3, r4, r5, lr}
 80157ee:	2300      	movs	r3, #0
 80157f0:	4d06      	ldr	r5, [pc, #24]	; (801580c <_fstat_r+0x20>)
 80157f2:	4604      	mov	r4, r0
 80157f4:	4608      	mov	r0, r1
 80157f6:	4611      	mov	r1, r2
 80157f8:	602b      	str	r3, [r5, #0]
 80157fa:	f7eb fac7 	bl	8000d8c <_fstat>
 80157fe:	1c43      	adds	r3, r0, #1
 8015800:	d102      	bne.n	8015808 <_fstat_r+0x1c>
 8015802:	682b      	ldr	r3, [r5, #0]
 8015804:	b103      	cbz	r3, 8015808 <_fstat_r+0x1c>
 8015806:	6023      	str	r3, [r4, #0]
 8015808:	bd38      	pop	{r3, r4, r5, pc}
 801580a:	bf00      	nop
 801580c:	2000bcb0 	.word	0x2000bcb0

08015810 <_isatty_r>:
 8015810:	b538      	push	{r3, r4, r5, lr}
 8015812:	2300      	movs	r3, #0
 8015814:	4d05      	ldr	r5, [pc, #20]	; (801582c <_isatty_r+0x1c>)
 8015816:	4604      	mov	r4, r0
 8015818:	4608      	mov	r0, r1
 801581a:	602b      	str	r3, [r5, #0]
 801581c:	f7eb fac5 	bl	8000daa <_isatty>
 8015820:	1c43      	adds	r3, r0, #1
 8015822:	d102      	bne.n	801582a <_isatty_r+0x1a>
 8015824:	682b      	ldr	r3, [r5, #0]
 8015826:	b103      	cbz	r3, 801582a <_isatty_r+0x1a>
 8015828:	6023      	str	r3, [r4, #0]
 801582a:	bd38      	pop	{r3, r4, r5, pc}
 801582c:	2000bcb0 	.word	0x2000bcb0

08015830 <_init>:
 8015830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015832:	bf00      	nop
 8015834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015836:	bc08      	pop	{r3}
 8015838:	469e      	mov	lr, r3
 801583a:	4770      	bx	lr

0801583c <_fini>:
 801583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801583e:	bf00      	nop
 8015840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015842:	bc08      	pop	{r3}
 8015844:	469e      	mov	lr, r3
 8015846:	4770      	bx	lr
